#include <Arduino.h>
#include <Wire.h>
#include "PCF8575.h"

#define I2C_SDA 21
#define I2C_SCL 25
#define PCF_INT 34      // With external 4.7kΩ pull-up resistor
#define BUTTON_PIN 8
#define LED1_PIN 9
#define LED2_PIN 10
#define LED3_PIN 11

PCF8575 pcf8575(0x20);

// Interrupt variables
volatile bool interruptFlag = false;
bool lastButtonState = HIGH;
unsigned long lastButtonPressTime = 0;
const unsigned long buttonDebounceDelay = 200;
int currentLED = 0;

// Interrupt Service Routine
void IRAM_ATTR pcfInterrupt() {
    interruptFlag = true;
}

void clearPCFInterrupt() {
    pcf8575.read16();
    delay(1);
    pcf8575.read16();
}

void setLED(uint8_t pin, bool state) {
    uint16_t currentState = pcf8575.read16();
    
    // Always keep button pin HIGH (input mode) regardless of current reading
    currentState |= (1 << BUTTON_PIN);  // Force button pin HIGH
    
    // INVERTED LED logic for ULN2803
    if (state) {
        // LED ON - set pin HIGH (ULN2803 inverts to LOW output)
        currentState |= (1 << pin);
    } else {
        // LED OFF - set pin LOW (ULN2803 inverts to HIGH output)
        currentState &= ~(1 << pin);
    }
    
    pcf8575.write16(currentState);
    delay(5);
    clearPCFInterrupt();
}

void turnOffAllLEDs() {
    setLED(LED1_PIN, false);
    setLED(LED2_PIN, false);
    setLED(LED3_PIN, false);
}

void cycleLEDs() {
    Serial.println("=== CYCLING LEDS ===");
    
    // Turn off all LEDs first
    turnOffAllLEDs();
    
    currentLED++;
    if (currentLED > 3) {
        currentLED = 0;
    }
    
    switch (currentLED) {
        case 0:
            Serial.println("→ All LEDs OFF");
            break;
        case 1:
            setLED(LED1_PIN, true);   // Turn LED1 ON
            Serial.println("→ LED1 ON (P9)");
            break;
        case 2:
            setLED(LED2_PIN, true);   // Turn LED2 ON
            Serial.println("→ LED2 ON (P10)");
            break;
        case 3:
            setLED(LED3_PIN, true);   // Turn LED3 ON
            Serial.println("→ LED3 ON (P11)");
            break;
    }
    
    Serial.print("Current LED state: ");
    Serial.println(currentLED);
}

void handleButtonChange() {
    // Read current pin states to clear interrupt condition
    uint16_t pinStates = pcf8575.read16();
    bool currentButtonState = (pinStates >> BUTTON_PIN) & 0x01;
    
    Serial.print("Interrupt! Button: ");
    Serial.print(lastButtonState ? "HIGH" : "LOW");
    Serial.print(" → ");
    Serial.println(currentButtonState ? "HIGH" : "LOW");
    
    // Check for button press (HIGH to LOW transition)
    if (lastButtonState == HIGH && currentButtonState == LOW) {
        if ((millis() - lastButtonPressTime) > buttonDebounceDelay) {
            Serial.println("=== BUTTON PRESSED! ===");
            cycleLEDs();
            lastButtonPressTime = millis();
        } else {
            Serial.println("Button press ignored (debounce)");
        }
    }
    
    // Check for button release
    if (lastButtonState == LOW && currentButtonState == HIGH) {
        Serial.println("=== BUTTON RELEASED! ===");
    }
    
    // Always update button state
    lastButtonState = currentButtonState;
}

void setup() {
    Serial.begin(115200);
    Serial.println("PCF8575 LED Cycling - ULN2803 Logic");
    
    // Initialize I2C
    Wire.begin(I2C_SDA, I2C_SCL);
    Wire.setClock(100000);
    delay(100);
    
    // Initialize PCF8575
    if (!pcf8575.begin()) {
        Serial.println("PCF8575 initialization failed!");
        while(1) delay(1000);
    }
    
    Serial.println("PCF8575 initialized successfully!");
    
    // Configure interrupt pin (GPIO 34 with external pull-up)
    pinMode(PCF_INT, INPUT);
    
    // Initialize all pins HIGH
    pcf8575.write16(0xFFFF);
    delay(100);
    clearPCFInterrupt();
    
    // Read initial button state
    uint16_t initialState = pcf8575.read16();
    lastButtonState = (initialState >> BUTTON_PIN) & 0x01;
    
    // Turn off all LEDs initially
    turnOffAllLEDs();
    
    // Attach interrupt AFTER everything is initialized
    attachInterrupt(digitalPinToInterrupt(PCF_INT), pcfInterrupt, FALLING);
    
    Serial.println("Setup complete! Press button to cycle LEDs.");
    Serial.println("Hardware interrupt enabled on GPIO 34");
    Serial.print("Initial button state: ");
    Serial.println(lastButtonState ? "HIGH" : "LOW");
    Serial.println("Current state: All LEDs OFF");
    Serial.println("LED Logic: HIGH = ON, LOW = OFF (inverted for ULN2803)");
}

void loop() {
    // Check if interrupt occurred
    if (interruptFlag) {
        interruptFlag = false;  // Clear flag immediately
        
        // Handle the button change
        handleButtonChange();
    }
    
    // Main loop can do other tasks
    delay(10);
}
