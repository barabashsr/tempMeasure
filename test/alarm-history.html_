<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Temperature Controller - Alarm History</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        nav {
            margin-bottom: 20px;
            padding: 10px;
            background: #007bff;
            border-radius: 5px;
        }
        nav a {
            color: white;
            text-decoration: none;
            margin-right: 15px;
            padding: 5px 10px;
            border-radius: 3px;
        }
        nav a:hover {
            background: rgba(255,255,255,0.2);
        }
        .controls {
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 5px;
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .controls button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        .btn-success {
            background-color: #28a745;
            color: white;
        }
        .btn-warning {
            background-color: #ffc107;
            color: black;
        }
        .btn-danger {
            background-color: #dc3545;
            color: white;
        }
        .btn:hover {
            opacity: 0.8;
        }
        .filter-group {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        .filter-group label {
            font-weight: bold;
            margin-right: 5px;
        }
        .filter-group select, .filter-group input {
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }
        .date-range {
            display: flex;
            gap: 10px;
            align-items: center;
            background: #e9ecef;
            padding: 10px;
            border-radius: 4px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
            cursor: pointer;
            user-select: none;
            position: relative;
        }
        th:hover {
            background-color: #e9ecef;
        }
        th.sortable::after {
            content: " ‚Üï";
            color: #999;
            font-size: 12px;
        }
        th.sort-asc::after {
            content: " ‚Üë";
            color: #007bff;
            font-weight: bold;
        }
        th.sort-desc::after {
            content: " ‚Üì";
            color: #007bff;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .priority-critical {
            background-color: #f8d7da;
            color: #721c24;
            font-weight: bold;
        }
        .priority-high {
            background-color: #ffeaa7;
            color: #856404;
            font-weight: bold;
        }
        .priority-medium {
            background-color: #d1ecf1;
            color: #0c5460;
        }
        .priority-low {
            background-color: #d4edda;
            color: #155724;
        }
        .alarm-type {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        .type-high-temp {
            background-color: #ff6b6b;
            color: white;
        }
        .type-low-temp {
            background-color: #4ecdc4;
            color: white;
        }
        .type-sensor-error {
            background-color: #ffe66d;
            color: black;
        }
        .type-sensor-disconnected {
            background-color: #a8e6cf;
            color: black;
        }
        .no-history {
            text-align: center;
            padding: 40px;
            color: #6c757d;
            font-style: italic;
        }
        .timestamp {
            font-size: 12px;
            color: #6c757d;
        }
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 20px;
        }
        .pagination button {
            padding: 8px 12px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            border-radius: 4px;
        }
        .pagination button:hover {
            background: #f8f9fa;
        }
        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .pagination .current-page {
            background: #007bff;
            color: white;
            border-color: #007bff;
        }
    </style>
</head>
<body>
    <div class="container">
        <nav>
            <a href="/dashboard.html">Home</a>
            <a href="/sensors.html">Sensors</a>
            <a href="/points.html">Points</a>
            <a href="/alarms.html">Alarms</a>
            <a href="/alarm-history.html">Alarm History</a>
            <a href="/config">Configuration</a>
        </nav>

        <h1>Alarm History</h1>

        <!-- Controls -->
        <div class="controls">
            <div class="date-range">
                <label>Date Range:</label>
                <input type="date" id="startDate">
                <span>to</span>
                <input type="date" id="endDate">
                <button class="btn btn-primary" onclick="loadHistory()">üîç Load History</button>
            </div>
            
            <button class="btn btn-success" onclick="exportHistory()">üì• Export CSV</button>
            
            <div class="filter-group">
                <label>Filter by Point:</label>
                <select id="pointFilter" onchange="filterTable()">
                    <option value="">All Points</option>
                </select>
            </div>

            <div class="filter-group">
                <label>Filter by Type:</label>
                <select id="typeFilter" onchange="filterTable()">
                    <option value="">All Types</option>
                    <option value="0">High Temperature</option>
                    <option value="1">Low Temperature</option>
                    <option value="2">Sensor Error</option>
                    <option value="3">Sensor Disconnected</option>
                </select>
            </div>

            <div class="filter-group">
                <label>Filter by Priority:</label>
                <select id="priorityFilter" onchange="filterTable()">
                    <option value="">All Priorities</option>
                    <option value="3">Critical</option>
                    <option value="2">High</option>
                    <option value="1">Medium</option>
                    <option value="0">Low</option>
                </select>
            </div>
        </div>

        <!-- History Table -->
        <table id="historyTable">
            <thead>
                <tr>
                    <th class="sortable" onclick="sortTable(0)">Point</th>
                    <th class="sortable" onclick="sortTable(1)">Point Name</th>
                    <th class="sortable" onclick="sortTable(2)">Type</th>
                    <th class="sortable" onclick="sortTable(3)">Priority</th>
                    <th class="sortable" onclick="sortTable(4)">Event</th>
                    <th class="sortable" onclick="sortTable(5)">Temperature</th>
                    <th class="sortable" onclick="sortTable(6)">Threshold</th>
                    <th class="sortable" onclick="sortTable(7)">Timestamp</th>
                    <th class="sortable" onclick="sortTable(8)">Duration</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="9" class="no-history">Select a date range and click "Load History" to view alarm events</td>
                </tr>
            </tbody>
        </table>

        <!-- Pagination -->
        <div class="pagination" id="pagination" style="display: none;">
            <button id="prevPage" onclick="changePage(-1)">‚Üê Previous</button>
            <span id="pageInfo">Page 1 of 1</span>
            <button id="nextPage" onclick="changePage(1)">Next ‚Üí</button>
        </div>
    </div>

    <script>
        let historyData = [];
        let filteredData = [];
        let sortColumn = -1;
        let sortDirection = 'asc';
        let currentPage = 1;
        const itemsPerPage = 100;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Set default date range (last 7 days)
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - 7);
            
            document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
            document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
            
            loadPointsForFilter();
        });

        // Load points for filter dropdown
        async function loadPointsForFilter() {
            try {
                const response = await fetch('/api/points');
                const data = await response.json();
                const pointFilter = document.getElementById('pointFilter');
                
                // Clear existing options except "All Points"
                pointFilter.innerHTML = '<option value="">All Points</option>';
                
                if (data.points) {
                    data.points.forEach(point => {
                        const option = document.createElement('option');
                        option.value = point.address;
                        option.textContent = `${point.address} - ${point.name || 'Unnamed'}`;
                        pointFilter.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading points:', error);
            }
        }

        // Load alarm history from API
        async function loadHistory() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            if (!startDate || !endDate) {
                alert('Please select both start and end dates');
                return;
            }
            
            if (new Date(startDate) > new Date(endDate)) {
                alert('Start date must be before end date');
                return;
            }

            try {
                const response = await fetch(`/api/alarm-history?start=${startDate}&end=${endDate}`);
                const data = await response.json();
                
                if (data.success) {
                    historyData = data.history || [];
                    currentPage = 1;
                    displayHistory();
                } else {
                    throw new Error(data.error || 'Failed to load history');
                }
            } catch (error) {
                console.error('Error loading alarm history:', error);
                document.querySelector('#historyTable tbody').innerHTML = 
                    '<tr><td colspan="9" class="no-history">Error loading alarm history: ' + error.message + '</td></tr>';
            }
        }

        // Display history in table
        function displayHistory() {
            const tbody = document.querySelector('#historyTable tbody');
            
            if (historyData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" class="no-history">No alarm history found for the selected date range</td></tr>';
                document.getElementById('pagination').style.display = 'none';
                return;
            }

            // Apply filters
            filterTable();
        }

        // Create table row for history entry
        function createHistoryRow(entry) {
            const row = document.createElement('tr');
            
            const timestamp = new Date(entry.timestamp).toLocaleString();
            const duration = formatDuration(entry.duration);
            
            row.innerHTML = `
                <td>${entry.pointAddress}</td>
                <td>${entry.pointName || 'Unknown'}</td>
                <td><span class="alarm-type ${getTypeClass(entry.alarmType)}">${getTypeText(entry.alarmType)}</span></td>
                <td><span class="priority-${getPriorityClass(entry.priority)}">${getPriorityText(entry.priority)}</span></td>
                <td>${entry.event}</td>
                <td>${entry.temperature !== undefined ? entry.temperature + '¬∞C' : 'N/A'}</td>
                <td>${entry.threshold !== undefined ? entry.threshold + '¬∞C' : 'N/A'}</td>
                <td><span class="timestamp">${timestamp}</span></td>
                <td>${duration}</td>
            `;
            
            // Set data attributes for filtering
            row.dataset.point = entry.pointAddress;
            row.dataset.type = entry.alarmType;
            row.dataset.priority = entry.priority;
            
            return row;
        }

        // Helper functions
        function getTypeText(type) {
            const types = ['High Temp', 'Low Temp', 'Sensor Error', 'Disconnected'];
            return types[type] || 'Unknown';
        }

        function getTypeClass(type) {
            const classes = ['type-high-temp', 'type-low-temp', 'type-sensor-error', 'type-sensor-disconnected'];
            return classes[type] || '';
        }

        function getPriorityText(priority) {
            const priorities = ['Low', 'Medium', 'High', 'Critical'];
            return priorities[priority] || 'Unknown';
        }

        function getPriorityClass(priority) {
            const classes = ['low', 'medium', 'high', 'critical'];
            return classes[priority] || 'low';
        }

        function formatDuration(durationMs) {
            if (!durationMs || durationMs <= 0) return '-';
            
            const seconds = Math.floor(durationMs / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            const days = Math.floor(hours / 24);
            
            if (days > 0) {
                return `${days}d ${hours % 24}h ${minutes % 60}m`;
            } else if (hours > 0) {
                return `${hours}h ${minutes % 60}m`;
            } else if (minutes > 0) {
                return `${minutes}m ${seconds % 60}s`;
            } else {
                return `${seconds}s`;
            }
        }

        // Filter table function
        function filterTable() {
            const pointFilter = document.getElementById('pointFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            const priorityFilter = document.getElementById('priorityFilter').value;
            
            filteredData = historyData.filter(entry => {
                const pointMatch = !pointFilter || entry.pointAddress == pointFilter;
                const typeMatch = !typeFilter || entry.alarmType == typeFilter;
                const priorityMatch = !priorityFilter || entry.priority == priorityFilter;
                
                return pointMatch && typeMatch && priorityMatch;
            });
            
            currentPage = 1;
            displayFilteredData();
        }

        // Display filtered and paginated data
        function displayFilteredData() {
            const tbody = document.querySelector('#historyTable tbody');
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = filteredData.slice(startIndex, endIndex);
            
            if (pageData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" class="no-history">No alarm history matches the current filters</td></tr>';
                document.getElementById('pagination').style.display = 'none';
                return;
            }
            
            tbody.innerHTML = pageData.map(entry => createHistoryRow(entry).outerHTML).join('');
            
            // Update pagination
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            if (totalPages > 1) {
                document.getElementById('pagination').style.display = 'flex';
                document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages} (${filteredData.length} entries)`;
                document.getElementById('prevPage').disabled = currentPage === 1;
                document.getElementById('nextPage').disabled = currentPage === totalPages;
            } else {
                document.getElementById('pagination').style.display = 'none';
            }
        }

        // Pagination functions
        function changePage(direction) {
            const totalPages = Math.ceil(filteredData.length / itemsPerPage);
            const newPage = currentPage + direction;
            
            if (newPage >= 1 && newPage <= totalPages) {
                currentPage = newPage;
                displayFilteredData();
            }
        }

        // Table sorting function
        function sortTable(columnIndex) {
            const table = document.getElementById('historyTable');
            
            // Update sort direction
            if (sortColumn === columnIndex) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortDirection = 'asc';
                sortColumn = columnIndex;
            }

            // Clear previous sort indicators
            table.querySelectorAll('th').forEach(th => {
                th.classList.remove('sort-asc', 'sort-desc');
            });

            // Add current sort indicator
            const currentHeader = table.querySelector(`th:nth-child(${columnIndex + 1})`);
            currentHeader.classList.add(sortDirection === 'asc' ? 'sort-asc' : 'sort-desc');

            // Sort the filtered data
            filteredData.sort((a, b) => {
                let aValue, bValue;
                
                switch (columnIndex) {
                    case 0: // Point
                        aValue = a.pointAddress;
                        bValue = b.pointAddress;
                        break;
                    case 1: // Point Name
                        aValue = a.pointName || '';
                        bValue = b.pointName || '';
                        break;
                    case 2: // Type
                        aValue = getTypeText(a.alarmType);
                        bValue = getTypeText(b.alarmType);
                        break;
                    case 3: // Priority
                        aValue = a.priority;
                        bValue = b.priority;
                        break;
                    case 4: // Event
                        aValue = a.event;
                        bValue = b.event;
                        break;
                    case 5: // Temperature
                        aValue = a.temperature || 0;
                        bValue = b.temperature || 0;
                        break;
                    case 6: // Threshold
                        aValue = a.threshold || 0;
                        bValue = b.threshold || 0;
                        break;
                    case 7: // Timestamp
                        aValue = new Date(a.timestamp);
                        bValue = new Date(b.timestamp);
                        break;
                    case 8: // Duration
                        aValue = a.duration || 0;
                        bValue = b.duration || 0;
                        break;
                    default:
                        return 0;
                }
                
                let comparison = 0;
                if (typeof aValue === 'number' && typeof bValue === 'number') {
                    comparison = aValue - bValue;
                } else if (aValue instanceof Date && bValue instanceof Date) {
                    comparison = aValue - bValue;
                } else {
                    comparison = String(aValue).localeCompare(String(bValue));
                }
                
                return sortDirection === 'asc' ? comparison : -comparison;
            });
            
            displayFilteredData();
        }

        // Export history to CSV
        async function exportHistory() {
            if (filteredData.length === 0) {
                alert('No data to export. Please load history first.');
                return;
            }
            
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            
            try {
                const response = await fetch(`/api/alarm-history/export?start=${startDate}&end=${endDate}`, {
                    method: 'GET'
                });
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `alarm_history_${startDate}_to_${endDate}.csv`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                } else {
                    throw new Error('Export failed');
                }
            } catch (error) {
                console.error('Error exporting history:', error);
                alert('Failed to export history: ' + error.message);
            }
        }
    </script>
</body>
</html>
