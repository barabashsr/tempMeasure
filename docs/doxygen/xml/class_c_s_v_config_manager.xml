<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_c_s_v_config_manager" kind="class" language="C++" prot="public">
    <compoundname>CSVConfigManager</compoundname>
    <includes refid="_c_s_v_config_manager_8h" local="no">CSVConfigManager.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_c_s_v_config_manager_1af52a38cd84e7551a980d3153adea88bd" prot="private" static="no" mutable="no">
        <type><ref refid="class_temperature_controller" kindref="compound">TemperatureController</ref> &amp;</type>
        <definition>TemperatureController&amp; CSVConfigManager::_controller</definition>
        <argsstring></argsstring>
        <name>_controller</name>
        <qualifiedname>CSVConfigManager::_controller</qualifiedname>
        <briefdescription>
<para>Reference to temperature controller. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="104" column="27" bodyfile="include/CSVConfigManager.h" bodystart="104" bodyend="-1"/>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">_exportPointToCSV</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1aa43c8405582f387b0330cc1e965f5117" compoundref="_c_s_v_config_manager_8cpp" startline="389" endline="398">_getAlarmPriorityForPoint</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1a7ecf23e1c03fa194bcf3afe52408d378" compoundref="_c_s_v_config_manager_8cpp" startline="140" endline="161">_parseAlarmFromCSV</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1ac91e29ab2468661df752e4e4b2f7186c" compoundref="_c_s_v_config_manager_8cpp" startline="309" endline="386">_parseCSVLine</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1aeb5348105aeb04d73c45526f70d745f6" compoundref="_c_s_v_config_manager_8cpp" startline="24" endline="26">CSVConfigManager</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1a1c6cbc4c8a132762bf16a8ce9f7d0bfc" compoundref="_c_s_v_config_manager_8cpp" startline="28" endline="55">exportPointsWithAlarmsToCSV</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1aef1d9d5b47814730cb9f80554b6fd623" compoundref="_c_s_v_config_manager_8cpp" startline="93" endline="137">importPointsWithAlarmsFromCSV</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_c_s_v_config_manager_1a21fb0525c0a6d337f3cc8ddacaa928eb" prot="private" static="no" mutable="no">
        <type>String</type>
        <definition>String CSVConfigManager::_lastError</definition>
        <argsstring></argsstring>
        <name>_lastError</name>
        <qualifiedname>CSVConfigManager::_lastError</qualifiedname>
        <briefdescription>
<para>Last error message for debugging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="105" column="12" bodyfile="include/CSVConfigManager.h" bodystart="105" bodyend="-1"/>
        <referencedby refid="class_c_s_v_config_manager_1ac91e29ab2468661df752e4e4b2f7186c" compoundref="_c_s_v_config_manager_8cpp" startline="309" endline="386">_parseCSVLine</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1aeb5348105aeb04d73c45526f70d745f6" compoundref="_c_s_v_config_manager_8cpp" startline="24" endline="26">CSVConfigManager</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1abf641fecbd2d9ae68c4a762908b37bfb" compoundref="_c_s_v_config_manager_8h" startline="101" endline="101">getLastError</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1aef1d9d5b47814730cb9f80554b6fd623" compoundref="_c_s_v_config_manager_8cpp" startline="93" endline="137">importPointsWithAlarmsFromCSV</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1a643e56244bc2075621641e05e754c9af" compoundref="_c_s_v_config_manager_8cpp" startline="279" endline="295">loadCSVFromFile</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1a513e5f48c740fe3575b55bef003fbbb0" compoundref="_c_s_v_config_manager_8cpp" startline="256" endline="277">saveCSVToFile</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1a4dca23384ad64615e2893ded0c66567c" compoundref="_c_s_v_config_manager_8cpp" startline="224" endline="252">validatePointsCSV</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_c_s_v_config_manager_1aeb5348105aeb04d73c45526f70d745f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CSVConfigManager::CSVConfigManager</definition>
        <argsstring>(TemperatureController &amp;controller)</argsstring>
        <name>CSVConfigManager</name>
        <qualifiedname>CSVConfigManager::CSVConfigManager</qualifiedname>
        <param>
          <type><ref refid="class_temperature_controller" kindref="compound">TemperatureController</ref> &amp;</type>
          <declname>controller</declname>
        </param>
        <briefdescription>
<para>Constructor for CSV configuration manager. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">controller</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the temperature controller</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Initializes CSV manager with temperature controller integration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="35" column="5" bodyfile="src/CSVConfigManager.cpp" bodystart="24" bodyend="26"/>
        <references refid="class_c_s_v_config_manager_1af52a38cd84e7551a980d3153adea88bd" compoundref="_c_s_v_config_manager_8h" startline="104">_controller</references>
        <references refid="class_c_s_v_config_manager_1a21fb0525c0a6d337f3cc8ddacaa928eb" compoundref="_c_s_v_config_manager_8h" startline="105">_lastError</references>
        <references refid="main_8cpp_1aecbe6ad38ed7d220ace280ea33d8ab45">controller</references>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a1c6cbc4c8a132762bf16a8ce9f7d0bfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CSVConfigManager::exportPointsWithAlarmsToCSV</definition>
        <argsstring>()</argsstring>
        <name>exportPointsWithAlarmsToCSV</name>
        <qualifiedname>CSVConfigManager::exportPointsWithAlarmsToCSV</qualifiedname>
        <briefdescription>
<para>Export measurement points with alarm configuration to CSV. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String CSV formatted string containing all measurement points and alarms</para>
</simplesect>
Generates comprehensive CSV export including point names, sensor configs, and alarm settings </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="43" column="12" bodyfile="src/CSVConfigManager.cpp" bodystart="28" bodyend="55"/>
        <references refid="class_c_s_v_config_manager_1af52a38cd84e7551a980d3153adea88bd" compoundref="_c_s_v_config_manager_8h" startline="104">_controller</references>
        <references refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">_exportPointToCSV</references>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1aef1d9d5b47814730cb9f80554b6fd623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CSVConfigManager::importPointsWithAlarmsFromCSV</definition>
        <argsstring>(const String &amp;csvData)</argsstring>
        <name>importPointsWithAlarmsFromCSV</name>
        <qualifiedname>CSVConfigManager::importPointsWithAlarmsFromCSV</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>csvData</declname>
        </param>
        <briefdescription>
<para>Import measurement points and alarms from CSV data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">csvData</parametername>
</parameternamelist>
<parameterdescription>
<para>CSV formatted string containing configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if import successful, false if validation or parsing failed</para>
</simplesect>
Parses CSV data and applies configuration to measurement points and alarms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="51" column="10" bodyfile="src/CSVConfigManager.cpp" bodystart="93" bodyend="137"/>
        <references refid="class_c_s_v_config_manager_1af52a38cd84e7551a980d3153adea88bd" compoundref="_c_s_v_config_manager_8h" startline="104">_controller</references>
        <references refid="class_c_s_v_config_manager_1a21fb0525c0a6d337f3cc8ddacaa928eb" compoundref="_c_s_v_config_manager_8h" startline="105">_lastError</references>
        <references refid="class_c_s_v_config_manager_1ac91e29ab2468661df752e4e4b2f7186c" compoundref="_c_s_v_config_manager_8cpp" startline="309" endline="386">_parseCSVLine</references>
        <references refid="class_c_s_v_config_manager_1a4dca23384ad64615e2893ded0c66567c" compoundref="_c_s_v_config_manager_8cpp" startline="224" endline="252">validatePointsCSV</references>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1adfad868e17345181ef3239c1c0c28693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CSVConfigManager::exportSensorsToCSV</definition>
        <argsstring>()</argsstring>
        <name>exportSensorsToCSV</name>
        <qualifiedname>CSVConfigManager::exportSensorsToCSV</qualifiedname>
        <briefdescription>
<para>Export only sensor configuration to CSV. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String CSV formatted string containing sensor configuration</para>
</simplesect>
Exports sensor-specific settings without alarm configuration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="59" column="12" bodyfile="src/CSVConfigManager.cpp" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a8d65bb402dd0ba796b1ab7c939b95f5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CSVConfigManager::importSensorsFromCSV</definition>
        <argsstring>(const String &amp;csvData)</argsstring>
        <name>importSensorsFromCSV</name>
        <qualifiedname>CSVConfigManager::importSensorsFromCSV</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>csvData</declname>
        </param>
        <briefdescription>
<para>Import sensor configuration from CSV data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">csvData</parametername>
</parameternamelist>
<parameterdescription>
<para>CSV formatted string containing sensor configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if import successful</para>
</simplesect>
Parses and applies sensor configuration from CSV data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="67" column="10" bodyfile="src/CSVConfigManager.cpp" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a513e5f48c740fe3575b55bef003fbbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CSVConfigManager::saveCSVToFile</definition>
        <argsstring>(const String &amp;filename, const String &amp;csvData)</argsstring>
        <name>saveCSVToFile</name>
        <qualifiedname>CSVConfigManager::saveCSVToFile</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>csvData</declname>
        </param>
        <briefdescription>
<para>Save CSV data to file system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of file to save (will be stored in LittleFS) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">csvData</parametername>
</parameternamelist>
<parameterdescription>
<para>CSV data to write to file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if file save successful</para>
</simplesect>
Writes CSV data to LittleFS file system with error handling </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="77" column="10" bodyfile="src/CSVConfigManager.cpp" bodystart="256" bodyend="277"/>
        <references refid="class_c_s_v_config_manager_1a21fb0525c0a6d337f3cc8ddacaa928eb" compoundref="_c_s_v_config_manager_8h" startline="105">_lastError</references>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a643e56244bc2075621641e05e754c9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CSVConfigManager::loadCSVFromFile</definition>
        <argsstring>(const String &amp;filename)</argsstring>
        <name>loadCSVFromFile</name>
        <qualifiedname>CSVConfigManager::loadCSVFromFile</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Load CSV data from file system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of file to load from LittleFS </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String CSV data from file, empty string if load failed</para>
</simplesect>
Reads CSV data from LittleFS with error handling </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="85" column="12" bodyfile="src/CSVConfigManager.cpp" bodystart="279" bodyend="295"/>
        <references refid="class_c_s_v_config_manager_1a21fb0525c0a6d337f3cc8ddacaa928eb" compoundref="_c_s_v_config_manager_8h" startline="105">_lastError</references>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a4dca23384ad64615e2893ded0c66567c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CSVConfigManager::validatePointsCSV</definition>
        <argsstring>(const String &amp;csvData)</argsstring>
        <name>validatePointsCSV</name>
        <qualifiedname>CSVConfigManager::validatePointsCSV</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>csvData</declname>
        </param>
        <briefdescription>
<para>Validate CSV data format and content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">csvData</parametername>
</parameternamelist>
<parameterdescription>
<para>CSV data to validate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if CSV data is valid and can be imported</para>
</simplesect>
Performs comprehensive validation of CSV structure, data types, and ranges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="94" column="10" bodyfile="src/CSVConfigManager.cpp" bodystart="224" bodyend="252"/>
        <references refid="class_c_s_v_config_manager_1a21fb0525c0a6d337f3cc8ddacaa928eb" compoundref="_c_s_v_config_manager_8h" startline="105">_lastError</references>
        <referencedby refid="class_c_s_v_config_manager_1aef1d9d5b47814730cb9f80554b6fd623" compoundref="_c_s_v_config_manager_8cpp" startline="93" endline="137">importPointsWithAlarmsFromCSV</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1abf641fecbd2d9ae68c4a762908b37bfb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>String</type>
        <definition>String CSVConfigManager::getLastError</definition>
        <argsstring>() const</argsstring>
        <name>getLastError</name>
        <qualifiedname>CSVConfigManager::getLastError</qualifiedname>
        <briefdescription>
<para>Get the last error message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String Description of the last error that occurred</para>
</simplesect>
Provides detailed error information for debugging import/export issues </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="101" column="12" bodyfile="include/CSVConfigManager.h" bodystart="101" bodyend="101"/>
        <references refid="class_c_s_v_config_manager_1a21fb0525c0a6d337f3cc8ddacaa928eb" compoundref="_c_s_v_config_manager_8h" startline="105">_lastError</references>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_c_s_v_config_manager_1a7cbb73926f858ab8982287b94797ec7a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CSVConfigManager::_escapeCSVField</definition>
        <argsstring>(const String &amp;field)</argsstring>
        <name>_escapeCSVField</name>
        <qualifiedname>CSVConfigManager::_escapeCSVField</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Escape special characters in CSV field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">field</parametername>
</parameternamelist>
<parameterdescription>
<para>String field to escape </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String Properly escaped CSV field</para>
</simplesect>
Handles quotes, commas, and newlines in CSV fields </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="114" column="12" bodyfile="src/CSVConfigManager.cpp" bodystart="163" bodyend="177"/>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">_exportPointToCSV</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1afc97b7e6d93109a6002fdf35737f8056" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CSVConfigManager::_unescapeCSVField</definition>
        <argsstring>(const String &amp;field)</argsstring>
        <name>_unescapeCSVField</name>
        <qualifiedname>CSVConfigManager::_unescapeCSVField</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Unescape CSV field back to original string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">field</parametername>
</parameternamelist>
<parameterdescription>
<para>Escaped CSV field </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String Original unescaped string</para>
</simplesect>
Reverses CSV field escaping </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="122" column="12" bodyfile="src/CSVConfigManager.cpp" bodystart="179" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a7ecf23e1c03fa194bcf3afe52408d378" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CSVConfigManager::_parseAlarmFromCSV</definition>
        <argsstring>(int pointAddress, const String &amp;alarmType, const String &amp;priority, const String &amp;enabled, const String &amp;hysteresis)</argsstring>
        <name>_parseAlarmFromCSV</name>
        <qualifiedname>CSVConfigManager::_parseAlarmFromCSV</qualifiedname>
        <param>
          <type>int</type>
          <declname>pointAddress</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>alarmType</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>enabled</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>hysteresis</declname>
        </param>
        <briefdescription>
<para>Parse alarm configuration from CSV fields. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pointAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alarmType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> type as string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> priority as string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enabled</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> enabled state as string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hysteresis</parametername>
</parameternamelist>
<parameterdescription>
<para>Hysteresis value as string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if alarm parsing successful</para>
</simplesect>
Converts CSV string fields to alarm configuration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="134" column="10" bodyfile="src/CSVConfigManager.cpp" bodystart="140" bodyend="161"/>
        <references refid="class_c_s_v_config_manager_1af52a38cd84e7551a980d3153adea88bd" compoundref="_c_s_v_config_manager_8h" startline="104">_controller</references>
        <references refid="class_c_s_v_config_manager_1aafeae1c990b637d6bfc59cb22d822620" compoundref="_c_s_v_config_manager_8cpp" startline="198" endline="204">_parseAlarmType</references>
        <references refid="class_c_s_v_config_manager_1a99faac6c424979e035a85cb77515e092" compoundref="_c_s_v_config_manager_8cpp" startline="216" endline="222">_parsePriority</references>
        <references refid="class_alarm_1acb8f203b2e2317c1f835bb4b19123f3f" compoundref="_alarm_8cpp" startline="459" endline="468">Alarm::setEnabled</references>
        <references refid="class_alarm_1a8d031874090c0c0e548a1f2e41ea4979" compoundref="_alarm_8cpp" startline="445" endline="457">Alarm::setHysteresis</references>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a69d938dbf9943440743733ffd70986af" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CSVConfigManager::_getAlarmTypeString</definition>
        <argsstring>(AlarmType type)</argsstring>
        <name>_getAlarmTypeString</name>
        <qualifiedname>CSVConfigManager::_getAlarmTypeString</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Convert alarm type enum to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref> enum value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String Human-readable alarm type string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="144" column="12" bodyfile="src/CSVConfigManager.cpp" bodystart="188" bodyend="196"/>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2ab4fed37e8cab6ef5684a361be786d8de" compoundref="_alarm_8h" startline="37">SENSOR_DISCONNECTED</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1aafeae1c990b637d6bfc59cb22d822620" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref></type>
        <definition>AlarmType CSVConfigManager::_parseAlarmType</definition>
        <argsstring>(const String &amp;typeStr)</argsstring>
        <name>_parseAlarmType</name>
        <qualifiedname>CSVConfigManager::_parseAlarmType</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>typeStr</declname>
        </param>
        <briefdescription>
<para>Parse alarm type string to enum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">typeStr</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> type as string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref> Corresponding enum value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="151" column="15" bodyfile="src/CSVConfigManager.cpp" bodystart="198" bodyend="204"/>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2ab4fed37e8cab6ef5684a361be786d8de" compoundref="_alarm_8h" startline="37">SENSOR_DISCONNECTED</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <referencedby refid="class_c_s_v_config_manager_1a7ecf23e1c03fa194bcf3afe52408d378" compoundref="_c_s_v_config_manager_8cpp" startline="140" endline="161">_parseAlarmFromCSV</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a42f3d6d3fe90a50339e53c550cbdcc4a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CSVConfigManager::_getPriorityString</definition>
        <argsstring>(AlarmPriority priority)</argsstring>
        <name>_getPriorityString</name>
        <qualifiedname>CSVConfigManager::_getPriorityString</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Convert alarm priority enum to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref> enum value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String Human-readable priority string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="158" column="12" bodyfile="src/CSVConfigManager.cpp" bodystart="206" bodyend="214"/>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" compoundref="_alarm_8h" startline="61">PRIORITY_CRITICAL</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" compoundref="_alarm_8h" startline="58">PRIORITY_LOW</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <referencedby refid="class_c_s_v_config_manager_1aa43c8405582f387b0330cc1e965f5117" compoundref="_c_s_v_config_manager_8cpp" startline="389" endline="398">_getAlarmPriorityForPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a99faac6c424979e035a85cb77515e092" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
        <definition>AlarmPriority CSVConfigManager::_parsePriority</definition>
        <argsstring>(const String &amp;priorityStr)</argsstring>
        <name>_parsePriority</name>
        <qualifiedname>CSVConfigManager::_parsePriority</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>priorityStr</declname>
        </param>
        <briefdescription>
<para>Parse priority string to enum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priorityStr</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority as string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref> Corresponding enum value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="165" column="19" bodyfile="src/CSVConfigManager.cpp" bodystart="216" bodyend="222"/>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" compoundref="_alarm_8h" startline="61">PRIORITY_CRITICAL</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" compoundref="_alarm_8h" startline="58">PRIORITY_LOW</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <referencedby refid="class_c_s_v_config_manager_1a7ecf23e1c03fa194bcf3afe52408d378" compoundref="_c_s_v_config_manager_8cpp" startline="140" endline="161">_parseAlarmFromCSV</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1ac91e29ab2468661df752e4e4b2f7186c" compoundref="_c_s_v_config_manager_8cpp" startline="309" endline="386">_parseCSVLine</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CSVConfigManager::_exportPointToCSV</definition>
        <argsstring>(String &amp;csv, MeasurementPoint *point, const String &amp;pointType)</argsstring>
        <name>_exportPointToCSV</name>
        <qualifiedname>CSVConfigManager::_exportPointToCSV</qualifiedname>
        <param>
          <type>String &amp;</type>
          <declname>csv</declname>
        </param>
        <param>
          <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>pointType</declname>
        </param>
        <briefdescription>
<para>Export single measurement point to CSV format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">csv</parametername>
</parameternamelist>
<parameterdescription>
<para>CSV string to append to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">point</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point to export </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of measurement point (DS18B20, PT1000, etc.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Appends measurement point configuration to CSV string </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="174" column="10" bodyfile="src/CSVConfigManager.cpp" bodystart="57" bodyend="90"/>
        <references refid="class_c_s_v_config_manager_1af52a38cd84e7551a980d3153adea88bd" compoundref="_c_s_v_config_manager_8h" startline="104">_controller</references>
        <references refid="class_c_s_v_config_manager_1a7cbb73926f858ab8982287b94797ec7a" compoundref="_c_s_v_config_manager_8cpp" startline="163" endline="177">_escapeCSVField</references>
        <references refid="class_c_s_v_config_manager_1aa43c8405582f387b0330cc1e965f5117" compoundref="_c_s_v_config_manager_8cpp" startline="389" endline="398">_getAlarmPriorityForPoint</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" compoundref="_measurement_point_8cpp" startline="45" endline="47">MeasurementPoint::getAddress</references>
        <references refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">MeasurementPoint::getBoundSensor</references>
        <references refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" compoundref="_measurement_point_8cpp" startline="53" endline="55">MeasurementPoint::getCurrentTemp</references>
        <references refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" compoundref="_sensor_8cpp" startline="213" endline="221">Sensor::getDS18B20RomString</references>
        <references refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" compoundref="_measurement_point_8cpp" startline="69" endline="71">MeasurementPoint::getHighAlarmThreshold</references>
        <references refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" compoundref="_measurement_point_8cpp" startline="65" endline="67">MeasurementPoint::getLowAlarmThreshold</references>
        <references refid="class_measurement_point_1a8677e00e0be369d7874f4982990dc56d" compoundref="_measurement_point_8cpp" startline="61" endline="63">MeasurementPoint::getMaxTemp</references>
        <references refid="class_measurement_point_1adc31f012462c1623617d5f362bcb2c59" compoundref="_measurement_point_8cpp" startline="57" endline="59">MeasurementPoint::getMinTemp</references>
        <references refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">MeasurementPoint::getName</references>
        <references refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" compoundref="_sensor_8cpp" startline="171" endline="171">Sensor::getType</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2ab4fed37e8cab6ef5684a361be786d8de" compoundref="_alarm_8h" startline="37">SENSOR_DISCONNECTED</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <referencedby refid="class_c_s_v_config_manager_1a1c6cbc4c8a132762bf16a8ce9f7d0bfc" compoundref="_c_s_v_config_manager_8cpp" startline="28" endline="55">exportPointsWithAlarmsToCSV</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1ac91e29ab2468661df752e4e4b2f7186c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CSVConfigManager::_parseCSVLine</definition>
        <argsstring>(const String &amp;line)</argsstring>
        <name>_parseCSVLine</name>
        <qualifiedname>CSVConfigManager::_parseCSVLine</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Parse single CSV line. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>CSV line to parse </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if line parsing successful</para>
</simplesect>
Parses individual CSV line and applies configuration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="182" column="10" bodyfile="src/CSVConfigManager.cpp" bodystart="309" bodyend="386"/>
        <references refid="class_c_s_v_config_manager_1af52a38cd84e7551a980d3153adea88bd" compoundref="_c_s_v_config_manager_8h" startline="104">_controller</references>
        <references refid="class_c_s_v_config_manager_1a21fb0525c0a6d337f3cc8ddacaa928eb" compoundref="_c_s_v_config_manager_8h" startline="105">_lastError</references>
        <references refid="class_c_s_v_config_manager_1a99faac6c424979e035a85cb77515e092" compoundref="_c_s_v_config_manager_8cpp" startline="216" endline="222">_parsePriority</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2ab4fed37e8cab6ef5684a361be786d8de" compoundref="_alarm_8h" startline="37">SENSOR_DISCONNECTED</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <references refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" compoundref="_measurement_point_8cpp" startline="106" endline="116">MeasurementPoint::setHighAlarmThreshold</references>
        <references refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" compoundref="_measurement_point_8cpp" startline="92" endline="104">MeasurementPoint::setLowAlarmThreshold</references>
        <references refid="class_measurement_point_1ae3abe83ed3e7979a906c7d753ac9d22d" compoundref="_measurement_point_8cpp" startline="81" endline="90">MeasurementPoint::setName</references>
        <referencedby refid="class_c_s_v_config_manager_1aef1d9d5b47814730cb9f80554b6fd623" compoundref="_c_s_v_config_manager_8cpp" startline="93" endline="137">importPointsWithAlarmsFromCSV</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_s_v_config_manager_1aa43c8405582f387b0330cc1e965f5117" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String CSVConfigManager::_getAlarmPriorityForPoint</definition>
        <argsstring>(int pointAddress, AlarmType alarmType)</argsstring>
        <name>_getAlarmPriorityForPoint</name>
        <qualifiedname>CSVConfigManager::_getAlarmPriorityForPoint</qualifiedname>
        <param>
          <type>int</type>
          <declname>pointAddress</declname>
        </param>
        <param>
          <type><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref></type>
          <declname>alarmType</declname>
        </param>
        <briefdescription>
<para>Get alarm priority for specific point and alarm type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pointAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alarmType</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of alarm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String Priority level as string</para>
</simplesect>
Retrieves current alarm priority configuration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/CSVConfigManager.h" line="191" column="12" bodyfile="src/CSVConfigManager.cpp" bodystart="389" bodyend="398"/>
        <references refid="class_c_s_v_config_manager_1af52a38cd84e7551a980d3153adea88bd" compoundref="_c_s_v_config_manager_8h" startline="104">_controller</references>
        <references refid="class_c_s_v_config_manager_1a42f3d6d3fe90a50339e53c550cbdcc4a" compoundref="_c_s_v_config_manager_8cpp" startline="206" endline="214">_getPriorityString</references>
        <references refid="class_alarm_1ab12dd2af567dd87228d9404dcce5b0c0" compoundref="_alarm_8h" startline="274" endline="274">Alarm::getPointAddress</references>
        <references refid="class_alarm_1abe89e376d8cacb582717ad6a65526ee8" compoundref="_alarm_8h" startline="104" endline="104">Alarm::getPriority</references>
        <references refid="class_alarm_1acfac41af4628d83d3fdcc11c8fb55069" compoundref="_alarm_8h" startline="92" endline="92">Alarm::getType</references>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">_exportPointToCSV</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>CSV configuration manager for measurement points and alarms. </para>
    </briefdescription>
    <detaileddescription>
<para>Handles import/export of system configuration through CSV files, enabling bulk configuration management and backup/restore operations </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="7">
        <label>Alarm</label>
        <link refid="class_alarm"/>
        <childnode refid="4" relation="usage">
          <edgelabel>-_source</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>CSVConfigManager</label>
        <link refid="class_c_s_v_config_manager"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-_controller</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>IndicatorInterface</label>
        <link refid="class_indicator_interface"/>
        <childnode refid="3" relation="usage">
          <edgelabel>-_instance</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>MeasurementPoint</label>
        <link refid="class_measurement_point"/>
        <childnode refid="5" relation="usage">
          <edgelabel>-boundSensor</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>RegisterMap</label>
        <link refid="class_register_map"/>
      </node>
      <node id="5">
        <label>Sensor</label>
        <link refid="class_sensor"/>
      </node>
      <node id="2">
        <label>TemperatureController</label>
        <link refid="class_temperature_controller"/>
        <childnode refid="3" relation="usage">
          <edgelabel>-indicator</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>-dsPoints</edgelabel>
          <edgelabel>-ptPoints</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>-registerMap</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>-_currentDisplayedAlarm</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/CSVConfigManager.h" line="28" column="1" bodyfile="include/CSVConfigManager.h" bodystart="28" bodyend="192"/>
    <listofallmembers>
      <member refid="class_c_s_v_config_manager_1af52a38cd84e7551a980d3153adea88bd" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_controller</name></member>
      <member refid="class_c_s_v_config_manager_1a7cbb73926f858ab8982287b94797ec7a" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_escapeCSVField</name></member>
      <member refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_exportPointToCSV</name></member>
      <member refid="class_c_s_v_config_manager_1aa43c8405582f387b0330cc1e965f5117" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_getAlarmPriorityForPoint</name></member>
      <member refid="class_c_s_v_config_manager_1a69d938dbf9943440743733ffd70986af" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_getAlarmTypeString</name></member>
      <member refid="class_c_s_v_config_manager_1a42f3d6d3fe90a50339e53c550cbdcc4a" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_getPriorityString</name></member>
      <member refid="class_c_s_v_config_manager_1a21fb0525c0a6d337f3cc8ddacaa928eb" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_lastError</name></member>
      <member refid="class_c_s_v_config_manager_1a7ecf23e1c03fa194bcf3afe52408d378" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_parseAlarmFromCSV</name></member>
      <member refid="class_c_s_v_config_manager_1aafeae1c990b637d6bfc59cb22d822620" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_parseAlarmType</name></member>
      <member refid="class_c_s_v_config_manager_1ac91e29ab2468661df752e4e4b2f7186c" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_parseCSVLine</name></member>
      <member refid="class_c_s_v_config_manager_1a99faac6c424979e035a85cb77515e092" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_parsePriority</name></member>
      <member refid="class_c_s_v_config_manager_1afc97b7e6d93109a6002fdf35737f8056" prot="private" virt="non-virtual"><scope>CSVConfigManager</scope><name>_unescapeCSVField</name></member>
      <member refid="class_c_s_v_config_manager_1aeb5348105aeb04d73c45526f70d745f6" prot="public" virt="non-virtual"><scope>CSVConfigManager</scope><name>CSVConfigManager</name></member>
      <member refid="class_c_s_v_config_manager_1a1c6cbc4c8a132762bf16a8ce9f7d0bfc" prot="public" virt="non-virtual"><scope>CSVConfigManager</scope><name>exportPointsWithAlarmsToCSV</name></member>
      <member refid="class_c_s_v_config_manager_1adfad868e17345181ef3239c1c0c28693" prot="public" virt="non-virtual"><scope>CSVConfigManager</scope><name>exportSensorsToCSV</name></member>
      <member refid="class_c_s_v_config_manager_1abf641fecbd2d9ae68c4a762908b37bfb" prot="public" virt="non-virtual"><scope>CSVConfigManager</scope><name>getLastError</name></member>
      <member refid="class_c_s_v_config_manager_1aef1d9d5b47814730cb9f80554b6fd623" prot="public" virt="non-virtual"><scope>CSVConfigManager</scope><name>importPointsWithAlarmsFromCSV</name></member>
      <member refid="class_c_s_v_config_manager_1a8d65bb402dd0ba796b1ab7c939b95f5c" prot="public" virt="non-virtual"><scope>CSVConfigManager</scope><name>importSensorsFromCSV</name></member>
      <member refid="class_c_s_v_config_manager_1a643e56244bc2075621641e05e754c9af" prot="public" virt="non-virtual"><scope>CSVConfigManager</scope><name>loadCSVFromFile</name></member>
      <member refid="class_c_s_v_config_manager_1a513e5f48c740fe3575b55bef003fbbb0" prot="public" virt="non-virtual"><scope>CSVConfigManager</scope><name>saveCSVToFile</name></member>
      <member refid="class_c_s_v_config_manager_1a4dca23384ad64615e2893ded0c66567c" prot="public" virt="non-virtual"><scope>CSVConfigManager</scope><name>validatePointsCSV</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
