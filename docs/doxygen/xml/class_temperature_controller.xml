<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_temperature_controller" kind="class" language="C++" prot="public">
    <compoundname>TemperatureController</compoundname>
    <includes refid="_temperature_controller_8h" local="no">TemperatureController.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" prot="private" static="no" mutable="no">
        <type><ref refid="class_indicator_interface" kindref="compound">IndicatorInterface</ref> &amp;</type>
        <definition>IndicatorInterface&amp; TemperatureController::indicator</definition>
        <argsstring></argsstring>
        <name>indicator</name>
        <qualifiedname>TemperatureController::indicator</qualifiedname>
        <briefdescription>
<para>Reference to indicator interface for display/LED control. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="602" column="24" bodyfile="include/TemperatureController.h" bodystart="602" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" compoundref="_temperature_controller_8cpp" startline="1898" endline="1925">_checkButtonPress</referencedby>
        <referencedby refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" compoundref="_temperature_controller_8cpp" startline="1821" endline="1846">_displayNextAcknowledgedAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" compoundref="_temperature_controller_8cpp" startline="1796" endline="1819">_displayNextActiveAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a28e81945f5235e161e6c532b428d36d2" compoundref="_temperature_controller_8cpp" startline="713" endline="717">_showOKAndTurnOffOLED</referencedby>
        <referencedby refid="class_temperature_controller_1a4d36576f7d6ab8f5222a082878314912" compoundref="_temperature_controller_8cpp" startline="702" endline="711">_updateNormalDisplay</referencedby>
        <referencedby refid="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" compoundref="_temperature_controller_8cpp" startline="81" endline="144">begin</referencedby>
        <referencedby refid="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" compoundref="_temperature_controller_8cpp" startline="1746" endline="1758">handleAlarmDisplay</referencedby>
        <referencedby refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" compoundref="_temperature_controller_8cpp" startline="483" endline="611">handleAlarmOutputs</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a294885ee4b12079b9135f2eb884b5284" prot="private" static="no" mutable="no">
        <type>OneWire *</type>
        <definition>OneWire* TemperatureController::oneWireBuses[4]</definition>
        <argsstring>[4]</argsstring>
        <name>oneWireBuses</name>
        <qualifiedname>TemperatureController::oneWireBuses</qualifiedname>
        <briefdescription>
<para>Array of OneWire bus objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="603" column="13" bodyfile="include/TemperatureController.h" bodystart="603" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
        <referencedby refid="class_temperature_controller_1aef5bd09c962b81966e67329afcff193d" compoundref="_temperature_controller_8cpp" startline="61" endline="79">~TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" prot="private" static="no" mutable="no">
        <type>DallasTemperature *</type>
        <definition>DallasTemperature* TemperatureController::dallasSensors[4]</definition>
        <argsstring>[4]</argsstring>
        <name>dallasSensors</name>
        <qualifiedname>TemperatureController::dallasSensors</qualifiedname>
        <briefdescription>
<para>Array of Dallas temperature sensor objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="604" column="23" bodyfile="include/TemperatureController.h" bodystart="604" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" compoundref="_temperature_controller_8cpp" startline="977" endline="1049">discoverDS18B20Sensors</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
        <referencedby refid="class_temperature_controller_1aef5bd09c962b81966e67329afcff193d" compoundref="_temperature_controller_8cpp" startline="61" endline="79">~TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" prot="private" static="no" mutable="no">
        <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref></type>
        <definition>MeasurementPoint TemperatureController::dsPoints[50]</definition>
        <argsstring>[50]</argsstring>
        <name>dsPoints</name>
        <qualifiedname>TemperatureController::dsPoints</qualifiedname>
        <briefdescription>
<para>Array of DS18B20 measurement points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="607" column="22" bodyfile="include/TemperatureController.h" bodystart="607" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1aabd7eb98840e80fc7d07eb04a926a7b1" compoundref="_temperature_controller_8cpp" startline="963" endline="968">applyConfigFromRegisterMap</referencedby>
        <referencedby refid="class_temperature_controller_1a43b97d23bcdea11dc4073bcd412a5334" compoundref="_temperature_controller_8cpp" startline="970" endline="975">applyConfigToRegisterMap</referencedby>
        <referencedby refid="class_temperature_controller_1a08489239b3da4d3f243b98e201f84240" compoundref="_temperature_controller_8cpp" startline="785" endline="787">getDS18B20Point</referencedby>
        <referencedby refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1162" endline="1221">getPointsJson</referencedby>
        <referencedby refid="class_temperature_controller_1a58f7a683f6e4c08dbfdfc43c1e740f15" compoundref="_temperature_controller_8cpp" startline="1104" endline="1160">getSensorsJson</referencedby>
        <referencedby refid="class_temperature_controller_1a11948a87fe7df37543b86ecdd488b341" compoundref="_temperature_controller_8cpp" startline="949" endline="954">readAllPoints</referencedby>
        <referencedby refid="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" compoundref="_temperature_controller_8cpp" startline="810" endline="826">removeSensorByRom</referencedby>
        <referencedby refid="class_temperature_controller_1a1ecad2d878922493c93fe9baa9be10d3" compoundref="_temperature_controller_8cpp" startline="1242" endline="1248">resetMinMaxValues</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
        <referencedby refid="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" compoundref="_temperature_controller_8cpp" startline="1356" endline="1382">unbindSensorFromPointBySensor</referencedby>
        <referencedby refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" compoundref="_temperature_controller_8cpp" startline="179" endline="232">updateAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1a62b93899a3b8b55e2e0bd933520c2892" compoundref="_temperature_controller_8cpp" startline="956" endline="961">updateRegisterMap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" prot="private" static="no" mutable="no">
        <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref></type>
        <definition>MeasurementPoint TemperatureController::ptPoints[10]</definition>
        <argsstring>[10]</argsstring>
        <name>ptPoints</name>
        <qualifiedname>TemperatureController::ptPoints</qualifiedname>
        <briefdescription>
<para>Array of PT1000 measurement points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="608" column="22" bodyfile="include/TemperatureController.h" bodystart="608" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1aabd7eb98840e80fc7d07eb04a926a7b1" compoundref="_temperature_controller_8cpp" startline="963" endline="968">applyConfigFromRegisterMap</referencedby>
        <referencedby refid="class_temperature_controller_1a43b97d23bcdea11dc4073bcd412a5334" compoundref="_temperature_controller_8cpp" startline="970" endline="975">applyConfigToRegisterMap</referencedby>
        <referencedby refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1162" endline="1221">getPointsJson</referencedby>
        <referencedby refid="class_temperature_controller_1a65c97fc6555937166fc8d12d09d47966" compoundref="_temperature_controller_8cpp" startline="789" endline="791">getPT1000Point</referencedby>
        <referencedby refid="class_temperature_controller_1a58f7a683f6e4c08dbfdfc43c1e740f15" compoundref="_temperature_controller_8cpp" startline="1104" endline="1160">getSensorsJson</referencedby>
        <referencedby refid="class_temperature_controller_1a11948a87fe7df37543b86ecdd488b341" compoundref="_temperature_controller_8cpp" startline="949" endline="954">readAllPoints</referencedby>
        <referencedby refid="class_temperature_controller_1a1ecad2d878922493c93fe9baa9be10d3" compoundref="_temperature_controller_8cpp" startline="1242" endline="1248">resetMinMaxValues</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
        <referencedby refid="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" compoundref="_temperature_controller_8cpp" startline="1356" endline="1382">unbindSensorFromPointBySensor</referencedby>
        <referencedby refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" compoundref="_temperature_controller_8cpp" startline="179" endline="232">updateAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1a62b93899a3b8b55e2e0bd933520c2892" compoundref="_temperature_controller_8cpp" startline="956" endline="961">updateRegisterMap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_sensor" kindref="compound">Sensor</ref> * &gt;</type>
        <definition>std::vector&lt;Sensor*&gt; TemperatureController::sensors</definition>
        <argsstring></argsstring>
        <name>sensors</name>
        <qualifiedname>TemperatureController::sensors</qualifiedname>
        <briefdescription>
<para>Vector of all discovered sensors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="609" column="17" bodyfile="include/TemperatureController.h" bodystart="609" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1aafd155cdb06d2f411d3640df99815246" compoundref="_temperature_controller_8cpp" startline="793" endline="808">addSensor</referencedby>
        <referencedby refid="class_temperature_controller_1af4ab2c7b7a3934ab7837603a420b1ae2" compoundref="_temperature_controller_8cpp" startline="1509" endline="1539">bindSensorToPointByBusNumber</referencedby>
        <referencedby refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" compoundref="_temperature_controller_8cpp" startline="977" endline="1049">discoverDS18B20Sensors</referencedby>
        <referencedby refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" compoundref="_temperature_controller_8cpp" startline="1052" endline="1101">discoverPTSensors</referencedby>
        <referencedby refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" compoundref="_temperature_controller_8cpp" startline="838" endline="844">findSensorByChipSelect</referencedby>
        <referencedby refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" compoundref="_temperature_controller_8cpp" startline="828" endline="836">findSensorByRom</referencedby>
        <referencedby refid="class_temperature_controller_1a9ac5f76def1895a8c8f8f92ce8cd2e5c" compoundref="_temperature_controller_8cpp" startline="1286" endline="1294">getDS18B20Count</referencedby>
        <referencedby refid="class_temperature_controller_1a6ab2ecc10c283d75d948ce6f1ad723a6" compoundref="_temperature_controller_8cpp" startline="1296" endline="1304">getPT1000Count</referencedby>
        <referencedby refid="class_temperature_controller_1a6ba00434153159c1589cbdd0129229d4" compoundref="_temperature_controller_8cpp" startline="846" endline="848">getSensorByIndex</referencedby>
        <referencedby refid="class_temperature_controller_1a0b3475ae1531237b04fb6719055a70de" compoundref="_temperature_controller_8h" startline="127" endline="127">getSensorCount</referencedby>
        <referencedby refid="class_temperature_controller_1a58f7a683f6e4c08dbfdfc43c1e740f15" compoundref="_temperature_controller_8cpp" startline="1104" endline="1160">getSensorsJson</referencedby>
        <referencedby refid="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" compoundref="_temperature_controller_8cpp" startline="810" endline="826">removeSensorByRom</referencedby>
        <referencedby refid="class_temperature_controller_1a23dca296a268baa9b8234c8bf9cf0c3e" compoundref="_temperature_controller_8cpp" startline="1306" endline="1330">updateAllSensors</referencedby>
        <referencedby refid="class_temperature_controller_1aef5bd09c962b81966e67329afcff193d" compoundref="_temperature_controller_8cpp" startline="61" endline="79">~TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" prot="private" static="no" mutable="no">
        <type><ref refid="class_register_map" kindref="compound">RegisterMap</ref></type>
        <definition>RegisterMap TemperatureController::registerMap</definition>
        <argsstring></argsstring>
        <name>registerMap</name>
        <qualifiedname>TemperatureController::registerMap</qualifiedname>
        <briefdescription>
<para>Modbus register map for communication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="612" column="17" bodyfile="include/TemperatureController.h" bodystart="612" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1aafd155cdb06d2f411d3640df99815246" compoundref="_temperature_controller_8cpp" startline="793" endline="808">addSensor</referencedby>
        <referencedby refid="class_temperature_controller_1aabd7eb98840e80fc7d07eb04a926a7b1" compoundref="_temperature_controller_8cpp" startline="963" endline="968">applyConfigFromRegisterMap</referencedby>
        <referencedby refid="class_temperature_controller_1a43b97d23bcdea11dc4073bcd412a5334" compoundref="_temperature_controller_8cpp" startline="970" endline="975">applyConfigToRegisterMap</referencedby>
        <referencedby refid="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" compoundref="_temperature_controller_8cpp" startline="81" endline="144">begin</referencedby>
        <referencedby refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" compoundref="_temperature_controller_8cpp" startline="977" endline="1049">discoverDS18B20Sensors</referencedby>
        <referencedby refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" compoundref="_temperature_controller_8cpp" startline="1052" endline="1101">discoverPTSensors</referencedby>
        <referencedby refid="class_temperature_controller_1a80552172d64d7536490e5f6320c10941" compoundref="_temperature_controller_8h" startline="260" endline="260">getRegisterMap</referencedby>
        <referencedby refid="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" compoundref="_temperature_controller_8cpp" startline="1223" endline="1240">getSystemStatusJson</referencedby>
        <referencedby refid="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" compoundref="_temperature_controller_8cpp" startline="810" endline="826">removeSensorByRom</referencedby>
        <referencedby refid="class_temperature_controller_1a5a9f98c140498fee9a3dba8f8af1cb49" compoundref="_temperature_controller_8cpp" startline="1250" endline="1256">setDeviceId</referencedby>
        <referencedby refid="class_temperature_controller_1a42c32522acc809f03f33d8d98414e793" compoundref="_temperature_controller_8cpp" startline="1260" endline="1263">setFirmwareVersion</referencedby>
        <referencedby refid="class_temperature_controller_1a62b93899a3b8b55e2e0bd933520c2892" compoundref="_temperature_controller_8cpp" startline="956" endline="961">updateRegisterMap</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t TemperatureController::measurementPeriodSeconds</definition>
        <argsstring></argsstring>
        <name>measurementPeriodSeconds</name>
        <qualifiedname>TemperatureController::measurementPeriodSeconds</qualifiedname>
        <briefdescription>
<para>Time between measurements in seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="613" column="14" bodyfile="include/TemperatureController.h" bodystart="613" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a7465ffc80f89d566d53e97e4192a511f" compoundref="_temperature_controller_8cpp" startline="1278" endline="1280">getMeasurementPeriod</referencedby>
        <referencedby refid="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" compoundref="_temperature_controller_8cpp" startline="1223" endline="1240">getSystemStatusJson</referencedby>
        <referencedby refid="class_temperature_controller_1a08f5d97d74f6364588cf22dadd9a746e" compoundref="_temperature_controller_8cpp" startline="1267" endline="1276">setMeasurementPeriod</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t TemperatureController::deviceId</definition>
        <argsstring></argsstring>
        <name>deviceId</name>
        <qualifiedname>TemperatureController::deviceId</qualifiedname>
        <briefdescription>
<para>Unique device identifier. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="614" column="14" bodyfile="include/TemperatureController.h" bodystart="614" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" compoundref="_temperature_controller_8cpp" startline="81" endline="144">begin</referencedby>
        <referencedby refid="class_temperature_controller_1a3cd823f5e8f7eb810c4a2a212c5ee571" compoundref="_temperature_controller_8cpp" startline="1258" endline="1258">getDeviceId</referencedby>
        <referencedby refid="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" compoundref="_temperature_controller_8cpp" startline="1223" endline="1240">getSystemStatusJson</referencedby>
        <referencedby refid="class_temperature_controller_1a5a9f98c140498fee9a3dba8f8af1cb49" compoundref="_temperature_controller_8cpp" startline="1250" endline="1256">setDeviceId</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" prot="private" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t TemperatureController::firmwareVersion</definition>
        <argsstring></argsstring>
        <name>firmwareVersion</name>
        <qualifiedname>TemperatureController::firmwareVersion</qualifiedname>
        <briefdescription>
<para>Firmware version number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="615" column="14" bodyfile="include/TemperatureController.h" bodystart="615" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" compoundref="_temperature_controller_8cpp" startline="81" endline="144">begin</referencedby>
        <referencedby refid="class_temperature_controller_1a88ff416e5562313759bd3a11112e252c" compoundref="_temperature_controller_8cpp" startline="1265" endline="1265">getFirmwareVersion</referencedby>
        <referencedby refid="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" compoundref="_temperature_controller_8cpp" startline="1223" endline="1240">getSystemStatusJson</referencedby>
        <referencedby refid="class_temperature_controller_1a42c32522acc809f03f33d8d98414e793" compoundref="_temperature_controller_8cpp" startline="1260" endline="1263">setFirmwareVersion</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a3ff7f1160c2963542fad31e191dea524" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::lastMeasurementTime</definition>
        <argsstring></argsstring>
        <name>lastMeasurementTime</name>
        <qualifiedname>TemperatureController::lastMeasurementTime</qualifiedname>
        <briefdescription>
<para>Timestamp of last measurement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="616" column="19" bodyfile="include/TemperatureController.h" bodystart="616" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a0156a803f4fdaffbe59e3842647a608f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::systemInitialized</definition>
        <argsstring></argsstring>
        <name>systemInitialized</name>
        <qualifiedname>TemperatureController::systemInitialized</qualifiedname>
        <briefdescription>
<para>System initialization flag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="617" column="10" bodyfile="include/TemperatureController.h" bodystart="617" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" compoundref="_temperature_controller_8cpp" startline="81" endline="144">begin</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t TemperatureController::oneWireBusPin[4]</definition>
        <argsstring>[4]</argsstring>
        <name>oneWireBusPin</name>
        <qualifiedname>TemperatureController::oneWireBusPin</qualifiedname>
        <briefdescription>
<para>GPIO pins for OneWire buses. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="618" column="13" bodyfile="include/TemperatureController.h" bodystart="618" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" compoundref="_temperature_controller_8cpp" startline="977" endline="1049">discoverDS18B20Sensors</referencedby>
        <referencedby refid="class_temperature_controller_1aa4746563f439c7a0647d7932acd9ab04" compoundref="_temperature_controller_8cpp" startline="1332" endline="1334">getOneWirePin</referencedby>
        <referencedby refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" compoundref="_temperature_controller_8cpp" startline="1336" endline="1352">getSensorBus</referencedby>
        <referencedby refid="class_temperature_controller_1af8bbcc01e36ebbabd6f9913280fc217f" compoundref="_temperature_controller_8cpp" startline="1282" endline="1284">setOneWireBusPin</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t TemperatureController::chipSelectPin[4]</definition>
        <argsstring>[4]</argsstring>
        <name>chipSelectPin</name>
        <qualifiedname>TemperatureController::chipSelectPin</qualifiedname>
        <briefdescription>
<para>Chip select pins for PT1000 sensors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="619" column="13" bodyfile="include/TemperatureController.h" bodystart="619" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" compoundref="_temperature_controller_8cpp" startline="1052" endline="1101">discoverPTSensors</referencedby>
        <referencedby refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" compoundref="_temperature_controller_8cpp" startline="1336" endline="1352">getSensorBus</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_alarm" kindref="compound">Alarm</ref> * &gt;</type>
        <definition>std::vector&lt;Alarm*&gt; TemperatureController::_configuredAlarms</definition>
        <argsstring></argsstring>
        <name>_configuredAlarms</name>
        <qualifiedname>TemperatureController::_configuredAlarms</qualifiedname>
        <briefdescription>
<para>Vector of configured alarm objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="622" column="17" bodyfile="include/TemperatureController.h" bodystart="622" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a4e75dbef3c1ce99afd4ec8e71102e836" compoundref="_temperature_controller_8cpp" startline="262" endline="272">_hasAlarmForPoint</referencedby>
        <referencedby refid="class_temperature_controller_1ae1ac307e5332c85a007b38a484b8a1c7" compoundref="_temperature_controller_8cpp" startline="318" endline="324">acknowledgeAllAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" compoundref="_temperature_controller_8cpp" startline="1386" endline="1442">addAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" compoundref="_temperature_controller_8cpp" startline="1583" endline="1628">applyAcknowledgedDelaysToAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1aa547daf7d44ea3214e0a2977f7f72cc6" compoundref="_temperature_controller_8cpp" startline="352" endline="361">clearConfiguredAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1ac5f5cdf881ddf8a0d3c4d8460db0ce1e" compoundref="_temperature_controller_8cpp" startline="337" endline="350">clearResolvedAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" compoundref="_temperature_controller_8cpp" startline="275" endline="297">createAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1ad174e0411bd48422d8e3812fd28a7a0b" compoundref="_temperature_controller_8cpp" startline="363" endline="400">ensureAlarmsForPoint</referencedby>
        <referencedby refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" compoundref="_temperature_controller_8cpp" startline="1469" endline="1476">findAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1af58201023d15de003d4f1b9a9771a9e3" compoundref="_temperature_controller_8cpp" startline="327" endline="335">getActiveAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1a0bd06377ae255b55a39e1fe3a44be4a9" compoundref="_temperature_controller_8cpp" startline="1478" endline="1480">getAlarmByIndex</referencedby>
        <referencedby refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" compoundref="_temperature_controller_8h" startline="471" endline="471">getAlarmCount</referencedby>
        <referencedby refid="class_temperature_controller_1a654b817ff784d9a57d594ee18881f8ac" compoundref="_temperature_controller_8cpp" startline="1672" endline="1684">getAlarmCount</referencedby>
        <referencedby refid="class_temperature_controller_1a7c12e116a7b79d1a103223a3caeb5cc7" compoundref="_temperature_controller_8cpp" startline="1652" endline="1660">getAlarmCount</referencedby>
        <referencedby refid="class_temperature_controller_1af969846ad52d5698fd7b12428a8ea0a6" compoundref="_temperature_controller_8cpp" startline="1662" endline="1670">getAlarmCount</referencedby>
        <referencedby refid="class_temperature_controller_1a880028883101197527de57f626e14512" compoundref="_temperature_controller_8cpp" startline="402" endline="415">getAlarmsForPoint</referencedby>
        <referencedby refid="class_temperature_controller_1a77429353a869859ddea4f5b92ede2f52" compoundref="_temperature_controller_8cpp" startline="719" endline="749">getAlarmsJson</referencedby>
        <referencedby refid="class_temperature_controller_1a30507c056721b411284326837ccdee0b" compoundref="_temperature_controller_8h" startline="477" endline="477">getConfiguredAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1abb3d16c1efa5754a2e64b5dc5dd4f4cc" compoundref="_temperature_controller_8cpp" startline="300" endline="307">getHighestPriorityAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1ac39c426da2e1f9dff4abe1d9b550b723" compoundref="_temperature_controller_8cpp" startline="1444" endline="1457">removeAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" compoundref="_temperature_controller_8cpp" startline="179" endline="232">updateAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1aef5bd09c962b81966e67329afcff193d" compoundref="_temperature_controller_8cpp" startline="61" endline="79">~TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1ac0cd8ac0fd76c008b3af737f12467e32" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_lastAlarmCheck</definition>
        <argsstring></argsstring>
        <name>_lastAlarmCheck</name>
        <qualifiedname>TemperatureController::_lastAlarmCheck</qualifiedname>
        <briefdescription>
<para>Timestamp of last alarm check. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="623" column="19" bodyfile="include/TemperatureController.h" bodystart="623" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
        <referencedby refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" compoundref="_temperature_controller_8cpp" startline="179" endline="232">updateAlarms</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a719eec89a0099b13656f3125c9e8c69f" prot="private" static="no" mutable="no">
        <type>const unsigned long</type>
        <definition>const unsigned long TemperatureController::_alarmCheckInterval</definition>
        <argsstring></argsstring>
        <name>_alarmCheckInterval</name>
        <qualifiedname>TemperatureController::_alarmCheckInterval</qualifiedname>
        <initializer>= 1000</initializer>
        <briefdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> check interval in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="624" column="25" bodyfile="include/TemperatureController.h" bodystart="624" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" compoundref="_temperature_controller_8cpp" startline="179" endline="232">updateAlarms</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a6ffb5c63a3108e25e3224b77e0a661dc" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::_lastButtonState</definition>
        <argsstring></argsstring>
        <name>_lastButtonState</name>
        <qualifiedname>TemperatureController::_lastButtonState</qualifiedname>
        <briefdescription>
<para>Previous button state for edge detection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="625" column="10" bodyfile="include/TemperatureController.h" bodystart="625" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" compoundref="_temperature_controller_8cpp" startline="1898" endline="1925">_checkButtonPress</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a669c6e7452f2bbd21b16b97b0de228cc" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_lastButtonPressTime</definition>
        <argsstring></argsstring>
        <name>_lastButtonPressTime</name>
        <qualifiedname>TemperatureController::_lastButtonPressTime</qualifiedname>
        <briefdescription>
<para>Timestamp of last button press. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="626" column="19" bodyfile="include/TemperatureController.h" bodystart="626" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a3a9321a93beb0b9e3769ae303097103c" prot="private" static="no" mutable="no">
        <type>const unsigned long</type>
        <definition>const unsigned long TemperatureController::_buttonDebounceDelay</definition>
        <argsstring></argsstring>
        <name>_buttonDebounceDelay</name>
        <qualifiedname>TemperatureController::_buttonDebounceDelay</qualifiedname>
        <initializer>= 200</initializer>
        <briefdescription>
<para>Button debounce delay in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="627" column="25" bodyfile="include/TemperatureController.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" prot="private" static="no" mutable="no">
        <type><ref refid="class_alarm" kindref="compound">Alarm</ref> *</type>
        <definition>Alarm* TemperatureController::_currentDisplayedAlarm</definition>
        <argsstring></argsstring>
        <name>_currentDisplayedAlarm</name>
        <qualifiedname>TemperatureController::_currentDisplayedAlarm</qualifiedname>
        <briefdescription>
<para>Currently displayed alarm on OLED. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="630" column="11" bodyfile="include/TemperatureController.h" bodystart="630" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" compoundref="_temperature_controller_8cpp" startline="1898" endline="1925">_checkButtonPress</referencedby>
        <referencedby refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" compoundref="_temperature_controller_8cpp" startline="1821" endline="1846">_displayNextAcknowledgedAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" compoundref="_temperature_controller_8cpp" startline="1796" endline="1819">_displayNextActiveAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1aa547daf7d44ea3214e0a2977f7f72cc6" compoundref="_temperature_controller_8cpp" startline="352" endline="361">clearConfiguredAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1ac5f5cdf881ddf8a0d3c4d8460db0ce1e" compoundref="_temperature_controller_8cpp" startline="337" endline="350">clearResolvedAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a473053bec0dba7d493499df05cd53fa8" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_okDisplayStartTime</definition>
        <argsstring></argsstring>
        <name>_okDisplayStartTime</name>
        <qualifiedname>TemperatureController::_okDisplayStartTime</qualifiedname>
        <briefdescription>
<para>Timestamp when OK display started. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="631" column="19" bodyfile="include/TemperatureController.h" bodystart="631" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a28e81945f5235e161e6c532b428d36d2" compoundref="_temperature_controller_8cpp" startline="713" endline="717">_showOKAndTurnOffOLED</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::_showingOK</definition>
        <argsstring></argsstring>
        <name>_showingOK</name>
        <qualifiedname>TemperatureController::_showingOK</qualifiedname>
        <briefdescription>
<para>Flag indicating OK status display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="632" column="10" bodyfile="include/TemperatureController.h" bodystart="632" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" compoundref="_temperature_controller_8cpp" startline="1821" endline="1846">_displayNextAcknowledgedAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" compoundref="_temperature_controller_8cpp" startline="1796" endline="1819">_displayNextActiveAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a28e81945f5235e161e6c532b428d36d2" compoundref="_temperature_controller_8cpp" startline="713" endline="717">_showOKAndTurnOffOLED</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_acknowledgedDelayCritical</definition>
        <argsstring></argsstring>
        <name>_acknowledgedDelayCritical</name>
        <qualifiedname>TemperatureController::_acknowledgedDelayCritical</qualifiedname>
        <briefdescription>
<para>Acknowledge delay for critical alarms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="679" column="19" bodyfile="include/TemperatureController.h" bodystart="679" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" compoundref="_temperature_controller_8cpp" startline="1386" endline="1442">addAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" compoundref="_temperature_controller_8cpp" startline="1583" endline="1628">applyAcknowledgedDelaysToAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1a565a282c8a8330005545d92686ae8a01" compoundref="_temperature_controller_8cpp" startline="1566" endline="1568">getAcknowledgedDelayCritical</referencedby>
        <referencedby refid="class_temperature_controller_1a1cf2a33257d4f089a304859b975663c3" compoundref="_temperature_controller_8cpp" startline="1545" endline="1548">setAcknowledgedDelayCritical</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_acknowledgedDelayHigh</definition>
        <argsstring></argsstring>
        <name>_acknowledgedDelayHigh</name>
        <qualifiedname>TemperatureController::_acknowledgedDelayHigh</qualifiedname>
        <briefdescription>
<para>Acknowledge delay for high priority alarms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="680" column="19" bodyfile="include/TemperatureController.h" bodystart="680" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" compoundref="_temperature_controller_8cpp" startline="1386" endline="1442">addAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" compoundref="_temperature_controller_8cpp" startline="1583" endline="1628">applyAcknowledgedDelaysToAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1a90a8e6caf82ff5bdd1077b444c0c08d1" compoundref="_temperature_controller_8cpp" startline="1570" endline="1572">getAcknowledgedDelayHigh</referencedby>
        <referencedby refid="class_temperature_controller_1a365ac98348ce12de8938a687744c9f6c" compoundref="_temperature_controller_8cpp" startline="1550" endline="1553">setAcknowledgedDelayHigh</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_acknowledgedDelayMedium</definition>
        <argsstring></argsstring>
        <name>_acknowledgedDelayMedium</name>
        <qualifiedname>TemperatureController::_acknowledgedDelayMedium</qualifiedname>
        <briefdescription>
<para>Acknowledge delay for medium priority alarms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="681" column="19" bodyfile="include/TemperatureController.h" bodystart="681" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" compoundref="_temperature_controller_8cpp" startline="1386" endline="1442">addAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" compoundref="_temperature_controller_8cpp" startline="1583" endline="1628">applyAcknowledgedDelaysToAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1a9e1bfe23a47e8323e6fd50e1cf6ceafc" compoundref="_temperature_controller_8cpp" startline="1574" endline="1576">getAcknowledgedDelayMedium</referencedby>
        <referencedby refid="class_temperature_controller_1a148e97ba76cb6bf3d3f45ddefe715320" compoundref="_temperature_controller_8cpp" startline="1555" endline="1558">setAcknowledgedDelayMedium</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_acknowledgedDelayLow</definition>
        <argsstring></argsstring>
        <name>_acknowledgedDelayLow</name>
        <qualifiedname>TemperatureController::_acknowledgedDelayLow</qualifiedname>
        <briefdescription>
<para>Acknowledge delay for low priority alarms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="682" column="19" bodyfile="include/TemperatureController.h" bodystart="682" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" compoundref="_temperature_controller_8cpp" startline="1386" endline="1442">addAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" compoundref="_temperature_controller_8cpp" startline="1583" endline="1628">applyAcknowledgedDelaysToAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1a81aeb69dc3a9e3bda9f06dcdcc567626" compoundref="_temperature_controller_8cpp" startline="1578" endline="1580">getAcknowledgedDelayLow</referencedby>
        <referencedby refid="class_temperature_controller_1a87eeba5b5182d712bd9c361f37b933a8" compoundref="_temperature_controller_8cpp" startline="1560" endline="1563">setAcknowledgedDelayLow</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1ac2b7ce0afccac7602505ab0bd3916562" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::_relay1State</definition>
        <argsstring></argsstring>
        <name>_relay1State</name>
        <qualifiedname>TemperatureController::_relay1State</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Current state of relay 1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="684" column="10" bodyfile="include/TemperatureController.h" bodystart="684" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" compoundref="_temperature_controller_8cpp" startline="483" endline="611">handleAlarmOutputs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a3af25b4c386c13c4e1c49f50d67c705b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::_relay2State</definition>
        <argsstring></argsstring>
        <name>_relay2State</name>
        <qualifiedname>TemperatureController::_relay2State</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Current state of relay 2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="685" column="10" bodyfile="include/TemperatureController.h" bodystart="685" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" compoundref="_temperature_controller_8cpp" startline="483" endline="611">handleAlarmOutputs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a01c4086be4fa74e89b108428ac3756ea" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::_redLedState</definition>
        <argsstring></argsstring>
        <name>_redLedState</name>
        <qualifiedname>TemperatureController::_redLedState</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Current state of red LED. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="686" column="10" bodyfile="include/TemperatureController.h" bodystart="686" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" compoundref="_temperature_controller_8cpp" startline="483" endline="611">handleAlarmOutputs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1ada44ea25043f4cc35dd01cad67979acf" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::_yellowLedState</definition>
        <argsstring></argsstring>
        <name>_yellowLedState</name>
        <qualifiedname>TemperatureController::_yellowLedState</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Current state of yellow LED. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="687" column="10" bodyfile="include/TemperatureController.h" bodystart="687" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" compoundref="_temperature_controller_8cpp" startline="483" endline="611">handleAlarmOutputs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1aec910974cd40cafef22d5e5c5e730512" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::_blueLedState</definition>
        <argsstring></argsstring>
        <name>_blueLedState</name>
        <qualifiedname>TemperatureController::_blueLedState</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Current state of blue LED. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="688" column="10" bodyfile="include/TemperatureController.h" bodystart="688" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" compoundref="_temperature_controller_8cpp" startline="483" endline="611">handleAlarmOutputs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1af5585a9f09291fc31296ac04c5de98ae" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::_lowPriorityBlinkState</definition>
        <argsstring></argsstring>
        <name>_lowPriorityBlinkState</name>
        <qualifiedname>TemperatureController::_lowPriorityBlinkState</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
<para>Current blink state for low priority alarms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="709" column="10" bodyfile="include/TemperatureController.h" bodystart="709" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1accf8eda6bd6ed08b84ee839fbb13cc31" compoundref="_temperature_controller_8cpp" startline="1726" endline="1743">_handleLowPriorityBlinking</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a75d981931fe5a8e5e8cc112ec0b1e08a" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_lastLowPriorityBlinkTime</definition>
        <argsstring></argsstring>
        <name>_lastLowPriorityBlinkTime</name>
        <qualifiedname>TemperatureController::_lastLowPriorityBlinkTime</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
<para>Last blink state change timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="710" column="19" bodyfile="include/TemperatureController.h" bodystart="710" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1accf8eda6bd6ed08b84ee839fbb13cc31" compoundref="_temperature_controller_8cpp" startline="1726" endline="1743">_handleLowPriorityBlinking</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a61fc398934c455ec97bc25d6f3c59868" prot="private" static="no" mutable="no">
        <type>const unsigned long</type>
        <definition>const unsigned long TemperatureController::_blinkOnTime</definition>
        <argsstring></argsstring>
        <name>_blinkOnTime</name>
        <qualifiedname>TemperatureController::_blinkOnTime</qualifiedname>
        <initializer>= 2000</initializer>
        <briefdescription>
<para>Blink on duration (2 seconds) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="711" column="25" bodyfile="include/TemperatureController.h" bodystart="711" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1accf8eda6bd6ed08b84ee839fbb13cc31" compoundref="_temperature_controller_8cpp" startline="1726" endline="1743">_handleLowPriorityBlinking</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1aa0d8e0b6828ce6bdfee5b4a9464673e1" prot="private" static="no" mutable="no">
        <type>const unsigned long</type>
        <definition>const unsigned long TemperatureController::_blinkOffTime</definition>
        <argsstring></argsstring>
        <name>_blinkOffTime</name>
        <qualifiedname>TemperatureController::_blinkOffTime</qualifiedname>
        <initializer>= 30000</initializer>
        <briefdescription>
<para>Blink off duration (30 seconds) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="712" column="25" bodyfile="include/TemperatureController.h" bodystart="712" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1accf8eda6bd6ed08b84ee839fbb13cc31" compoundref="_temperature_controller_8cpp" startline="1726" endline="1743">_handleLowPriorityBlinking</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_alarm" kindref="compound">Alarm</ref> * &gt;</type>
        <definition>std::vector&lt;Alarm*&gt; TemperatureController::_activeAlarmsQueue</definition>
        <argsstring></argsstring>
        <name>_activeAlarmsQueue</name>
        <qualifiedname>TemperatureController::_activeAlarmsQueue</qualifiedname>
        <briefdescription>
<para>Queue of active alarms for display rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="720" column="17" bodyfile="include/TemperatureController.h" bodystart="720" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" compoundref="_temperature_controller_8cpp" startline="1898" endline="1925">_checkButtonPress</referencedby>
        <referencedby refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" compoundref="_temperature_controller_8cpp" startline="1796" endline="1819">_displayNextActiveAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a477597992aa9362076843f37b648741a" compoundref="_temperature_controller_8cpp" startline="1760" endline="1795">_updateAlarmQueues</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_alarm" kindref="compound">Alarm</ref> * &gt;</type>
        <definition>std::vector&lt;Alarm*&gt; TemperatureController::_acknowledgedAlarmsQueue</definition>
        <argsstring></argsstring>
        <name>_acknowledgedAlarmsQueue</name>
        <qualifiedname>TemperatureController::_acknowledgedAlarmsQueue</qualifiedname>
        <briefdescription>
<para>Queue of acknowledged alarms for display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="721" column="17" bodyfile="include/TemperatureController.h" bodystart="721" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" compoundref="_temperature_controller_8cpp" startline="1821" endline="1846">_displayNextAcknowledgedAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a477597992aa9362076843f37b648741a" compoundref="_temperature_controller_8cpp" startline="1760" endline="1795">_updateAlarmQueues</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int TemperatureController::_currentActiveAlarmIndex</definition>
        <argsstring></argsstring>
        <name>_currentActiveAlarmIndex</name>
        <qualifiedname>TemperatureController::_currentActiveAlarmIndex</qualifiedname>
        <briefdescription>
<para>Current index in active alarms queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="722" column="9" bodyfile="include/TemperatureController.h" bodystart="722" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" compoundref="_temperature_controller_8cpp" startline="1898" endline="1925">_checkButtonPress</referencedby>
        <referencedby refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" compoundref="_temperature_controller_8cpp" startline="1796" endline="1819">_displayNextActiveAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int TemperatureController::_currentAcknowledgedAlarmIndex</definition>
        <argsstring></argsstring>
        <name>_currentAcknowledgedAlarmIndex</name>
        <qualifiedname>TemperatureController::_currentAcknowledgedAlarmIndex</qualifiedname>
        <briefdescription>
<para>Current index in acknowledged alarms queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="723" column="9" bodyfile="include/TemperatureController.h" bodystart="723" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" compoundref="_temperature_controller_8cpp" startline="1821" endline="1846">_displayNextAcknowledgedAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_lastAlarmDisplayTime</definition>
        <argsstring></argsstring>
        <name>_lastAlarmDisplayTime</name>
        <qualifiedname>TemperatureController::_lastAlarmDisplayTime</qualifiedname>
        <briefdescription>
<para>Last alarm display update timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="724" column="19" bodyfile="include/TemperatureController.h" bodystart="724" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" compoundref="_temperature_controller_8cpp" startline="1898" endline="1925">_checkButtonPress</referencedby>
        <referencedby refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" compoundref="_temperature_controller_8cpp" startline="1821" endline="1846">_displayNextAcknowledgedAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1ada41526711cb0489adb0714b9ebe5072" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::_acknowledgedAlarmDisplayDelay</definition>
        <argsstring></argsstring>
        <name>_acknowledgedAlarmDisplayDelay</name>
        <qualifiedname>TemperatureController::_acknowledgedAlarmDisplayDelay</qualifiedname>
        <briefdescription>
<para>Delay before showing acknowledged alarms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="725" column="19" bodyfile="include/TemperatureController.h" bodystart="725" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_temperature_controller_1aa881d2bbb58b22ac952aa781d997ee01" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TemperatureController::_displayingActiveAlarm</definition>
        <argsstring></argsstring>
        <name>_displayingActiveAlarm</name>
        <qualifiedname>TemperatureController::_displayingActiveAlarm</qualifiedname>
        <briefdescription>
<para>Flag indicating if displaying active alarm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="726" column="10" bodyfile="include/TemperatureController.h" bodystart="726" bodyend="-1"/>
        <referencedby refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" compoundref="_temperature_controller_8cpp" startline="1898" endline="1925">_checkButtonPress</referencedby>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
        <referencedby refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" compoundref="_temperature_controller_8cpp" startline="24" endline="59">TemperatureController</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TemperatureController::TemperatureController</definition>
        <argsstring>(uint8_t oneWirePin[4], uint8_t csPin[4], IndicatorInterface &amp;indicator)</argsstring>
        <name>TemperatureController</name>
        <qualifiedname>TemperatureController::TemperatureController</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>oneWirePin</declname>
          <array>[4]</array>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>csPin</declname>
          <array>[4]</array>
        </param>
        <param>
          <type><ref refid="class_indicator_interface" kindref="compound">IndicatorInterface</ref> &amp;</type>
          <declname>indicator</declname>
        </param>
        <briefdescription>
<para>Construct a new Temperature Controller object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">oneWirePin</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of 4 OneWire bus pins for DS18B20 sensors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">csPin</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of 4 chip select pins for PT1000 sensors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indicator</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the indicator interface for display/LED control </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="54" column="5" bodyfile="src/TemperatureController.cpp" bodystart="24" bodyend="59"/>
        <references refid="class_temperature_controller_1ada41526711cb0489adb0714b9ebe5072" compoundref="_temperature_controller_8h" startline="725">_acknowledgedAlarmDisplayDelay</references>
        <references refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" compoundref="_temperature_controller_8h" startline="723">_currentAcknowledgedAlarmIndex</references>
        <references refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" compoundref="_temperature_controller_8h" startline="722">_currentActiveAlarmIndex</references>
        <references refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" compoundref="_temperature_controller_8h" startline="630">_currentDisplayedAlarm</references>
        <references refid="class_temperature_controller_1aa881d2bbb58b22ac952aa781d997ee01" compoundref="_temperature_controller_8h" startline="726">_displayingActiveAlarm</references>
        <references refid="class_temperature_controller_1ac0cd8ac0fd76c008b3af737f12467e32" compoundref="_temperature_controller_8h" startline="623">_lastAlarmCheck</references>
        <references refid="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" compoundref="_temperature_controller_8h" startline="724">_lastAlarmDisplayTime</references>
        <references refid="class_temperature_controller_1a669c6e7452f2bbd21b16b97b0de228cc" compoundref="_temperature_controller_8h" startline="626">_lastButtonPressTime</references>
        <references refid="class_temperature_controller_1a6ffb5c63a3108e25e3224b77e0a661dc" compoundref="_temperature_controller_8h" startline="625">_lastButtonState</references>
        <references refid="class_temperature_controller_1a473053bec0dba7d493499df05cd53fa8" compoundref="_temperature_controller_8h" startline="631">_okDisplayStartTime</references>
        <references refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" compoundref="_temperature_controller_8h" startline="632">_showingOK</references>
        <references refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" compoundref="_temperature_controller_8h" startline="619">chipSelectPin</references>
        <references refid="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" compoundref="_temperature_controller_8h" startline="604">dallasSensors</references>
        <references refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" compoundref="_temperature_controller_8h" startline="614">deviceId</references>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" compoundref="_temperature_controller_8h" startline="615">firmwareVersion</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <references refid="class_temperature_controller_1a3ff7f1160c2963542fad31e191dea524" compoundref="_temperature_controller_8h" startline="616">lastMeasurementTime</references>
        <references refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" compoundref="_temperature_controller_8h" startline="613">measurementPeriodSeconds</references>
        <references refid="class_temperature_controller_1a294885ee4b12079b9135f2eb884b5284" compoundref="_temperature_controller_8h" startline="603">oneWireBuses</references>
        <references refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" compoundref="_temperature_controller_8h" startline="618">oneWireBusPin</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
        <references refid="class_temperature_controller_1a0156a803f4fdaffbe59e3842647a608f" compoundref="_temperature_controller_8h" startline="617">systemInitialized</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1aef5bd09c962b81966e67329afcff193d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TemperatureController::~TemperatureController</definition>
        <argsstring>()</argsstring>
        <name>~TemperatureController</name>
        <qualifiedname>TemperatureController::~TemperatureController</qualifiedname>
        <briefdescription>
<para>Destroy the Temperature Controller object. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up dynamically allocated sensors and OneWire buses </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="60" column="5" bodyfile="src/TemperatureController.cpp" bodystart="61" bodyend="79"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" compoundref="_temperature_controller_8h" startline="604">dallasSensors</references>
        <references refid="class_temperature_controller_1a294885ee4b12079b9135f2eb884b5284" compoundref="_temperature_controller_8h" startline="603">oneWireBuses</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>TemperatureController::begin</qualifiedname>
        <briefdescription>
<para>Initialize the temperature controller system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if initialization successful </para>
</simplesect>
<simplesect kind="return"><para>false if initialization failed</para>
</simplesect>
Initializes OneWire buses, discovers sensors, loads configuration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="68" column="10" bodyfile="src/TemperatureController.cpp" bodystart="81" bodyend="144"/>
        <references refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" compoundref="_temperature_controller_8h" startline="614">deviceId</references>
        <references refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" compoundref="_temperature_controller_8cpp" startline="1052" endline="1101">discoverPTSensors</references>
        <references refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" compoundref="_temperature_controller_8h" startline="615">firmwareVersion</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
        <references refid="class_temperature_controller_1a0156a803f4fdaffbe59e3842647a608f" compoundref="_temperature_controller_8h" startline="617">systemInitialized</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref> *</type>
        <definition>MeasurementPoint * TemperatureController::getMeasurementPoint</definition>
        <argsstring>(uint8_t address)</argsstring>
        <name>getMeasurementPoint</name>
        <qualifiedname>TemperatureController::getMeasurementPoint</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Get measurement point by address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Point address (0-49 for DS18B20, 50-59 for PT1000) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MeasurementPoint* Pointer to measurement point or nullptr if invalid address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="76" column="22" bodyfile="src/TemperatureController.cpp" bodystart="777" bodyend="783"/>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_temperature_controller_1ad322a5bab8d5788a586206004248f673" compoundref="_temperature_controller_8h" startline="640" endline="640">isDS18B20Address</references>
        <references refid="class_temperature_controller_1a13125ddcf29cb56d27403818543618af" compoundref="_temperature_controller_8h" startline="647" endline="647">isPT1000Address</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
        <referencedby refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" compoundref="_temperature_controller_8cpp" startline="1386" endline="1442">addAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1af4ab2c7b7a3934ab7837603a420b1ae2" compoundref="_temperature_controller_8cpp" startline="1509" endline="1539">bindSensorToPointByBusNumber</referencedby>
        <referencedby refid="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" compoundref="_temperature_controller_8cpp" startline="886" endline="919">bindSensorToPointByChipSelect</referencedby>
        <referencedby refid="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" compoundref="_temperature_controller_8cpp" startline="850" endline="884">bindSensorToPointByRom</referencedby>
        <referencedby refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" compoundref="_temperature_controller_8cpp" startline="944" endline="947">getBoundSensor</referencedby>
        <referencedby refid="class_temperature_controller_1a261c9b96540ec6680dfffd3a26e4ca00" compoundref="_temperature_controller_8cpp" startline="921" endline="942">unbindSensorFromPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a08489239b3da4d3f243b98e201f84240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref> *</type>
        <definition>MeasurementPoint * TemperatureController::getDS18B20Point</definition>
        <argsstring>(uint8_t idx)</argsstring>
        <name>getDS18B20Point</name>
        <qualifiedname>TemperatureController::getDS18B20Point</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get DS18B20 measurement point by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in DS18B20 array (0-49) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MeasurementPoint* Pointer to DS18B20 point or nullptr if invalid index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="83" column="22" bodyfile="src/TemperatureController.cpp" bodystart="785" bodyend="787"/>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a65c97fc6555937166fc8d12d09d47966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref> *</type>
        <definition>MeasurementPoint * TemperatureController::getPT1000Point</definition>
        <argsstring>(uint8_t idx)</argsstring>
        <name>getPT1000Point</name>
        <qualifiedname>TemperatureController::getPT1000Point</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get PT1000 measurement point by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index in PT1000 array (0-9) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MeasurementPoint* Pointer to PT1000 point or nullptr if invalid index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="90" column="22" bodyfile="src/TemperatureController.cpp" bodystart="789" bodyend="791"/>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1aafd155cdb06d2f411d3640df99815246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::addSensor</definition>
        <argsstring>(Sensor *sensor)</argsstring>
        <name>addSensor</name>
        <qualifiedname>TemperatureController::addSensor</qualifiedname>
        <param>
          <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
          <declname>sensor</declname>
        </param>
        <briefdescription>
<para>Add a sensor to the controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sensor object to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if sensor added successfully </para>
</simplesect>
<simplesect kind="return"><para>false if sensor already exists or nullptr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="99" column="10" bodyfile="src/TemperatureController.cpp" bodystart="793" bodyend="808"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" compoundref="_temperature_controller_8cpp" startline="838" endline="844">findSensorByChipSelect</references>
        <references refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" compoundref="_temperature_controller_8cpp" startline="828" endline="836">findSensorByRom</references>
        <references refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" compoundref="_sensor_8cpp" startline="213" endline="221">Sensor::getDS18B20RomString</references>
        <references refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" compoundref="_sensor_8cpp" startline="208" endline="211">Sensor::getPT1000ChipSelectPin</references>
        <references refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" compoundref="_sensor_8cpp" startline="171" endline="171">Sensor::getType</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::removeSensorByRom</definition>
        <argsstring>(const String &amp;romString)</argsstring>
        <name>removeSensorByRom</name>
        <qualifiedname>TemperatureController::removeSensorByRom</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>romString</declname>
        </param>
        <briefdescription>
<para>Remove sensor by ROM address string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">romString</parametername>
</parameternamelist>
<parameterdescription>
<para>ROM address as hex string (e.g., &quot;28FF123456789ABC&quot;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if sensor removed successfully </para>
</simplesect>
<simplesect kind="return"><para>false if sensor not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="107" column="10" bodyfile="src/TemperatureController.cpp" bodystart="810" bodyend="826"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" compoundref="_temperature_controller_8cpp" startline="944" endline="947">getBoundSensor</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
        <referencedby refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" compoundref="_temperature_controller_8cpp" startline="977" endline="1049">discoverDS18B20Sensors</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
        <definition>Sensor * TemperatureController::findSensorByRom</definition>
        <argsstring>(const String &amp;romString)</argsstring>
        <name>findSensorByRom</name>
        <qualifiedname>TemperatureController::findSensorByRom</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>romString</declname>
        </param>
        <briefdescription>
<para>Find sensor by ROM address string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">romString</parametername>
</parameternamelist>
<parameterdescription>
<para>ROM address as hex string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sensor* Pointer to sensor or nullptr if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="114" column="12" bodyfile="src/TemperatureController.cpp" bodystart="828" bodyend="836"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
        <referencedby refid="class_temperature_controller_1aafd155cdb06d2f411d3640df99815246" compoundref="_temperature_controller_8cpp" startline="793" endline="808">addSensor</referencedby>
        <referencedby refid="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" compoundref="_temperature_controller_8cpp" startline="850" endline="884">bindSensorToPointByRom</referencedby>
        <referencedby refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" compoundref="_temperature_controller_8cpp" startline="977" endline="1049">discoverDS18B20Sensors</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
        <definition>Sensor * TemperatureController::findSensorByChipSelect</definition>
        <argsstring>(uint8_t csPin)</argsstring>
        <name>findSensorByChipSelect</name>
        <qualifiedname>TemperatureController::findSensorByChipSelect</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>csPin</declname>
        </param>
        <briefdescription>
<para>Find PT1000 sensor by chip select pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">csPin</parametername>
</parameternamelist>
<parameterdescription>
<para>Chip select pin number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sensor* Pointer to sensor or nullptr if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="121" column="12" bodyfile="src/TemperatureController.cpp" bodystart="838" bodyend="844"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
        <referencedby refid="class_temperature_controller_1aafd155cdb06d2f411d3640df99815246" compoundref="_temperature_controller_8cpp" startline="793" endline="808">addSensor</referencedby>
        <referencedby refid="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" compoundref="_temperature_controller_8cpp" startline="886" endline="919">bindSensorToPointByChipSelect</referencedby>
        <referencedby refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" compoundref="_temperature_controller_8cpp" startline="1052" endline="1101">discoverPTSensors</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a0b3475ae1531237b04fb6719055a70de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int TemperatureController::getSensorCount</definition>
        <argsstring>() const</argsstring>
        <name>getSensorCount</name>
        <qualifiedname>TemperatureController::getSensorCount</qualifiedname>
        <briefdescription>
<para>Get total number of sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int Number of sensors registered </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="127" column="9" bodyfile="include/TemperatureController.h" bodystart="127" bodyend="127"/>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a6ba00434153159c1589cbdd0129229d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
        <definition>Sensor * TemperatureController::getSensorByIndex</definition>
        <argsstring>(int idx)</argsstring>
        <name>getSensorByIndex</name>
        <qualifiedname>TemperatureController::getSensorByIndex</qualifiedname>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get sensor by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_sensor" kindref="compound">Sensor</ref> index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sensor* Pointer to sensor or nullptr if invalid index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="134" column="12" bodyfile="src/TemperatureController.cpp" bodystart="846" bodyend="848"/>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::bindSensorToPointByRom</definition>
        <argsstring>(const String &amp;romString, uint8_t pointAddress)</argsstring>
        <name>bindSensorToPointByRom</name>
        <qualifiedname>TemperatureController::bindSensorToPointByRom</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>romString</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pointAddress</declname>
        </param>
        <briefdescription>
<para>Bind sensor to measurement point by ROM address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">romString</parametername>
</parameternamelist>
<parameterdescription>
<para>ROM address of sensor to bind </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if binding successful </para>
</simplesect>
<simplesect kind="return"><para>false if sensor or point not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="144" column="10" bodyfile="src/TemperatureController.cpp" bodystart="850" bodyend="884"/>
        <references refid="class_measurement_point_1a3c3af28d9aabc9e5b9e2e370eaa29ce0" compoundref="_measurement_point_8cpp" startline="118" endline="120">MeasurementPoint::bindSensor</references>
        <references refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" compoundref="_temperature_controller_8cpp" startline="828" endline="836">findSensorByRom</references>
        <references refid="class_temperature_controller_1a880028883101197527de57f626e14512" compoundref="_temperature_controller_8cpp" startline="402" endline="415">getAlarmsForPoint</references>
        <references refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</references>
        <references refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">MeasurementPoint::getName</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <references refid="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" compoundref="_temperature_controller_8cpp" startline="1356" endline="1382">unbindSensorFromPointBySensor</references>
        <references refid="class_logger_manager_1a0d52b0ff7bff22817e987ad753102854" compoundref="_logger_manager_8h" startline="155" endline="157">LoggerManager::warning</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::bindSensorToPointByChipSelect</definition>
        <argsstring>(uint8_t csPin, uint8_t pointAddress)</argsstring>
        <name>bindSensorToPointByChipSelect</name>
        <qualifiedname>TemperatureController::bindSensorToPointByChipSelect</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>csPin</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pointAddress</declname>
        </param>
        <briefdescription>
<para>Bind PT1000 sensor to measurement point by chip select pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">csPin</parametername>
</parameternamelist>
<parameterdescription>
<para>Chip select pin of PT1000 sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if binding successful </para>
</simplesect>
<simplesect kind="return"><para>false if sensor or point not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="153" column="10" bodyfile="src/TemperatureController.cpp" bodystart="886" bodyend="919"/>
        <references refid="class_measurement_point_1a3c3af28d9aabc9e5b9e2e370eaa29ce0" compoundref="_measurement_point_8cpp" startline="118" endline="120">MeasurementPoint::bindSensor</references>
        <references refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" compoundref="_temperature_controller_8cpp" startline="838" endline="844">findSensorByChipSelect</references>
        <references refid="class_temperature_controller_1a880028883101197527de57f626e14512" compoundref="_temperature_controller_8cpp" startline="402" endline="415">getAlarmsForPoint</references>
        <references refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</references>
        <references refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">MeasurementPoint::getName</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <references refid="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" compoundref="_temperature_controller_8cpp" startline="1356" endline="1382">unbindSensorFromPointBySensor</references>
        <references refid="class_logger_manager_1a0d52b0ff7bff22817e987ad753102854" compoundref="_logger_manager_8h" startline="155" endline="157">LoggerManager::warning</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a261c9b96540ec6680dfffd3a26e4ca00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::unbindSensorFromPoint</definition>
        <argsstring>(uint8_t pointAddress)</argsstring>
        <name>unbindSensorFromPoint</name>
        <qualifiedname>TemperatureController::unbindSensorFromPoint</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>pointAddress</declname>
        </param>
        <briefdescription>
<para>Unbind sensor from measurement point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pointAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point address to unbind </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if unbinding successful </para>
</simplesect>
<simplesect kind="return"><para>false if point not found or not bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="161" column="10" bodyfile="src/TemperatureController.cpp" bodystart="921" bodyend="942"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_logger_manager_1aef24f00186213fa78be3b104a50d58e6" compoundref="_logger_manager_8h" startline="165" endline="167">LoggerManager::error</references>
        <references refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">MeasurementPoint::getBoundSensor</references>
        <references refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" compoundref="_sensor_8cpp" startline="213" endline="221">Sensor::getDS18B20RomString</references>
        <references refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</references>
        <references refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">MeasurementPoint::getName</references>
        <references refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" compoundref="_sensor_8cpp" startline="208" endline="211">Sensor::getPT1000ChipSelectPin</references>
        <references refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" compoundref="_sensor_8cpp" startline="171" endline="171">Sensor::getType</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_measurement_point_1ab93923a15b7e55af89d1269b681fb856" compoundref="_measurement_point_8cpp" startline="122" endline="124">MeasurementPoint::unbindSensor</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
        <definition>Sensor * TemperatureController::getBoundSensor</definition>
        <argsstring>(uint8_t pointAddress)</argsstring>
        <name>getBoundSensor</name>
        <qualifiedname>TemperatureController::getBoundSensor</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>pointAddress</declname>
        </param>
        <briefdescription>
<para>Get sensor bound to measurement point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pointAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sensor* Pointer to bound sensor or nullptr if not bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="168" column="12" bodyfile="src/TemperatureController.cpp" bodystart="944" bodyend="947"/>
        <references refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">MeasurementPoint::getBoundSensor</references>
        <references refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</references>
        <referencedby refid="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" compoundref="_temperature_controller_8cpp" startline="810" endline="826">removeSensorByRom</referencedby>
        <referencedby refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" compoundref="_temperature_controller_8cpp" startline="179" endline="232">updateAlarms</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::unbindSensorFromPointBySensor</definition>
        <argsstring>(Sensor *sensor)</argsstring>
        <name>unbindSensorFromPointBySensor</name>
        <qualifiedname>TemperatureController::unbindSensorFromPointBySensor</qualifiedname>
        <param>
          <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
          <declname>sensor</declname>
        </param>
        <briefdescription>
<para>Unbind sensor from any measurement point it&apos;s bound to. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sensor to unbind </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if unbinding successful </para>
</simplesect>
<simplesect kind="return"><para>false if sensor not bound to any point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="176" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1356" bodyend="1382"/>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" compoundref="_sensor_8cpp" startline="173" endline="173">Sensor::getName</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
        <referencedby refid="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" compoundref="_temperature_controller_8cpp" startline="886" endline="919">bindSensorToPointByChipSelect</referencedby>
        <referencedby refid="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" compoundref="_temperature_controller_8cpp" startline="850" endline="884">bindSensorToPointByRom</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <qualifiedname>TemperatureController::update</qualifiedname>
        <briefdescription>
<para>Main update function - must be called in <ref refid="main_8cpp_1afe461d27b9c48d5921c00d521181f12f" kindref="member">loop()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Reads sensors, updates alarms, handles display and outputs <simplesect kind="note"><para>Call this regularly for proper system operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="184" column="10" bodyfile="src/TemperatureController.cpp" bodystart="146" bodyend="176"/>
        <references refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" compoundref="_temperature_controller_8cpp" startline="1898" endline="1925">_checkButtonPress</references>
        <references refid="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" compoundref="_temperature_controller_8cpp" startline="1746" endline="1758">handleAlarmDisplay</references>
        <references refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" compoundref="_temperature_controller_8cpp" startline="483" endline="611">handleAlarmOutputs</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <references refid="class_temperature_controller_1a3ff7f1160c2963542fad31e191dea524" compoundref="_temperature_controller_8h" startline="616">lastMeasurementTime</references>
        <references refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" compoundref="_temperature_controller_8h" startline="613">measurementPeriodSeconds</references>
        <references refid="class_temperature_controller_1a11948a87fe7df37543b86ecdd488b341" compoundref="_temperature_controller_8cpp" startline="949" endline="954">readAllPoints</references>
        <references refid="class_temperature_controller_1a0156a803f4fdaffbe59e3842647a608f" compoundref="_temperature_controller_8h" startline="617">systemInitialized</references>
        <references refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" compoundref="_temperature_controller_8cpp" startline="179" endline="232">updateAlarms</references>
        <references refid="class_temperature_controller_1a23dca296a268baa9b8234c8bf9cf0c3e" compoundref="_temperature_controller_8cpp" startline="1306" endline="1330">updateAllSensors</references>
        <references refid="class_temperature_controller_1a62b93899a3b8b55e2e0bd933520c2892" compoundref="_temperature_controller_8cpp" startline="956" endline="961">updateRegisterMap</references>
        <referencedby refid="class_temperature_controller_1a11948a87fe7df37543b86ecdd488b341" compoundref="_temperature_controller_8cpp" startline="949" endline="954">readAllPoints</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a11948a87fe7df37543b86ecdd488b341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::readAllPoints</definition>
        <argsstring>()</argsstring>
        <name>readAllPoints</name>
        <qualifiedname>TemperatureController::readAllPoints</qualifiedname>
        <briefdescription>
<para>Read temperature from all configured measurement points. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates temperature values for all points with bound sensors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="190" column="10" bodyfile="src/TemperatureController.cpp" bodystart="949" bodyend="954"/>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
        <references refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</references>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a62b93899a3b8b55e2e0bd933520c2892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::updateRegisterMap</definition>
        <argsstring>()</argsstring>
        <name>updateRegisterMap</name>
        <qualifiedname>TemperatureController::updateRegisterMap</qualifiedname>
        <briefdescription>
<para>Update register map with current values from measurement points. </para>
        </briefdescription>
        <detaileddescription>
<para>Synchronizes Modbus registers with current temperature data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="196" column="10" bodyfile="src/TemperatureController.cpp" bodystart="956" bodyend="961"/>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1aabd7eb98840e80fc7d07eb04a926a7b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::applyConfigFromRegisterMap</definition>
        <argsstring>()</argsstring>
        <name>applyConfigFromRegisterMap</name>
        <qualifiedname>TemperatureController::applyConfigFromRegisterMap</qualifiedname>
        <briefdescription>
<para>Apply configuration from register map to system. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates system settings from Modbus register values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="202" column="10" bodyfile="src/TemperatureController.cpp" bodystart="963" bodyend="968"/>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a43b97d23bcdea11dc4073bcd412a5334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::applyConfigToRegisterMap</definition>
        <argsstring>()</argsstring>
        <name>applyConfigToRegisterMap</name>
        <qualifiedname>TemperatureController::applyConfigToRegisterMap</qualifiedname>
        <briefdescription>
<para>Apply current system configuration to register map. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates Modbus registers with current system settings </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="208" column="10" bodyfile="src/TemperatureController.cpp" bodystart="970" bodyend="975"/>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::discoverDS18B20Sensors</definition>
        <argsstring>()</argsstring>
        <name>discoverDS18B20Sensors</name>
        <qualifiedname>TemperatureController::discoverDS18B20Sensors</qualifiedname>
        <briefdescription>
<para>Discover DS18B20 sensors on all OneWire buses. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if any sensors discovered </para>
</simplesect>
<simplesect kind="return"><para>false if no sensors found</para>
</simplesect>
Scans all 4 OneWire buses for DS18B20 sensors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="217" column="10" bodyfile="src/TemperatureController.cpp" bodystart="977" bodyend="1049"/>
        <references refid="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" compoundref="_temperature_controller_8h" startline="604">dallasSensors</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" compoundref="_temperature_controller_8cpp" startline="828" endline="836">findSensorByRom</references>
        <references refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" compoundref="_sensor_8cpp" startline="173" endline="173">Sensor::getName</references>
        <references refid="class_sensor_1ac42da3a37b0d6a9622344fe83f4c9047" compoundref="_sensor_8h" startline="236" endline="236">Sensor::getOneWirePin</references>
        <references refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" compoundref="_temperature_controller_8cpp" startline="1336" endline="1352">getSensorBus</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_sensor_1a59dd5483b75d9366a0c50ccdd0345dec" compoundref="_sensor_8cpp" startline="67" endline="116">Sensor::initialize</references>
        <references refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" compoundref="_temperature_controller_8h" startline="618">oneWireBusPin</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
        <references refid="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" compoundref="_temperature_controller_8cpp" startline="810" endline="826">removeSensorByRom</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
        <references refid="class_sensor_1afefa1f627a7d2ab5a1157c271e7f2556" compoundref="_sensor_8cpp" startline="57" endline="60">Sensor::setupDS18B20</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::discoverPTSensors</definition>
        <argsstring>()</argsstring>
        <name>discoverPTSensors</name>
        <qualifiedname>TemperatureController::discoverPTSensors</qualifiedname>
        <briefdescription>
<para>Discover PT1000 sensors on SPI bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if any sensors discovered </para>
</simplesect>
<simplesect kind="return"><para>false if no sensors found</para>
</simplesect>
Checks all 4 chip select pins for PT1000 sensors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="225" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1052" bodyend="1101"/>
        <references refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" compoundref="_temperature_controller_8h" startline="619">chipSelectPin</references>
        <references refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" compoundref="_temperature_controller_8cpp" startline="838" endline="844">findSensorByChipSelect</references>
        <references refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" compoundref="_sensor_8cpp" startline="173" endline="173">Sensor::getName</references>
        <references refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" compoundref="_sensor_8cpp" startline="208" endline="211">Sensor::getPT1000ChipSelectPin</references>
        <references refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" compoundref="_temperature_controller_8cpp" startline="1336" endline="1352">getSensorBus</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_sensor_1a59dd5483b75d9366a0c50ccdd0345dec" compoundref="_sensor_8cpp" startline="67" endline="116">Sensor::initialize</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
        <references refid="class_sensor_1aef73c8dc894e3695f50b4bece9601750" compoundref="_sensor_8cpp" startline="62" endline="65">Sensor::setupPT1000</references>
        <referencedby refid="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" compoundref="_temperature_controller_8cpp" startline="81" endline="144">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a58f7a683f6e4c08dbfdfc43c1e740f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String TemperatureController::getSensorsJson</definition>
        <argsstring>()</argsstring>
        <name>getSensorsJson</name>
        <qualifiedname>TemperatureController::getSensorsJson</qualifiedname>
        <briefdescription>
<para>Get JSON representation of all sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String JSON array of sensor objects</para>
</simplesect>
Includes sensor type, ROM/CS, binding status, and current value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="233" column="12" bodyfile="src/TemperatureController.cpp" bodystart="1104" bodyend="1160"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" compoundref="_sensor_8cpp" startline="213" endline="221">Sensor::getDS18B20RomString</references>
        <references refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" compoundref="_temperature_controller_8cpp" startline="1336" endline="1352">getSensorBus</references>
        <references refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" compoundref="_sensor_8cpp" startline="171" endline="171">Sensor::getType</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String TemperatureController::getPointsJson</definition>
        <argsstring>()</argsstring>
        <name>getPointsJson</name>
        <qualifiedname>TemperatureController::getPointsJson</qualifiedname>
        <briefdescription>
<para>Get JSON representation of all measurement points. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String JSON array of measurement point objects</para>
</simplesect>
Includes point address, name, value, limits, and alarm status </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="240" column="12" bodyfile="src/TemperatureController.cpp" bodystart="1162" bodyend="1221"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" compoundref="_measurement_point_8cpp" startline="45" endline="47">MeasurementPoint::getAddress</references>
        <references refid="class_measurement_point_1a1421d744f7982e528a579da02adb1919" compoundref="_measurement_point_8cpp" startline="73" endline="75">MeasurementPoint::getAlarmStatus</references>
        <references refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">MeasurementPoint::getBoundSensor</references>
        <references refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" compoundref="_measurement_point_8cpp" startline="53" endline="55">MeasurementPoint::getCurrentTemp</references>
        <references refid="class_sensor_1a3003106c642cc8a9ec5638ea06052ff4" compoundref="_sensor_8cpp" startline="223" endline="227">Sensor::getDS18B20RomArray</references>
        <references refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" compoundref="_sensor_8cpp" startline="213" endline="221">Sensor::getDS18B20RomString</references>
        <references refid="class_measurement_point_1a3fb0693931f12190a7f96e5d6be51b51" compoundref="_measurement_point_8cpp" startline="77" endline="79">MeasurementPoint::getErrorStatus</references>
        <references refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" compoundref="_measurement_point_8cpp" startline="69" endline="71">MeasurementPoint::getHighAlarmThreshold</references>
        <references refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" compoundref="_measurement_point_8cpp" startline="65" endline="67">MeasurementPoint::getLowAlarmThreshold</references>
        <references refid="class_measurement_point_1a8677e00e0be369d7874f4982990dc56d" compoundref="_measurement_point_8cpp" startline="61" endline="63">MeasurementPoint::getMaxTemp</references>
        <references refid="class_measurement_point_1adc31f012462c1623617d5f362bcb2c59" compoundref="_measurement_point_8cpp" startline="57" endline="59">MeasurementPoint::getMinTemp</references>
        <references refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">MeasurementPoint::getName</references>
        <references refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" compoundref="_sensor_8cpp" startline="208" endline="211">Sensor::getPT1000ChipSelectPin</references>
        <references refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" compoundref="_temperature_controller_8cpp" startline="1336" endline="1352">getSensorBus</references>
        <references refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" compoundref="_sensor_8cpp" startline="171" endline="171">Sensor::getType</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String TemperatureController::getSystemStatusJson</definition>
        <argsstring>()</argsstring>
        <name>getSystemStatusJson</name>
        <qualifiedname>TemperatureController::getSystemStatusJson</qualifiedname>
        <briefdescription>
<para>Get JSON representation of system status. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String JSON object with system information</para>
</simplesect>
Includes device ID, firmware version, sensor counts, alarm status </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="247" column="12" bodyfile="src/TemperatureController.cpp" bodystart="1223" bodyend="1240"/>
        <references refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" compoundref="_temperature_controller_8h" startline="614">deviceId</references>
        <references refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" compoundref="_temperature_controller_8h" startline="615">firmwareVersion</references>
        <references refid="class_temperature_controller_1a9ac5f76def1895a8c8f8f92ce8cd2e5c" compoundref="_temperature_controller_8cpp" startline="1286" endline="1294">getDS18B20Count</references>
        <references refid="class_temperature_controller_1a6ab2ecc10c283d75d948ce6f1ad723a6" compoundref="_temperature_controller_8cpp" startline="1296" endline="1304">getPT1000Count</references>
        <references refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" compoundref="_temperature_controller_8h" startline="613">measurementPeriodSeconds</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a1ecad2d878922493c93fe9baa9be10d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::resetMinMaxValues</definition>
        <argsstring>()</argsstring>
        <name>resetMinMaxValues</name>
        <qualifiedname>TemperatureController::resetMinMaxValues</qualifiedname>
        <briefdescription>
<para>Reset min/max values for all measurement points. </para>
        </briefdescription>
        <detaileddescription>
<para>Clears historical minimum and maximum temperature records </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="254" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1242" bodyend="1248"/>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a80552172d64d7536490e5f6320c10941" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_register_map" kindref="compound">RegisterMap</ref> &amp;</type>
        <definition>RegisterMap &amp; TemperatureController::getRegisterMap</definition>
        <argsstring>()</argsstring>
        <name>getRegisterMap</name>
        <qualifiedname>TemperatureController::getRegisterMap</qualifiedname>
        <briefdescription>
<para>Get reference to register map. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="class_register_map" kindref="compound">RegisterMap</ref>&amp; Reference to the Modbus register map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="260" column="17" bodyfile="include/TemperatureController.h" bodystart="260" bodyend="260"/>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a5a9f98c140498fee9a3dba8f8af1cb49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::setDeviceId</definition>
        <argsstring>(uint16_t id)</argsstring>
        <name>setDeviceId</name>
        <qualifiedname>TemperatureController::setDeviceId</qualifiedname>
        <param>
          <type>uint16_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Set device ID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Device identifier (0-65535) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="267" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1250" bodyend="1256"/>
        <references refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" compoundref="_temperature_controller_8h" startline="614">deviceId</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a3cd823f5e8f7eb810c4a2a212c5ee571" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t TemperatureController::getDeviceId</definition>
        <argsstring>() const</argsstring>
        <name>getDeviceId</name>
        <qualifiedname>TemperatureController::getDeviceId</qualifiedname>
        <briefdescription>
<para>Get device ID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t Current device identifier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="273" column="14" bodyfile="src/TemperatureController.cpp" bodystart="1258" bodyend="1258"/>
        <references refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" compoundref="_temperature_controller_8h" startline="614">deviceId</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a42c32522acc809f03f33d8d98414e793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::setFirmwareVersion</definition>
        <argsstring>(uint16_t version)</argsstring>
        <name>setFirmwareVersion</name>
        <qualifiedname>TemperatureController::setFirmwareVersion</qualifiedname>
        <param>
          <type>uint16_t</type>
          <declname>version</declname>
        </param>
        <briefdescription>
<para>Set firmware version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">version</parametername>
</parameternamelist>
<parameterdescription>
<para>Firmware version number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="279" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1260" bodyend="1263"/>
        <references refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" compoundref="_temperature_controller_8h" startline="615">firmwareVersion</references>
        <references refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" compoundref="_temperature_controller_8h" startline="612">registerMap</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a88ff416e5562313759bd3a11112e252c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t TemperatureController::getFirmwareVersion</definition>
        <argsstring>() const</argsstring>
        <name>getFirmwareVersion</name>
        <qualifiedname>TemperatureController::getFirmwareVersion</qualifiedname>
        <briefdescription>
<para>Get firmware version. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t Current firmware version </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="285" column="14" bodyfile="src/TemperatureController.cpp" bodystart="1265" bodyend="1265"/>
        <references refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" compoundref="_temperature_controller_8h" startline="615">firmwareVersion</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a08f5d97d74f6364588cf22dadd9a746e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::setMeasurementPeriod</definition>
        <argsstring>(uint16_t seconds)</argsstring>
        <name>setMeasurementPeriod</name>
        <qualifiedname>TemperatureController::setMeasurementPeriod</qualifiedname>
        <param>
          <type>uint16_t</type>
          <declname>seconds</declname>
        </param>
        <briefdescription>
<para>Set measurement period. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>Time between measurements in seconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="291" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1267" bodyend="1276"/>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" compoundref="_temperature_controller_8h" startline="613">measurementPeriodSeconds</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a7465ffc80f89d566d53e97e4192a511f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t TemperatureController::getMeasurementPeriod</definition>
        <argsstring>() const</argsstring>
        <name>getMeasurementPeriod</name>
        <qualifiedname>TemperatureController::getMeasurementPeriod</qualifiedname>
        <briefdescription>
<para>Get measurement period. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t Current measurement period in seconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="297" column="14" bodyfile="src/TemperatureController.cpp" bodystart="1278" bodyend="1280"/>
        <references refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" compoundref="_temperature_controller_8h" startline="613">measurementPeriodSeconds</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1af8bbcc01e36ebbabd6f9913280fc217f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::setOneWireBusPin</definition>
        <argsstring>(uint8_t pin, size_t idx)</argsstring>
        <name>setOneWireBusPin</name>
        <qualifiedname>TemperatureController::setOneWireBusPin</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>pin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Set OneWire bus pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pin</parametername>
</parameternamelist>
<parameterdescription>
<para>GPIO pin number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus index (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="304" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1282" bodyend="1284"/>
        <references refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" compoundref="_temperature_controller_8h" startline="618">oneWireBusPin</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1aa4746563f439c7a0647d7932acd9ab04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t TemperatureController::getOneWirePin</definition>
        <argsstring>(size_t bus)</argsstring>
        <name>getOneWirePin</name>
        <qualifiedname>TemperatureController::getOneWirePin</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>bus</declname>
        </param>
        <briefdescription>
<para>Get OneWire bus pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bus</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus index (0-3) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t GPIO pin number or 0xFF if invalid bus </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="311" column="13" bodyfile="src/TemperatureController.cpp" bodystart="1332" bodyend="1334"/>
        <references refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" compoundref="_temperature_controller_8h" startline="618">oneWireBusPin</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a9ac5f76def1895a8c8f8f92ce8cd2e5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TemperatureController::getDS18B20Count</definition>
        <argsstring>() const</argsstring>
        <name>getDS18B20Count</name>
        <qualifiedname>TemperatureController::getDS18B20Count</qualifiedname>
        <briefdescription>
<para>Get count of discovered DS18B20 sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int Number of DS18B20 sensors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="318" column="9" bodyfile="src/TemperatureController.cpp" bodystart="1286" bodyend="1294"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
        <referencedby refid="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" compoundref="_temperature_controller_8cpp" startline="1223" endline="1240">getSystemStatusJson</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a6ab2ecc10c283d75d948ce6f1ad723a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TemperatureController::getPT1000Count</definition>
        <argsstring>() const</argsstring>
        <name>getPT1000Count</name>
        <qualifiedname>TemperatureController::getPT1000Count</qualifiedname>
        <briefdescription>
<para>Get count of discovered PT1000 sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int Number of PT1000 sensors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="324" column="9" bodyfile="src/TemperatureController.cpp" bodystart="1296" bodyend="1304"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
        <referencedby refid="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" compoundref="_temperature_controller_8cpp" startline="1223" endline="1240">getSystemStatusJson</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a23dca296a268baa9b8234c8bf9cf0c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::updateAllSensors</definition>
        <argsstring>()</argsstring>
        <name>updateAllSensors</name>
        <qualifiedname>TemperatureController::updateAllSensors</qualifiedname>
        <briefdescription>
<para>Update temperature readings for all sensors. </para>
        </briefdescription>
        <detaileddescription>
<para>Forces immediate temperature reading from all sensors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="330" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1306" bodyend="1330"/>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_logger_manager_1aef24f00186213fa78be3b104a50d58e6" compoundref="_logger_manager_8h" startline="165" endline="167">LoggerManager::error</references>
        <references refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" compoundref="_temperature_controller_8cpp" startline="1336" endline="1352">getSensorBus</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TemperatureController::getSensorBus</definition>
        <argsstring>(Sensor *sensor)</argsstring>
        <name>getSensorBus</name>
        <qualifiedname>TemperatureController::getSensorBus</qualifiedname>
        <param>
          <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
          <declname>sensor</declname>
        </param>
        <briefdescription>
<para>Get bus number for a sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sensor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Bus number (0-3) or -1 if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="337" column="9" bodyfile="src/TemperatureController.cpp" bodystart="1336" bodyend="1352"/>
        <references refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" compoundref="_temperature_controller_8h" startline="619">chipSelectPin</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_sensor_1ac42da3a37b0d6a9622344fe83f4c9047" compoundref="_sensor_8h" startline="236" endline="236">Sensor::getOneWirePin</references>
        <references refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" compoundref="_sensor_8cpp" startline="208" endline="211">Sensor::getPT1000ChipSelectPin</references>
        <references refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" compoundref="_sensor_8cpp" startline="171" endline="171">Sensor::getType</references>
        <references refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" compoundref="_temperature_controller_8h" startline="618">oneWireBusPin</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <referencedby refid="class_temperature_controller_1af4ab2c7b7a3934ab7837603a420b1ae2" compoundref="_temperature_controller_8cpp" startline="1509" endline="1539">bindSensorToPointByBusNumber</referencedby>
        <referencedby refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" compoundref="_temperature_controller_8cpp" startline="977" endline="1049">discoverDS18B20Sensors</referencedby>
        <referencedby refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" compoundref="_temperature_controller_8cpp" startline="1052" endline="1101">discoverPTSensors</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1162" endline="1221">getPointsJson</referencedby>
        <referencedby refid="class_temperature_controller_1a58f7a683f6e4c08dbfdfc43c1e740f15" compoundref="_temperature_controller_8cpp" startline="1104" endline="1160">getSensorsJson</referencedby>
        <referencedby refid="class_temperature_controller_1a23dca296a268baa9b8234c8bf9cf0c3e" compoundref="_temperature_controller_8cpp" startline="1306" endline="1330">updateAllSensors</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::updateAlarms</definition>
        <argsstring>()</argsstring>
        <name>updateAlarms</name>
        <qualifiedname>TemperatureController::updateAlarms</qualifiedname>
        <briefdescription>
<para>Update alarm states for all measurement points. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks alarm conditions and updates alarm states </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="344" column="10" bodyfile="src/TemperatureController.cpp" bodystart="179" bodyend="232"/>
        <references refid="class_temperature_controller_1a719eec89a0099b13656f3125c9e8c69f" compoundref="_temperature_controller_8h" startline="624">_alarmCheckInterval</references>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="class_temperature_controller_1ac0cd8ac0fd76c008b3af737f12467e32" compoundref="_temperature_controller_8h" startline="623">_lastAlarmCheck</references>
        <references refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" compoundref="_temperature_controller_8h" startline="607">dsPoints</references>
        <references refid="class_temperature_controller_1af58201023d15de003d4f1b9a9771a9e3" compoundref="_temperature_controller_8cpp" startline="327" endline="335">getActiveAlarms</references>
        <references refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" compoundref="_temperature_controller_8cpp" startline="944" endline="947">getBoundSensor</references>
        <references refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" compoundref="_temperature_controller_8h" startline="608">ptPoints</references>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a77429353a869859ddea4f5b92ede2f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String TemperatureController::getAlarmsJson</definition>
        <argsstring>()</argsstring>
        <name>getAlarmsJson</name>
        <qualifiedname>TemperatureController::getAlarmsJson</qualifiedname>
        <briefdescription>
<para>Get JSON representation of all alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String JSON array of alarm objects</para>
</simplesect>
Includes alarm type, priority, state, and associated point </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="351" column="12" bodyfile="src/TemperatureController.cpp" bodystart="719" bodyend="749"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::handleAlarmDisplay</definition>
        <argsstring>()</argsstring>
        <name>handleAlarmDisplay</name>
        <qualifiedname>TemperatureController::handleAlarmDisplay</qualifiedname>
        <briefdescription>
<para>Handle alarm display on OLED/LEDs. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates display with highest priority active alarm </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="357" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1746" bodyend="1758"/>
        <references refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" compoundref="_temperature_controller_8cpp" startline="1898" endline="1925">_checkButtonPress</references>
        <references refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</references>
        <references refid="class_temperature_controller_1a477597992aa9362076843f37b648741a" compoundref="_temperature_controller_8cpp" startline="1760" endline="1795">_updateAlarmQueues</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::handleAlarmOutputs</definition>
        <argsstring>()</argsstring>
        <name>handleAlarmOutputs</name>
        <qualifiedname>TemperatureController::handleAlarmOutputs</qualifiedname>
        <briefdescription>
<para>Handle alarm output signals. </para>
        </briefdescription>
        <detaileddescription>
<para>Controls relays and LEDs based on alarm states </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="363" column="10" bodyfile="src/TemperatureController.cpp" bodystart="483" bodyend="611"/>
        <references refid="class_temperature_controller_1aec910974cd40cafef22d5e5c5e730512" compoundref="_temperature_controller_8h" startline="688">_blueLedState</references>
        <references refid="class_temperature_controller_1a01c4086be4fa74e89b108428ac3756ea" compoundref="_temperature_controller_8h" startline="686">_redLedState</references>
        <references refid="class_temperature_controller_1ac2b7ce0afccac7602505ab0bd3916562" compoundref="_temperature_controller_8h" startline="684">_relay1State</references>
        <references refid="class_temperature_controller_1a3af25b4c386c13c4e1c49f50d67c705b" compoundref="_temperature_controller_8h" startline="685">_relay2State</references>
        <references refid="class_temperature_controller_1ada44ea25043f4cc35dd01cad67979acf" compoundref="_temperature_controller_8h" startline="687">_yellowLedState</references>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" compoundref="_alarm_8h" startline="49">ACKNOWLEDGED</references>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" compoundref="_alarm_8h" startline="50">ACTIVE</references>
        <references refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" compoundref="_temperature_controller_8h" startline="471" endline="471">getAlarmCount</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" compoundref="_alarm_8h" startline="61">PRIORITY_CRITICAL</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" compoundref="_alarm_8h" startline="58">PRIORITY_LOW</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1af58201023d15de003d4f1b9a9771a9e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_alarm" kindref="compound">Alarm</ref> * &gt;</type>
        <definition>std::vector&lt; Alarm * &gt; TemperatureController::getActiveAlarms</definition>
        <argsstring>() const</argsstring>
        <name>getActiveAlarms</name>
        <qualifiedname>TemperatureController::getActiveAlarms</qualifiedname>
        <briefdescription>
<para>Get list of active alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;Alarm*&gt; Vector of active alarm pointers </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="369" column="17" bodyfile="src/TemperatureController.cpp" bodystart="327" bodyend="335"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <referencedby refid="class_temperature_controller_1a477597992aa9362076843f37b648741a" compoundref="_temperature_controller_8cpp" startline="1760" endline="1795">_updateAlarmQueues</referencedby>
        <referencedby refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" compoundref="_temperature_controller_8cpp" startline="179" endline="232">updateAlarms</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::createAlarm</definition>
        <argsstring>(AlarmType type, MeasurementPoint *source, AlarmPriority priority)</argsstring>
        <name>createAlarm</name>
        <qualifiedname>TemperatureController::createAlarm</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Create new alarm for measurement point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> type (HIGH_TEMP, LOW_TEMP, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point that triggered alarm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> priority level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="377" column="10" bodyfile="src/TemperatureController.cpp" bodystart="275" bodyend="297"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" compoundref="_measurement_point_8cpp" startline="45" endline="47">MeasurementPoint::getAddress</references>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba24d459a81449d7210c8f9a86c2913034" compoundref="_alarm_8h" startline="46">NEW</references>
        <references refid="class_alarm_1ad116a3e8b622810e1769568fbac16379" compoundref="_alarm_8cpp" startline="429" endline="431">Alarm::setConfigKey</references>
        <referencedby refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" compoundref="_temperature_controller_8cpp" startline="237" endline="260">_checkPointForAlarms</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1abb3d16c1efa5754a2e64b5dc5dd4f4cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alarm" kindref="compound">Alarm</ref> *</type>
        <definition>Alarm * TemperatureController::getHighestPriorityAlarm</definition>
        <argsstring>() const</argsstring>
        <name>getHighestPriorityAlarm</name>
        <qualifiedname>TemperatureController::getHighestPriorityAlarm</qualifiedname>
        <briefdescription>
<para>Get highest priority active alarm. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Alarm* Pointer to highest priority alarm or nullptr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="383" column="11" bodyfile="src/TemperatureController.cpp" bodystart="300" bodyend="307"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <referencedby refid="class_temperature_controller_1a5f1c8fce1e5efb637bfe86bdb609a3b7" compoundref="_temperature_controller_8cpp" startline="310" endline="316">acknowledgeHighestPriorityAlarm</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a5f1c8fce1e5efb637bfe86bdb609a3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::acknowledgeHighestPriorityAlarm</definition>
        <argsstring>()</argsstring>
        <name>acknowledgeHighestPriorityAlarm</name>
        <qualifiedname>TemperatureController::acknowledgeHighestPriorityAlarm</qualifiedname>
        <briefdescription>
<para>Acknowledge highest priority alarm. </para>
        </briefdescription>
        <detaileddescription>
<para>Moves alarm from active to acknowledged state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="389" column="10" bodyfile="src/TemperatureController.cpp" bodystart="310" bodyend="316"/>
        <references refid="class_alarm_1aa14f5a764303b269f04573867e2e4fc8" compoundref="_alarm_8cpp" startline="107" endline="136">Alarm::acknowledge</references>
        <references refid="class_temperature_controller_1abb3d16c1efa5754a2e64b5dc5dd4f4cc" compoundref="_temperature_controller_8cpp" startline="300" endline="307">getHighestPriorityAlarm</references>
        <references refid="class_alarm_1adaf4b74537e11d5643ba5a8ae07fe10e" compoundref="_alarm_8cpp" startline="366" endline="372">Alarm::getStatusText</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1ae1ac307e5332c85a007b38a484b8a1c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::acknowledgeAllAlarms</definition>
        <argsstring>()</argsstring>
        <name>acknowledgeAllAlarms</name>
        <qualifiedname>TemperatureController::acknowledgeAllAlarms</qualifiedname>
        <briefdescription>
<para>Acknowledge all active alarms. </para>
        </briefdescription>
        <detaileddescription>
<para>Moves all alarms to acknowledged state </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="395" column="10" bodyfile="src/TemperatureController.cpp" bodystart="318" bodyend="324"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1ac5f5cdf881ddf8a0d3c4d8460db0ce1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::clearResolvedAlarms</definition>
        <argsstring>()</argsstring>
        <name>clearResolvedAlarms</name>
        <qualifiedname>TemperatureController::clearResolvedAlarms</qualifiedname>
        <briefdescription>
<para>Clear resolved alarms from system. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes alarms that are no longer active </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="401" column="10" bodyfile="src/TemperatureController.cpp" bodystart="337" bodyend="350"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" compoundref="_temperature_controller_8h" startline="630">_currentDisplayedAlarm</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1aa547daf7d44ea3214e0a2977f7f72cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::clearConfiguredAlarms</definition>
        <argsstring>()</argsstring>
        <name>clearConfiguredAlarms</name>
        <qualifiedname>TemperatureController::clearConfiguredAlarms</qualifiedname>
        <briefdescription>
<para>Clear all configured alarms. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes all alarm configurations <simplesect kind="warning"><para>This deletes all alarm settings </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="408" column="10" bodyfile="src/TemperatureController.cpp" bodystart="352" bodyend="361"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" compoundref="_temperature_controller_8h" startline="630">_currentDisplayedAlarm</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1ad174e0411bd48422d8e3812fd28a7a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::ensureAlarmsForPoint</definition>
        <argsstring>(MeasurementPoint *point)</argsstring>
        <name>ensureAlarmsForPoint</name>
        <qualifiedname>TemperatureController::ensureAlarmsForPoint</qualifiedname>
        <param>
          <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Ensure all 3 alarm types exist for a measurement point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">point</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point to create alarms for</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Creates LOW_TEMPERATURE, HIGH_TEMPERATURE, and SENSOR_ERROR alarms if they don&apos;t exist </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="415" column="10" bodyfile="src/TemperatureController.cpp" bodystart="363" bodyend="400"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" compoundref="_temperature_controller_8cpp" startline="1469" endline="1476">findAlarm</references>
        <references refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" compoundref="_measurement_point_8cpp" startline="45" endline="47">MeasurementPoint::getAddress</references>
        <references refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">MeasurementPoint::getBoundSensor</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <references refid="class_alarm_1ad116a3e8b622810e1769568fbac16379" compoundref="_alarm_8cpp" startline="429" endline="431">Alarm::setConfigKey</references>
        <references refid="class_alarm_1acb8f203b2e2317c1f835bb4b19123f3f" compoundref="_alarm_8cpp" startline="461" endline="470">Alarm::setEnabled</references>
        <references refid="class_alarm_1a5095c54c304a52ebbaca5a2ea74059cd" compoundref="_alarm_8cpp" startline="433" endline="445">Alarm::setPriority</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a880028883101197527de57f626e14512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_alarm" kindref="compound">Alarm</ref> * &gt;</type>
        <definition>std::vector&lt; Alarm * &gt; TemperatureController::getAlarmsForPoint</definition>
        <argsstring>(MeasurementPoint *point)</argsstring>
        <name>getAlarmsForPoint</name>
        <qualifiedname>TemperatureController::getAlarmsForPoint</qualifiedname>
        <param>
          <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Get all alarms associated with a measurement point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">point</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point to get alarms for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;Alarm*&gt; Vector of alarms for the point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="422" column="17" bodyfile="src/TemperatureController.cpp" bodystart="402" bodyend="415"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" compoundref="_measurement_point_8cpp" startline="45" endline="47">MeasurementPoint::getAddress</references>
        <referencedby refid="class_temperature_controller_1af4ab2c7b7a3934ab7837603a420b1ae2" compoundref="_temperature_controller_8cpp" startline="1509" endline="1539">bindSensorToPointByBusNumber</referencedby>
        <referencedby refid="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" compoundref="_temperature_controller_8cpp" startline="886" endline="919">bindSensorToPointByChipSelect</referencedby>
        <referencedby refid="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" compoundref="_temperature_controller_8cpp" startline="850" endline="884">bindSensorToPointByRom</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::addAlarm</definition>
        <argsstring>(AlarmType type, uint8_t pointAddress, AlarmPriority priority)</argsstring>
        <name>addAlarm</name>
        <qualifiedname>TemperatureController::addAlarm</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pointAddress</declname>
        </param>
        <param>
          <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Add alarm configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> priority </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if alarm added successfully </para>
</simplesect>
<simplesect kind="return"><para>false if alarm already exists or invalid parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="433" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1386" bodyend="1442"/>
        <references refid="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" compoundref="_temperature_controller_8h" startline="679">_acknowledgedDelayCritical</references>
        <references refid="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" compoundref="_temperature_controller_8h" startline="680">_acknowledgedDelayHigh</references>
        <references refid="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" compoundref="_temperature_controller_8h" startline="682">_acknowledgedDelayLow</references>
        <references refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" compoundref="_temperature_controller_8h" startline="681">_acknowledgedDelayMedium</references>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="class_temperature_controller_1aa97ba23c998b2cfc732786e2307e60fa" compoundref="_temperature_controller_8cpp" startline="1943" endline="1951">_getPriorityString</references>
        <references refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</references>
        <references refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">MeasurementPoint::getName</references>
        <references refid="class_alarm_1abd578ec75a5ac9bce00b7ce7207c5d8c" compoundref="_alarm_8cpp" startline="378" endline="386">Alarm::getTypeString</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" compoundref="_alarm_8h" startline="61">PRIORITY_CRITICAL</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" compoundref="_alarm_8h" startline="58">PRIORITY_LOW</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <references refid="class_alarm_1a3f5329f9c026bad4f5171423fcaf51b0" compoundref="_alarm_8cpp" startline="628" endline="630">Alarm::setAcknowledgedDelay</references>
        <references refid="class_alarm_1ad116a3e8b622810e1769568fbac16379" compoundref="_alarm_8cpp" startline="429" endline="431">Alarm::setConfigKey</references>
        <references refid="class_logger_manager_1a0d52b0ff7bff22817e987ad753102854" compoundref="_logger_manager_8h" startline="155" endline="157">LoggerManager::warning</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1ac39c426da2e1f9dff4abe1d9b550b723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::removeAlarm</definition>
        <argsstring>(const String &amp;configKey)</argsstring>
        <name>removeAlarm</name>
        <qualifiedname>TemperatureController::removeAlarm</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>configKey</declname>
        </param>
        <briefdescription>
<para>Remove alarm by configuration key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">configKey</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> configuration key </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if alarm removed successfully </para>
</simplesect>
<simplesect kind="return"><para>false if alarm not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="441" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1444" bodyend="1457"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a93bd31914a054a4e1df9be7e3966b82e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::updateAlarm</definition>
        <argsstring>(const String &amp;configKey, AlarmPriority priority, bool enabled)</argsstring>
        <name>updateAlarm</name>
        <qualifiedname>TemperatureController::updateAlarm</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>configKey</declname>
        </param>
        <param>
          <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
<para>Update alarm configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">configKey</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> configuration key </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para>New priority level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable/disable alarm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if update successful </para>
</simplesect>
<simplesect kind="return"><para>false if alarm not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="451" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1459" bodyend="1467"/>
        <references refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" compoundref="_temperature_controller_8cpp" startline="1469" endline="1476">findAlarm</references>
        <references refid="class_alarm_1acb8f203b2e2317c1f835bb4b19123f3f" compoundref="_alarm_8cpp" startline="461" endline="470">Alarm::setEnabled</references>
        <references refid="class_alarm_1a5095c54c304a52ebbaca5a2ea74059cd" compoundref="_alarm_8cpp" startline="433" endline="445">Alarm::setPriority</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alarm" kindref="compound">Alarm</ref> *</type>
        <definition>Alarm * TemperatureController::findAlarm</definition>
        <argsstring>(const String &amp;configKey)</argsstring>
        <name>findAlarm</name>
        <qualifiedname>TemperatureController::findAlarm</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>configKey</declname>
        </param>
        <briefdescription>
<para>Find alarm by configuration key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">configKey</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> configuration key </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Alarm* Pointer to alarm or nullptr if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="458" column="11" bodyfile="src/TemperatureController.cpp" bodystart="1469" bodyend="1476"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <referencedby refid="class_temperature_controller_1ad174e0411bd48422d8e3812fd28a7a0b" compoundref="_temperature_controller_8cpp" startline="363" endline="400">ensureAlarmsForPoint</referencedby>
        <referencedby refid="class_temperature_controller_1a93bd31914a054a4e1df9be7e3966b82e" compoundref="_temperature_controller_8cpp" startline="1459" endline="1467">updateAlarm</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a0bd06377ae255b55a39e1fe3a44be4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_alarm" kindref="compound">Alarm</ref> *</type>
        <definition>Alarm * TemperatureController::getAlarmByIndex</definition>
        <argsstring>(int idx)</argsstring>
        <name>getAlarmByIndex</name>
        <qualifiedname>TemperatureController::getAlarmByIndex</qualifiedname>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get alarm by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Alarm* Pointer to alarm or nullptr if invalid index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="465" column="11" bodyfile="src/TemperatureController.cpp" bodystart="1478" bodyend="1480"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int TemperatureController::getAlarmCount</definition>
        <argsstring>() const</argsstring>
        <name>getAlarmCount</name>
        <qualifiedname>TemperatureController::getAlarmCount</qualifiedname>
        <briefdescription>
<para>Get total number of configured alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int Number of configured alarms </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="471" column="9" bodyfile="include/TemperatureController.h" bodystart="471" bodyend="471"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <referencedby refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" compoundref="_temperature_controller_8cpp" startline="483" endline="611">handleAlarmOutputs</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a30507c056721b411284326837ccdee0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_alarm" kindref="compound">Alarm</ref> * &gt;</type>
        <definition>std::vector&lt; Alarm * &gt; TemperatureController::getConfiguredAlarms</definition>
        <argsstring>() const</argsstring>
        <name>getConfiguredAlarms</name>
        <qualifiedname>TemperatureController::getConfiguredAlarms</qualifiedname>
        <briefdescription>
<para>Get list of configured alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;Alarm*&gt; Vector of configured alarm pointers </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="477" column="17" bodyfile="include/TemperatureController.h" bodystart="477" bodyend="477"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1abc85cc6707cb18ce74f3daae2cd9ade0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::handleCriticalAlarms</definition>
        <argsstring>()</argsstring>
        <name>handleCriticalAlarms</name>
        <qualifiedname>TemperatureController::handleCriticalAlarms</qualifiedname>
        <briefdescription>
<para>Handle critical priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para>Implements specific behavior for critical alarms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="484" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1485" bodyend="1492"/>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a1f106cc848aa45ecd8d9ab4808aef6d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::handleHighPriorityAlarms</definition>
        <argsstring>()</argsstring>
        <name>handleHighPriorityAlarms</name>
        <qualifiedname>TemperatureController::handleHighPriorityAlarms</qualifiedname>
        <briefdescription>
<para>Handle high priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para>Implements specific behavior for high priority alarms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="490" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1494" bodyend="1498"/>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a7da957a2899fb3b47d94d279c2099ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::handleMediumPriorityAlarms</definition>
        <argsstring>()</argsstring>
        <name>handleMediumPriorityAlarms</name>
        <qualifiedname>TemperatureController::handleMediumPriorityAlarms</qualifiedname>
        <briefdescription>
<para>Handle medium priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para>Implements specific behavior for medium priority alarms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="496" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1500" bodyend="1502"/>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a16cb79caee63ec4acdd539adbb74ba40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::handleLowPriorityAlarms</definition>
        <argsstring>()</argsstring>
        <name>handleLowPriorityAlarms</name>
        <qualifiedname>TemperatureController::handleLowPriorityAlarms</qualifiedname>
        <briefdescription>
<para>Handle low priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para>Implements specific behavior for low priority alarms </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="502" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1504" bodyend="1506"/>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1af4ab2c7b7a3934ab7837603a420b1ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::bindSensorToPointByBusNumber</definition>
        <argsstring>(uint8_t busNumber, uint8_t pointAddress)</argsstring>
        <name>bindSensorToPointByBusNumber</name>
        <qualifiedname>TemperatureController::bindSensorToPointByBusNumber</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>busNumber</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pointAddress</declname>
        </param>
        <briefdescription>
<para>Bind sensor to measurement point by bus number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">busNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>OneWire bus number (0-3) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointAddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if binding successful </para>
</simplesect>
<simplesect kind="return"><para>false if invalid bus or point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="511" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1509" bodyend="1539"/>
        <references refid="class_measurement_point_1a3c3af28d9aabc9e5b9e2e370eaa29ce0" compoundref="_measurement_point_8cpp" startline="118" endline="120">MeasurementPoint::bindSensor</references>
        <references refid="class_temperature_controller_1a880028883101197527de57f626e14512" compoundref="_temperature_controller_8cpp" startline="402" endline="415">getAlarmsForPoint</references>
        <references refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</references>
        <references refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" compoundref="_temperature_controller_8cpp" startline="1336" endline="1352">getSensorBus</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <references refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" compoundref="_temperature_controller_8h" startline="609">sensors</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a1cf2a33257d4f089a304859b975663c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::setAcknowledgedDelayCritical</definition>
        <argsstring>(unsigned long delay)</argsstring>
        <name>setAcknowledgedDelayCritical</name>
        <qualifiedname>TemperatureController::setAcknowledgedDelayCritical</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Set acknowledge delay for critical alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="518" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1545" bodyend="1548"/>
        <references refid="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" compoundref="_temperature_controller_8h" startline="679">_acknowledgedDelayCritical</references>
        <references refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" compoundref="_temperature_controller_8cpp" startline="1583" endline="1628">applyAcknowledgedDelaysToAlarms</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a365ac98348ce12de8938a687744c9f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::setAcknowledgedDelayHigh</definition>
        <argsstring>(unsigned long delay)</argsstring>
        <name>setAcknowledgedDelayHigh</name>
        <qualifiedname>TemperatureController::setAcknowledgedDelayHigh</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Set acknowledge delay for high priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="524" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1550" bodyend="1553"/>
        <references refid="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" compoundref="_temperature_controller_8h" startline="680">_acknowledgedDelayHigh</references>
        <references refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" compoundref="_temperature_controller_8cpp" startline="1583" endline="1628">applyAcknowledgedDelaysToAlarms</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a148e97ba76cb6bf3d3f45ddefe715320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::setAcknowledgedDelayMedium</definition>
        <argsstring>(unsigned long delay)</argsstring>
        <name>setAcknowledgedDelayMedium</name>
        <qualifiedname>TemperatureController::setAcknowledgedDelayMedium</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Set acknowledge delay for medium priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="530" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1555" bodyend="1558"/>
        <references refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" compoundref="_temperature_controller_8h" startline="681">_acknowledgedDelayMedium</references>
        <references refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" compoundref="_temperature_controller_8cpp" startline="1583" endline="1628">applyAcknowledgedDelaysToAlarms</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a87eeba5b5182d712bd9c361f37b933a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::setAcknowledgedDelayLow</definition>
        <argsstring>(unsigned long delay)</argsstring>
        <name>setAcknowledgedDelayLow</name>
        <qualifiedname>TemperatureController::setAcknowledgedDelayLow</qualifiedname>
        <param>
          <type>unsigned long</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Set acknowledge delay for low priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="536" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1560" bodyend="1563"/>
        <references refid="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" compoundref="_temperature_controller_8h" startline="682">_acknowledgedDelayLow</references>
        <references refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" compoundref="_temperature_controller_8cpp" startline="1583" endline="1628">applyAcknowledgedDelaysToAlarms</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a565a282c8a8330005545d92686ae8a01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::getAcknowledgedDelayCritical</definition>
        <argsstring>() const</argsstring>
        <name>getAcknowledgedDelayCritical</name>
        <qualifiedname>TemperatureController::getAcknowledgedDelayCritical</qualifiedname>
        <briefdescription>
<para>Get acknowledge delay for critical alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned long Delay in milliseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="543" column="19" bodyfile="src/TemperatureController.cpp" bodystart="1566" bodyend="1568"/>
        <references refid="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" compoundref="_temperature_controller_8h" startline="679">_acknowledgedDelayCritical</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a90a8e6caf82ff5bdd1077b444c0c08d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::getAcknowledgedDelayHigh</definition>
        <argsstring>() const</argsstring>
        <name>getAcknowledgedDelayHigh</name>
        <qualifiedname>TemperatureController::getAcknowledgedDelayHigh</qualifiedname>
        <briefdescription>
<para>Get acknowledge delay for high priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned long Delay in milliseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="549" column="19" bodyfile="src/TemperatureController.cpp" bodystart="1570" bodyend="1572"/>
        <references refid="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" compoundref="_temperature_controller_8h" startline="680">_acknowledgedDelayHigh</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a9e1bfe23a47e8323e6fd50e1cf6ceafc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::getAcknowledgedDelayMedium</definition>
        <argsstring>() const</argsstring>
        <name>getAcknowledgedDelayMedium</name>
        <qualifiedname>TemperatureController::getAcknowledgedDelayMedium</qualifiedname>
        <briefdescription>
<para>Get acknowledge delay for medium priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned long Delay in milliseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="555" column="19" bodyfile="src/TemperatureController.cpp" bodystart="1574" bodyend="1576"/>
        <references refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" compoundref="_temperature_controller_8h" startline="681">_acknowledgedDelayMedium</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a81aeb69dc3a9e3bda9f06dcdcc567626" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long TemperatureController::getAcknowledgedDelayLow</definition>
        <argsstring>() const</argsstring>
        <name>getAcknowledgedDelayLow</name>
        <qualifiedname>TemperatureController::getAcknowledgedDelayLow</qualifiedname>
        <briefdescription>
<para>Get acknowledge delay for low priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned long Delay in milliseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="561" column="19" bodyfile="src/TemperatureController.cpp" bodystart="1578" bodyend="1580"/>
        <references refid="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" compoundref="_temperature_controller_8h" startline="682">_acknowledgedDelayLow</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::applyAcknowledgedDelaysToAlarms</definition>
        <argsstring>()</argsstring>
        <name>applyAcknowledgedDelaysToAlarms</name>
        <qualifiedname>TemperatureController::applyAcknowledgedDelaysToAlarms</qualifiedname>
        <briefdescription>
<para>Apply acknowledged delays to existing alarms. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates all existing alarms with current delay settings </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="567" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1583" bodyend="1628"/>
        <references refid="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" compoundref="_temperature_controller_8h" startline="679">_acknowledgedDelayCritical</references>
        <references refid="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" compoundref="_temperature_controller_8h" startline="680">_acknowledgedDelayHigh</references>
        <references refid="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" compoundref="_temperature_controller_8h" startline="682">_acknowledgedDelayLow</references>
        <references refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" compoundref="_temperature_controller_8h" startline="681">_acknowledgedDelayMedium</references>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" compoundref="_alarm_8h" startline="61">PRIORITY_CRITICAL</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" compoundref="_alarm_8h" startline="58">PRIORITY_LOW</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <referencedby refid="class_temperature_controller_1a1cf2a33257d4f089a304859b975663c3" compoundref="_temperature_controller_8cpp" startline="1545" endline="1548">setAcknowledgedDelayCritical</referencedby>
        <referencedby refid="class_temperature_controller_1a365ac98348ce12de8938a687744c9f6c" compoundref="_temperature_controller_8cpp" startline="1550" endline="1553">setAcknowledgedDelayHigh</referencedby>
        <referencedby refid="class_temperature_controller_1a87eeba5b5182d712bd9c361f37b933a8" compoundref="_temperature_controller_8cpp" startline="1560" endline="1563">setAcknowledgedDelayLow</referencedby>
        <referencedby refid="class_temperature_controller_1a148e97ba76cb6bf3d3f45ddefe715320" compoundref="_temperature_controller_8cpp" startline="1555" endline="1558">setAcknowledgedDelayMedium</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a7c12e116a7b79d1a103223a3caeb5cc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TemperatureController::getAlarmCount</definition>
        <argsstring>(AlarmPriority priority, const String &amp;comparison=&quot;==&quot;) const</argsstring>
        <name>getAlarmCount</name>
        <qualifiedname>TemperatureController::getAlarmCount</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>comparison</declname>
          <defval>&quot;==&quot;</defval>
        </param>
        <briefdescription>
<para>Get count of alarms by priority. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority level to count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">comparison</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison operator (&quot;==&quot;, &quot;&gt;=&quot;, &quot;&lt;=&quot;, &quot;&gt;&quot;, &quot;&lt;&quot;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Number of alarms matching criteria </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="575" column="9" bodyfile="src/TemperatureController.cpp" bodystart="1652" bodyend="1660"/>
        <references refid="class_temperature_controller_1a407b33d4603eaf6dd9623e86fdc7bf56" compoundref="_temperature_controller_8cpp" startline="1687" endline="1704">_comparePriority</references>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1af969846ad52d5698fd7b12428a8ea0a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TemperatureController::getAlarmCount</definition>
        <argsstring>(AlarmStage stage, const String &amp;comparison=&quot;==&quot;) const</argsstring>
        <name>getAlarmCount</name>
        <qualifiedname>TemperatureController::getAlarmCount</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eb" kindref="member">AlarmStage</ref></type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>comparison</declname>
          <defval>&quot;==&quot;</defval>
        </param>
        <briefdescription>
<para>Get count of alarms by stage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stage</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> stage to count </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">comparison</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison operator (&quot;==&quot;, &quot;!=&quot;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Number of alarms matching criteria </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="583" column="9" bodyfile="src/TemperatureController.cpp" bodystart="1662" bodyend="1670"/>
        <references refid="class_temperature_controller_1a8dc59c2f0f60d4491da64b0c427312b5" compoundref="_temperature_controller_8cpp" startline="1706" endline="1723">_compareStage</references>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a654b817ff784d9a57d594ee18881f8ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TemperatureController::getAlarmCount</definition>
        <argsstring>(AlarmPriority priority, AlarmStage stage, const String &amp;priorityComparison=&quot;==&quot;, const String &amp;stageComparison=&quot;==&quot;) const</argsstring>
        <name>getAlarmCount</name>
        <qualifiedname>TemperatureController::getAlarmCount</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
          <declname>priority</declname>
        </param>
        <param>
          <type><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eb" kindref="member">AlarmStage</ref></type>
          <declname>stage</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>priorityComparison</declname>
          <defval>&quot;==&quot;</defval>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>stageComparison</declname>
          <defval>&quot;==&quot;</defval>
        </param>
        <briefdescription>
<para>Get count of alarms by priority and stage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority level to filter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stage</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> stage to filter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priorityComparison</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority comparison operator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stageComparison</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage comparison operator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Number of alarms matching both criteria </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="593" column="9" bodyfile="src/TemperatureController.cpp" bodystart="1672" bodyend="1684"/>
        <references refid="class_temperature_controller_1a407b33d4603eaf6dd9623e86fdc7bf56" compoundref="_temperature_controller_8cpp" startline="1687" endline="1704">_comparePriority</references>
        <references refid="class_temperature_controller_1a8dc59c2f0f60d4491da64b0c427312b5" compoundref="_temperature_controller_8cpp" startline="1706" endline="1723">_compareStage</references>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_temperature_controller_1ad322a5bab8d5788a586206004248f673" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::isDS18B20Address</definition>
        <argsstring>(uint8_t address) const</argsstring>
        <name>isDS18B20Address</name>
        <qualifiedname>TemperatureController::isDS18B20Address</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Check if address is for DS18B20 sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Point address to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if DS18B20 address (0-49) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="640" column="10" bodyfile="include/TemperatureController.h" bodystart="640" bodyend="640"/>
        <referencedby refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a13125ddcf29cb56d27403818543618af" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::isPT1000Address</definition>
        <argsstring>(uint8_t address) const</argsstring>
        <name>isPT1000Address</name>
        <qualifiedname>TemperatureController::isPT1000Address</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Check if address is for PT1000 sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Point address to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if PT1000 address (50-59) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="647" column="10" bodyfile="include/TemperatureController.h" bodystart="647" bodyend="647"/>
        <referencedby refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" compoundref="_temperature_controller_8cpp" startline="777" endline="783">getMeasurementPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::_checkPointForAlarms</definition>
        <argsstring>(MeasurementPoint *point)</argsstring>
        <name>_checkPointForAlarms</name>
        <qualifiedname>TemperatureController::_checkPointForAlarms</qualifiedname>
        <param>
          <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Check measurement point for alarm conditions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">point</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="654" column="10" bodyfile="src/TemperatureController.cpp" bodystart="237" bodyend="260"/>
        <references refid="class_temperature_controller_1a4e75dbef3c1ce99afd4ec8e71102e836" compoundref="_temperature_controller_8cpp" startline="262" endline="272">_hasAlarmForPoint</references>
        <references refid="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" compoundref="_temperature_controller_8cpp" startline="275" endline="297">createAlarm</references>
        <references refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">MeasurementPoint::getBoundSensor</references>
        <references refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" compoundref="_measurement_point_8cpp" startline="53" endline="55">MeasurementPoint::getCurrentTemp</references>
        <references refid="class_measurement_point_1a3fb0693931f12190a7f96e5d6be51b51" compoundref="_measurement_point_8cpp" startline="77" endline="79">MeasurementPoint::getErrorStatus</references>
        <references refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" compoundref="_measurement_point_8cpp" startline="69" endline="71">MeasurementPoint::getHighAlarmThreshold</references>
        <references refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" compoundref="_measurement_point_8cpp" startline="65" endline="67">MeasurementPoint::getLowAlarmThreshold</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a4e75dbef3c1ce99afd4ec8e71102e836" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::_hasAlarmForPoint</definition>
        <argsstring>(MeasurementPoint *point, AlarmType type)</argsstring>
        <name>_hasAlarmForPoint</name>
        <qualifiedname>TemperatureController::_hasAlarmForPoint</qualifiedname>
        <param>
          <type><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref> *</type>
          <declname>point</declname>
        </param>
        <param>
          <type><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Check if alarm exists for point and type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">point</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> type to check </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if alarm exists for this point/type combination </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="662" column="10" bodyfile="src/TemperatureController.cpp" bodystart="262" bodyend="272"/>
        <references refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" compoundref="_temperature_controller_8h" startline="622">_configuredAlarms</references>
        <referencedby refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" compoundref="_temperature_controller_8cpp" startline="237" endline="260">_checkPointForAlarms</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::_checkButtonPress</definition>
        <argsstring>()</argsstring>
        <name>_checkButtonPress</name>
        <qualifiedname>TemperatureController::_checkButtonPress</qualifiedname>
        <briefdescription>
<para>Check for button press and handle acknowledgment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="667" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1898" bodyend="1925"/>
        <references refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" compoundref="_temperature_controller_8h" startline="720">_activeAlarmsQueue</references>
        <references refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" compoundref="_temperature_controller_8h" startline="722">_currentActiveAlarmIndex</references>
        <references refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" compoundref="_temperature_controller_8h" startline="630">_currentDisplayedAlarm</references>
        <references refid="class_temperature_controller_1aa881d2bbb58b22ac952aa781d997ee01" compoundref="_temperature_controller_8h" startline="726">_displayingActiveAlarm</references>
        <references refid="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" compoundref="_temperature_controller_8h" startline="724">_lastAlarmDisplayTime</references>
        <references refid="class_temperature_controller_1a6ffb5c63a3108e25e3224b77e0a661dc" compoundref="_temperature_controller_8h" startline="625">_lastButtonState</references>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" compoundref="_alarm_8h" startline="50">ACTIVE</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <referencedby refid="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" compoundref="_temperature_controller_8cpp" startline="1746" endline="1758">handleAlarmDisplay</referencedby>
        <referencedby refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" compoundref="_temperature_controller_8cpp" startline="146" endline="176">update</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a4d36576f7d6ab8f5222a082878314912" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::_updateNormalDisplay</definition>
        <argsstring>()</argsstring>
        <name>_updateNormalDisplay</name>
        <qualifiedname>TemperatureController::_updateNormalDisplay</qualifiedname>
        <briefdescription>
<para>Update normal temperature display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="672" column="10" bodyfile="src/TemperatureController.cpp" bodystart="702" bodyend="711"/>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a28e81945f5235e161e6c532b428d36d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::_showOKAndTurnOffOLED</definition>
        <argsstring>()</argsstring>
        <name>_showOKAndTurnOffOLED</name>
        <qualifiedname>TemperatureController::_showOKAndTurnOffOLED</qualifiedname>
        <briefdescription>
<para>Show OK status and turn off OLED after delay. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="677" column="10" bodyfile="src/TemperatureController.cpp" bodystart="713" bodyend="717"/>
        <references refid="class_temperature_controller_1a473053bec0dba7d493499df05cd53fa8" compoundref="_temperature_controller_8h" startline="631">_okDisplayStartTime</references>
        <references refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" compoundref="_temperature_controller_8h" startline="632">_showingOK</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a407b33d4603eaf6dd9623e86fdc7bf56" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::_comparePriority</definition>
        <argsstring>(AlarmPriority alarmPriority, AlarmPriority targetPriority, const String &amp;comparison) const</argsstring>
        <name>_comparePriority</name>
        <qualifiedname>TemperatureController::_comparePriority</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
          <declname>alarmPriority</declname>
        </param>
        <param>
          <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
          <declname>targetPriority</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Compare alarm priority with comparison operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">alarmPriority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">targetPriority</parametername>
</parameternamelist>
<parameterdescription>
<para>Target priority </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">comparison</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison operator string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if comparison matches </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="697" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1687" bodyend="1704"/>
        <referencedby refid="class_temperature_controller_1a654b817ff784d9a57d594ee18881f8ac" compoundref="_temperature_controller_8cpp" startline="1672" endline="1684">getAlarmCount</referencedby>
        <referencedby refid="class_temperature_controller_1a7c12e116a7b79d1a103223a3caeb5cc7" compoundref="_temperature_controller_8cpp" startline="1652" endline="1660">getAlarmCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a8dc59c2f0f60d4491da64b0c427312b5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TemperatureController::_compareStage</definition>
        <argsstring>(AlarmStage alarmStage, AlarmStage targetStage, const String &amp;comparison) const</argsstring>
        <name>_compareStage</name>
        <qualifiedname>TemperatureController::_compareStage</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eb" kindref="member">AlarmStage</ref></type>
          <declname>alarmStage</declname>
        </param>
        <param>
          <type><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eb" kindref="member">AlarmStage</ref></type>
          <declname>targetStage</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>comparison</declname>
        </param>
        <briefdescription>
<para>Compare alarm stage with comparison operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">alarmStage</parametername>
</parameternamelist>
<parameterdescription>
<para>Stage to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">targetStage</parametername>
</parameternamelist>
<parameterdescription>
<para>Target stage </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">comparison</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparison operator string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if comparison matches </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="706" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1706" bodyend="1723"/>
        <referencedby refid="class_temperature_controller_1a654b817ff784d9a57d594ee18881f8ac" compoundref="_temperature_controller_8cpp" startline="1672" endline="1684">getAlarmCount</referencedby>
        <referencedby refid="class_temperature_controller_1af969846ad52d5698fd7b12428a8ea0a6" compoundref="_temperature_controller_8cpp" startline="1662" endline="1670">getAlarmCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1accf8eda6bd6ed08b84ee839fbb13cc31" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::_handleLowPriorityBlinking</definition>
        <argsstring>()</argsstring>
        <name>_handleLowPriorityBlinking</name>
        <qualifiedname>TemperatureController::_handleLowPriorityBlinking</qualifiedname>
        <briefdescription>
<para>Handle LED blinking for low priority alarms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="717" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1726" bodyend="1743"/>
        <references refid="class_temperature_controller_1aa0d8e0b6828ce6bdfee5b4a9464673e1" compoundref="_temperature_controller_8h" startline="712">_blinkOffTime</references>
        <references refid="class_temperature_controller_1a61fc398934c455ec97bc25d6f3c59868" compoundref="_temperature_controller_8h" startline="711">_blinkOnTime</references>
        <references refid="class_temperature_controller_1a75d981931fe5a8e5e8cc112ec0b1e08a" compoundref="_temperature_controller_8h" startline="710">_lastLowPriorityBlinkTime</references>
        <references refid="class_temperature_controller_1af5585a9f09291fc31296ac04c5de98ae" compoundref="_temperature_controller_8h" startline="709">_lowPriorityBlinkState</references>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a477597992aa9362076843f37b648741a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::_updateAlarmQueues</definition>
        <argsstring>()</argsstring>
        <name>_updateAlarmQueues</name>
        <qualifiedname>TemperatureController::_updateAlarmQueues</qualifiedname>
        <briefdescription>
<para>Update alarm display queues. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="732" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1760" bodyend="1795"/>
        <references refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" compoundref="_temperature_controller_8h" startline="721">_acknowledgedAlarmsQueue</references>
        <references refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" compoundref="_temperature_controller_8h" startline="720">_activeAlarmsQueue</references>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" compoundref="_alarm_8h" startline="49">ACKNOWLEDGED</references>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" compoundref="_alarm_8h" startline="50">ACTIVE</references>
        <references refid="class_temperature_controller_1af58201023d15de003d4f1b9a9771a9e3" compoundref="_temperature_controller_8cpp" startline="327" endline="335">getActiveAlarms</references>
        <references refid="class_alarm_1a7a4a3290a6a659542f82fe08a96736a8" compoundref="_alarm_8h" startline="116" endline="116">Alarm::getTimestamp</references>
        <referencedby refid="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" compoundref="_temperature_controller_8cpp" startline="1746" endline="1758">handleAlarmDisplay</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::_displayNextActiveAlarm</definition>
        <argsstring>()</argsstring>
        <name>_displayNextActiveAlarm</name>
        <qualifiedname>TemperatureController::_displayNextActiveAlarm</qualifiedname>
        <briefdescription>
<para>Display next active alarm in rotation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="737" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1796" bodyend="1819"/>
        <references refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" compoundref="_temperature_controller_8h" startline="720">_activeAlarmsQueue</references>
        <references refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" compoundref="_temperature_controller_8h" startline="722">_currentActiveAlarmIndex</references>
        <references refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" compoundref="_temperature_controller_8h" startline="630">_currentDisplayedAlarm</references>
        <references refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" compoundref="_temperature_controller_8h" startline="632">_showingOK</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::_displayNextAcknowledgedAlarm</definition>
        <argsstring>()</argsstring>
        <name>_displayNextAcknowledgedAlarm</name>
        <qualifiedname>TemperatureController::_displayNextAcknowledgedAlarm</qualifiedname>
        <briefdescription>
<para>Display next acknowledged alarm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="742" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1821" bodyend="1846"/>
        <references refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" compoundref="_temperature_controller_8h" startline="721">_acknowledgedAlarmsQueue</references>
        <references refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" compoundref="_temperature_controller_8h" startline="723">_currentAcknowledgedAlarmIndex</references>
        <references refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" compoundref="_temperature_controller_8h" startline="630">_currentDisplayedAlarm</references>
        <references refid="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" compoundref="_temperature_controller_8h" startline="724">_lastAlarmDisplayTime</references>
        <references refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" compoundref="_temperature_controller_8h" startline="632">_showingOK</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <referencedby refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" compoundref="_temperature_controller_8cpp" startline="1848" endline="1896">_handleAlarmDisplayRotation</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TemperatureController::_handleAlarmDisplayRotation</definition>
        <argsstring>()</argsstring>
        <name>_handleAlarmDisplayRotation</name>
        <qualifiedname>TemperatureController::_handleAlarmDisplayRotation</qualifiedname>
        <briefdescription>
<para>Handle alarm display rotation timing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="747" column="10" bodyfile="src/TemperatureController.cpp" bodystart="1848" bodyend="1896"/>
        <references refid="class_temperature_controller_1ada41526711cb0489adb0714b9ebe5072" compoundref="_temperature_controller_8h" startline="725">_acknowledgedAlarmDisplayDelay</references>
        <references refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" compoundref="_temperature_controller_8h" startline="721">_acknowledgedAlarmsQueue</references>
        <references refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" compoundref="_temperature_controller_8h" startline="720">_activeAlarmsQueue</references>
        <references refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" compoundref="_temperature_controller_8h" startline="723">_currentAcknowledgedAlarmIndex</references>
        <references refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" compoundref="_temperature_controller_8h" startline="722">_currentActiveAlarmIndex</references>
        <references refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" compoundref="_temperature_controller_8h" startline="630">_currentDisplayedAlarm</references>
        <references refid="class_temperature_controller_1aa881d2bbb58b22ac952aa781d997ee01" compoundref="_temperature_controller_8h" startline="726">_displayingActiveAlarm</references>
        <references refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" compoundref="_temperature_controller_8cpp" startline="1821" endline="1846">_displayNextAcknowledgedAlarm</references>
        <references refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" compoundref="_temperature_controller_8cpp" startline="1796" endline="1819">_displayNextActiveAlarm</references>
        <references refid="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" compoundref="_temperature_controller_8h" startline="724">_lastAlarmDisplayTime</references>
        <references refid="class_temperature_controller_1a473053bec0dba7d493499df05cd53fa8" compoundref="_temperature_controller_8h" startline="631">_okDisplayStartTime</references>
        <references refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" compoundref="_temperature_controller_8h" startline="632">_showingOK</references>
        <references refid="class_temperature_controller_1a28e81945f5235e161e6c532b428d36d2" compoundref="_temperature_controller_8cpp" startline="713" endline="717">_showOKAndTurnOffOLED</references>
        <references refid="class_temperature_controller_1a4d36576f7d6ab8f5222a082878314912" compoundref="_temperature_controller_8cpp" startline="702" endline="711">_updateNormalDisplay</references>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" compoundref="_alarm_8h" startline="49">ACKNOWLEDGED</references>
        <references refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" compoundref="_temperature_controller_8h" startline="602">indicator</references>
        <referencedby refid="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" compoundref="_temperature_controller_8cpp" startline="1746" endline="1758">handleAlarmDisplay</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1aa97ba23c998b2cfc732786e2307e60fa" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String TemperatureController::_getPriorityString</definition>
        <argsstring>(AlarmPriority priority) const</argsstring>
        <name>_getPriorityString</name>
        <qualifiedname>TemperatureController::_getPriorityString</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref></type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Get string representation of alarm priority. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> priority enum value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String Priority as string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="754" column="12" bodyfile="src/TemperatureController.cpp" bodystart="1943" bodyend="1951"/>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" compoundref="_alarm_8h" startline="61">PRIORITY_CRITICAL</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" compoundref="_alarm_8h" startline="58">PRIORITY_LOW</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <referencedby refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" compoundref="_temperature_controller_8cpp" startline="1386" endline="1442">addAlarm</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_temperature_controller_1a38e9fe7d49bc58f1c6b5f1021ed1c045" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String TemperatureController::_getAlarmTypeString</definition>
        <argsstring>(AlarmType type) const</argsstring>
        <name>_getAlarmTypeString</name>
        <qualifiedname>TemperatureController::_getAlarmTypeString</qualifiedname>
        <param>
          <type><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Get string representation of alarm type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_alarm" kindref="compound">Alarm</ref> type enum value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>String <ref refid="class_alarm" kindref="compound">Alarm</ref> type as string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TemperatureController.h" line="761" column="12" bodyfile="src/TemperatureController.cpp" bodystart="1933" bodyend="1941"/>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2ab4fed37e8cab6ef5684a361be786d8de" compoundref="_alarm_8h" startline="37">SENSOR_DISCONNECTED</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Main controller for temperature monitoring system. </para>
    </briefdescription>
    <detaileddescription>
<para>Manages temperature sensors, measurement points, alarms, and system configuration. Provides unified interface for sensor operations, alarm handling, and data access. Supports both DS18B20 and PT1000 temperature sensors. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="6">
        <label>Alarm</label>
        <link refid="class_alarm"/>
        <childnode refid="3" relation="usage">
          <edgelabel>-_source</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>IndicatorInterface</label>
        <link refid="class_indicator_interface"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-_instance</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>MeasurementPoint</label>
        <link refid="class_measurement_point"/>
        <childnode refid="4" relation="usage">
          <edgelabel>-boundSensor</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>RegisterMap</label>
        <link refid="class_register_map"/>
      </node>
      <node id="4">
        <label>Sensor</label>
        <link refid="class_sensor"/>
      </node>
      <node id="1">
        <label>TemperatureController</label>
        <link refid="class_temperature_controller"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-indicator</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>-dsPoints</edgelabel>
          <edgelabel>-ptPoints</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>-registerMap</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>-_currentDisplayedAlarm</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/TemperatureController.h" line="46" column="1" bodyfile="include/TemperatureController.h" bodystart="46" bodyend="762"/>
    <listofallmembers>
      <member refid="class_temperature_controller_1ada41526711cb0489adb0714b9ebe5072" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_acknowledgedAlarmDisplayDelay</name></member>
      <member refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_acknowledgedAlarmsQueue</name></member>
      <member refid="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_acknowledgedDelayCritical</name></member>
      <member refid="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_acknowledgedDelayHigh</name></member>
      <member refid="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_acknowledgedDelayLow</name></member>
      <member refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_acknowledgedDelayMedium</name></member>
      <member refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_activeAlarmsQueue</name></member>
      <member refid="class_temperature_controller_1a719eec89a0099b13656f3125c9e8c69f" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_alarmCheckInterval</name></member>
      <member refid="class_temperature_controller_1aa0d8e0b6828ce6bdfee5b4a9464673e1" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_blinkOffTime</name></member>
      <member refid="class_temperature_controller_1a61fc398934c455ec97bc25d6f3c59868" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_blinkOnTime</name></member>
      <member refid="class_temperature_controller_1aec910974cd40cafef22d5e5c5e730512" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_blueLedState</name></member>
      <member refid="class_temperature_controller_1a3a9321a93beb0b9e3769ae303097103c" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_buttonDebounceDelay</name></member>
      <member refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_checkButtonPress</name></member>
      <member refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_checkPointForAlarms</name></member>
      <member refid="class_temperature_controller_1a407b33d4603eaf6dd9623e86fdc7bf56" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_comparePriority</name></member>
      <member refid="class_temperature_controller_1a8dc59c2f0f60d4491da64b0c427312b5" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_compareStage</name></member>
      <member refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_configuredAlarms</name></member>
      <member refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_currentAcknowledgedAlarmIndex</name></member>
      <member refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_currentActiveAlarmIndex</name></member>
      <member refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_currentDisplayedAlarm</name></member>
      <member refid="class_temperature_controller_1aa881d2bbb58b22ac952aa781d997ee01" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_displayingActiveAlarm</name></member>
      <member refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_displayNextAcknowledgedAlarm</name></member>
      <member refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_displayNextActiveAlarm</name></member>
      <member refid="class_temperature_controller_1a38e9fe7d49bc58f1c6b5f1021ed1c045" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_getAlarmTypeString</name></member>
      <member refid="class_temperature_controller_1aa97ba23c998b2cfc732786e2307e60fa" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_getPriorityString</name></member>
      <member refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_handleAlarmDisplayRotation</name></member>
      <member refid="class_temperature_controller_1accf8eda6bd6ed08b84ee839fbb13cc31" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_handleLowPriorityBlinking</name></member>
      <member refid="class_temperature_controller_1a4e75dbef3c1ce99afd4ec8e71102e836" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_hasAlarmForPoint</name></member>
      <member refid="class_temperature_controller_1ac0cd8ac0fd76c008b3af737f12467e32" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_lastAlarmCheck</name></member>
      <member refid="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_lastAlarmDisplayTime</name></member>
      <member refid="class_temperature_controller_1a669c6e7452f2bbd21b16b97b0de228cc" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_lastButtonPressTime</name></member>
      <member refid="class_temperature_controller_1a6ffb5c63a3108e25e3224b77e0a661dc" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_lastButtonState</name></member>
      <member refid="class_temperature_controller_1a75d981931fe5a8e5e8cc112ec0b1e08a" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_lastLowPriorityBlinkTime</name></member>
      <member refid="class_temperature_controller_1af5585a9f09291fc31296ac04c5de98ae" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_lowPriorityBlinkState</name></member>
      <member refid="class_temperature_controller_1a473053bec0dba7d493499df05cd53fa8" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_okDisplayStartTime</name></member>
      <member refid="class_temperature_controller_1a01c4086be4fa74e89b108428ac3756ea" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_redLedState</name></member>
      <member refid="class_temperature_controller_1ac2b7ce0afccac7602505ab0bd3916562" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_relay1State</name></member>
      <member refid="class_temperature_controller_1a3af25b4c386c13c4e1c49f50d67c705b" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_relay2State</name></member>
      <member refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_showingOK</name></member>
      <member refid="class_temperature_controller_1a28e81945f5235e161e6c532b428d36d2" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_showOKAndTurnOffOLED</name></member>
      <member refid="class_temperature_controller_1a477597992aa9362076843f37b648741a" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_updateAlarmQueues</name></member>
      <member refid="class_temperature_controller_1a4d36576f7d6ab8f5222a082878314912" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_updateNormalDisplay</name></member>
      <member refid="class_temperature_controller_1ada44ea25043f4cc35dd01cad67979acf" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>_yellowLedState</name></member>
      <member refid="class_temperature_controller_1ae1ac307e5332c85a007b38a484b8a1c7" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>acknowledgeAllAlarms</name></member>
      <member refid="class_temperature_controller_1a5f1c8fce1e5efb637bfe86bdb609a3b7" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>acknowledgeHighestPriorityAlarm</name></member>
      <member refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>addAlarm</name></member>
      <member refid="class_temperature_controller_1aafd155cdb06d2f411d3640df99815246" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>addSensor</name></member>
      <member refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>applyAcknowledgedDelaysToAlarms</name></member>
      <member refid="class_temperature_controller_1aabd7eb98840e80fc7d07eb04a926a7b1" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>applyConfigFromRegisterMap</name></member>
      <member refid="class_temperature_controller_1a43b97d23bcdea11dc4073bcd412a5334" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>applyConfigToRegisterMap</name></member>
      <member refid="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>begin</name></member>
      <member refid="class_temperature_controller_1af4ab2c7b7a3934ab7837603a420b1ae2" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>bindSensorToPointByBusNumber</name></member>
      <member refid="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>bindSensorToPointByChipSelect</name></member>
      <member refid="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>bindSensorToPointByRom</name></member>
      <member refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>chipSelectPin</name></member>
      <member refid="class_temperature_controller_1aa547daf7d44ea3214e0a2977f7f72cc6" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>clearConfiguredAlarms</name></member>
      <member refid="class_temperature_controller_1ac5f5cdf881ddf8a0d3c4d8460db0ce1e" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>clearResolvedAlarms</name></member>
      <member refid="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>createAlarm</name></member>
      <member refid="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>dallasSensors</name></member>
      <member refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>deviceId</name></member>
      <member refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>discoverDS18B20Sensors</name></member>
      <member refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>discoverPTSensors</name></member>
      <member refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>dsPoints</name></member>
      <member refid="class_temperature_controller_1ad174e0411bd48422d8e3812fd28a7a0b" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>ensureAlarmsForPoint</name></member>
      <member refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>findAlarm</name></member>
      <member refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>findSensorByChipSelect</name></member>
      <member refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>findSensorByRom</name></member>
      <member refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>firmwareVersion</name></member>
      <member refid="class_temperature_controller_1a565a282c8a8330005545d92686ae8a01" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAcknowledgedDelayCritical</name></member>
      <member refid="class_temperature_controller_1a90a8e6caf82ff5bdd1077b444c0c08d1" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAcknowledgedDelayHigh</name></member>
      <member refid="class_temperature_controller_1a81aeb69dc3a9e3bda9f06dcdcc567626" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAcknowledgedDelayLow</name></member>
      <member refid="class_temperature_controller_1a9e1bfe23a47e8323e6fd50e1cf6ceafc" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAcknowledgedDelayMedium</name></member>
      <member refid="class_temperature_controller_1af58201023d15de003d4f1b9a9771a9e3" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getActiveAlarms</name></member>
      <member refid="class_temperature_controller_1a0bd06377ae255b55a39e1fe3a44be4a9" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAlarmByIndex</name></member>
      <member refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAlarmCount</name></member>
      <member refid="class_temperature_controller_1a7c12e116a7b79d1a103223a3caeb5cc7" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAlarmCount</name></member>
      <member refid="class_temperature_controller_1af969846ad52d5698fd7b12428a8ea0a6" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAlarmCount</name></member>
      <member refid="class_temperature_controller_1a654b817ff784d9a57d594ee18881f8ac" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAlarmCount</name></member>
      <member refid="class_temperature_controller_1a880028883101197527de57f626e14512" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAlarmsForPoint</name></member>
      <member refid="class_temperature_controller_1a77429353a869859ddea4f5b92ede2f52" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getAlarmsJson</name></member>
      <member refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getBoundSensor</name></member>
      <member refid="class_temperature_controller_1a30507c056721b411284326837ccdee0b" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getConfiguredAlarms</name></member>
      <member refid="class_temperature_controller_1a3cd823f5e8f7eb810c4a2a212c5ee571" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getDeviceId</name></member>
      <member refid="class_temperature_controller_1a9ac5f76def1895a8c8f8f92ce8cd2e5c" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getDS18B20Count</name></member>
      <member refid="class_temperature_controller_1a08489239b3da4d3f243b98e201f84240" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getDS18B20Point</name></member>
      <member refid="class_temperature_controller_1a88ff416e5562313759bd3a11112e252c" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getFirmwareVersion</name></member>
      <member refid="class_temperature_controller_1abb3d16c1efa5754a2e64b5dc5dd4f4cc" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getHighestPriorityAlarm</name></member>
      <member refid="class_temperature_controller_1a7465ffc80f89d566d53e97e4192a511f" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getMeasurementPeriod</name></member>
      <member refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getMeasurementPoint</name></member>
      <member refid="class_temperature_controller_1aa4746563f439c7a0647d7932acd9ab04" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getOneWirePin</name></member>
      <member refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getPointsJson</name></member>
      <member refid="class_temperature_controller_1a6ab2ecc10c283d75d948ce6f1ad723a6" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getPT1000Count</name></member>
      <member refid="class_temperature_controller_1a65c97fc6555937166fc8d12d09d47966" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getPT1000Point</name></member>
      <member refid="class_temperature_controller_1a80552172d64d7536490e5f6320c10941" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getRegisterMap</name></member>
      <member refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getSensorBus</name></member>
      <member refid="class_temperature_controller_1a6ba00434153159c1589cbdd0129229d4" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getSensorByIndex</name></member>
      <member refid="class_temperature_controller_1a0b3475ae1531237b04fb6719055a70de" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getSensorCount</name></member>
      <member refid="class_temperature_controller_1a58f7a683f6e4c08dbfdfc43c1e740f15" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getSensorsJson</name></member>
      <member refid="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>getSystemStatusJson</name></member>
      <member refid="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>handleAlarmDisplay</name></member>
      <member refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>handleAlarmOutputs</name></member>
      <member refid="class_temperature_controller_1abc85cc6707cb18ce74f3daae2cd9ade0" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>handleCriticalAlarms</name></member>
      <member refid="class_temperature_controller_1a1f106cc848aa45ecd8d9ab4808aef6d1" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>handleHighPriorityAlarms</name></member>
      <member refid="class_temperature_controller_1a16cb79caee63ec4acdd539adbb74ba40" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>handleLowPriorityAlarms</name></member>
      <member refid="class_temperature_controller_1a7da957a2899fb3b47d94d279c2099ca2" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>handleMediumPriorityAlarms</name></member>
      <member refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>indicator</name></member>
      <member refid="class_temperature_controller_1ad322a5bab8d5788a586206004248f673" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>isDS18B20Address</name></member>
      <member refid="class_temperature_controller_1a13125ddcf29cb56d27403818543618af" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>isPT1000Address</name></member>
      <member refid="class_temperature_controller_1a3ff7f1160c2963542fad31e191dea524" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>lastMeasurementTime</name></member>
      <member refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>measurementPeriodSeconds</name></member>
      <member refid="class_temperature_controller_1a294885ee4b12079b9135f2eb884b5284" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>oneWireBuses</name></member>
      <member refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>oneWireBusPin</name></member>
      <member refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>ptPoints</name></member>
      <member refid="class_temperature_controller_1a11948a87fe7df37543b86ecdd488b341" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>readAllPoints</name></member>
      <member refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>registerMap</name></member>
      <member refid="class_temperature_controller_1ac39c426da2e1f9dff4abe1d9b550b723" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>removeAlarm</name></member>
      <member refid="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>removeSensorByRom</name></member>
      <member refid="class_temperature_controller_1a1ecad2d878922493c93fe9baa9be10d3" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>resetMinMaxValues</name></member>
      <member refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>sensors</name></member>
      <member refid="class_temperature_controller_1a1cf2a33257d4f089a304859b975663c3" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>setAcknowledgedDelayCritical</name></member>
      <member refid="class_temperature_controller_1a365ac98348ce12de8938a687744c9f6c" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>setAcknowledgedDelayHigh</name></member>
      <member refid="class_temperature_controller_1a87eeba5b5182d712bd9c361f37b933a8" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>setAcknowledgedDelayLow</name></member>
      <member refid="class_temperature_controller_1a148e97ba76cb6bf3d3f45ddefe715320" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>setAcknowledgedDelayMedium</name></member>
      <member refid="class_temperature_controller_1a5a9f98c140498fee9a3dba8f8af1cb49" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>setDeviceId</name></member>
      <member refid="class_temperature_controller_1a42c32522acc809f03f33d8d98414e793" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>setFirmwareVersion</name></member>
      <member refid="class_temperature_controller_1a08f5d97d74f6364588cf22dadd9a746e" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>setMeasurementPeriod</name></member>
      <member refid="class_temperature_controller_1af8bbcc01e36ebbabd6f9913280fc217f" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>setOneWireBusPin</name></member>
      <member refid="class_temperature_controller_1a0156a803f4fdaffbe59e3842647a608f" prot="private" virt="non-virtual"><scope>TemperatureController</scope><name>systemInitialized</name></member>
      <member refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>TemperatureController</name></member>
      <member refid="class_temperature_controller_1a261c9b96540ec6680dfffd3a26e4ca00" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>unbindSensorFromPoint</name></member>
      <member refid="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>unbindSensorFromPointBySensor</name></member>
      <member refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>update</name></member>
      <member refid="class_temperature_controller_1a93bd31914a054a4e1df9be7e3966b82e" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>updateAlarm</name></member>
      <member refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>updateAlarms</name></member>
      <member refid="class_temperature_controller_1a23dca296a268baa9b8234c8bf9cf0c3e" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>updateAllSensors</name></member>
      <member refid="class_temperature_controller_1a62b93899a3b8b55e2e0bd933520c2892" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>updateRegisterMap</name></member>
      <member refid="class_temperature_controller_1aef5bd09c962b81966e67329afcff193d" prot="public" virt="non-virtual"><scope>TemperatureController</scope><name>~TemperatureController</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
