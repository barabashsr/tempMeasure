<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="_temperature_controller_8cpp" kind="file" language="C++">
    <compoundname>TemperatureController.cpp</compoundname>
    <includes refid="_temperature_controller_8h" local="yes">TemperatureController.h</includes>
    <incdepgraph>
      <node id="27">
        <label>Alarm.h</label>
        <link refid="_alarm_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>IndicatorInterface.h</label>
        <link refid="_indicator_interface_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>LoggerManager.h</label>
        <link refid="_logger_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>MeasurementPoint.h</label>
        <link refid="_measurement_point_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>RegisterMap.h</label>
        <link refid="_register_map_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Sensor.h</label>
        <link refid="_sensor_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TemperatureController.h</label>
        <link refid="_temperature_controller_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>TimeManager.h</label>
        <link refid="_time_manager_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/TemperatureController.cpp</label>
        <link refid="_temperature_controller_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Adafruit_MAX31865.h</label>
      </node>
      <node id="3">
        <label>Arduino.h</label>
      </node>
      <node id="19">
        <label>ArduinoJson.h</label>
      </node>
      <node id="7">
        <label>DallasTemperature.h</label>
      </node>
      <node id="11">
        <label>FS.h</label>
      </node>
      <node id="17">
        <label>NTPClient.h</label>
      </node>
      <node id="6">
        <label>OneWire.h</label>
      </node>
      <node id="25">
        <label>PCF8575.h</label>
      </node>
      <node id="16">
        <label>RTClib.h</label>
      </node>
      <node id="12">
        <label>SD.h</label>
      </node>
      <node id="26">
        <label>U8g2lib.h</label>
      </node>
      <node id="14">
        <label>WiFi.h</label>
      </node>
      <node id="18">
        <label>WiFiUdp.h</label>
      </node>
      <node id="15">
        <label>Wire.h</label>
      </node>
      <node id="28">
        <label>algorithm</label>
      </node>
      <node id="23">
        <label>map</label>
      </node>
      <node id="21">
        <label>stdint.h</label>
      </node>
      <node id="24">
        <label>string</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
<para>Implementation of the central temperature monitoring and control system. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Claude Code Session 20250720_221011 </para>
</simplesect>
<simplesect kind="date"><para>2025-01-20</para>
</simplesect>
Implements temperature sensor management, measurement point control, alarm processing, and system configuration for the temperature monitoring system.</para>
<sect1 id="_time_manager_8cpp_1dependencies">
<title>Dependencies</title><para><itemizedlist>
<listitem><para>OneWire library for DS18B20 communication</para>
</listitem><listitem><para>DallasTemperature for DS18B20 sensor interface</para>
</listitem><listitem><para>ArduinoJson for JSON serialization</para>
</listitem><listitem><para>Custom sensor and alarm implementations</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="_time_manager_8cpp_1hardware">
<title>Hardware Requirements</title><para><itemizedlist>
<listitem><para>4 OneWire buses supporting up to 50 DS18B20 sensors</para>
</listitem><listitem><para>4 SPI chip select lines for up to 10 PT1000 sensors</para>
</listitem><listitem><para>LED indicators and relay outputs for alarm signaling</para>
</listitem><listitem><para>OLED display for status and alarm visualization </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_temperature_controller_8h" kindref="compound">TemperatureController.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" refkind="member"><highlight class="normal"><ref refid="class_temperature_controller_1a8ef0e85f95cba61adc37f6d85ff7fb3f" kindref="member">TemperatureController::TemperatureController</ref>(uint8_t<sp/>oneWirePin[4],<sp/>uint8_t<sp/>csPin[4],<sp/><ref refid="class_indicator_interface" kindref="compound">IndicatorInterface</ref>&amp;<sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">:<sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>(<ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>),<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" kindref="member">measurementPeriodSeconds</ref>(10),<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" kindref="member">deviceId</ref>(1),<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" kindref="member">firmwareVersion</ref>(0x0100),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="class_temperature_controller_1a3ff7f1160c2963542fad31e191dea524" kindref="member">lastMeasurementTime</ref>(0),<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="class_temperature_controller_1a0156a803f4fdaffbe59e3842647a608f" kindref="member">systemInitialized</ref>(false),<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="class_temperature_controller_1ac0cd8ac0fd76c008b3af737f12467e32" kindref="member">_lastAlarmCheck</ref>(0),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="class_temperature_controller_1a6ffb5c63a3108e25e3224b77e0a661dc" kindref="member">_lastButtonState</ref>(false),<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="class_temperature_controller_1a669c6e7452f2bbd21b16b97b0de228cc" kindref="member">_lastButtonPressTime</ref>(0),<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref>(nullptr),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="class_temperature_controller_1a473053bec0dba7d493499df05cd53fa8" kindref="member">_okDisplayStartTime</ref>(0),<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" kindref="member">_showingOK</ref>(false),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref>(0),<sp/><ref refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" kindref="member">_currentAcknowledgedAlarmIndex</ref>(0),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" kindref="member">_lastAlarmDisplayTime</ref>(0),<sp/><ref refid="class_temperature_controller_1ada41526711cb0489adb0714b9ebe5072" kindref="member">_acknowledgedAlarmDisplayDelay</ref>(5000),<sp/></highlight><highlight class="comment">//<sp/>5<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="class_temperature_controller_1aa881d2bbb58b22ac952aa781d997ee01" kindref="member">_displayingActiveAlarm</ref>(false)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>measurement<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i]<sp/>=<sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>(i,<sp/></highlight><highlight class="stringliteral">&quot;DS18B20_Point_&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(i));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i]<sp/>=<sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>(50<sp/>+<sp/>i,<sp/></highlight><highlight class="stringliteral">&quot;PT1000_Point_&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(i));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>bus<sp/>pins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" kindref="member">oneWireBusPin</ref>[i]<sp/>=<sp/>oneWirePin[i];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" kindref="member">chipSelectPin</ref>[i]<sp/>=<sp/>csPin[i];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>OneWire<sp/>buses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a294885ee4b12079b9135f2eb884b5284" kindref="member">oneWireBuses</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>OneWire(<ref refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" kindref="member">oneWireBusPin</ref>[i]);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" kindref="member">dallasSensors</ref>[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>DallasTemperature(<ref refid="class_temperature_controller_1a294885ee4b12079b9135f2eb884b5284" kindref="member">oneWireBuses</ref>[i]);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_temperature_controller_1aef5bd09c962b81966e67329afcff193d" refkind="member"><highlight class="normal"><ref refid="class_temperature_controller_1aef5bd09c962b81966e67329afcff193d" kindref="member">TemperatureController::~TemperatureController</ref>()<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>sensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sensor<sp/>:<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>sensor;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>.clear();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>OneWire<sp/>buses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" kindref="member">dallasSensors</ref>[i];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a294885ee4b12079b9135f2eb884b5284" kindref="member">oneWireBuses</ref>[i];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>configured<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>alarm;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.clear();</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1af59d6d6d48ed8ddfb968a1fa2dce6768" kindref="member">TemperatureController::begin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>register<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.writeHoldingRegister(0,<sp/><ref refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" kindref="member">deviceId</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.writeHoldingRegister(1,<sp/><ref refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" kindref="member">firmwareVersion</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.writeHoldingRegister(2,<sp/>0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.writeHoldingRegister(3,<sp/>0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>4;<sp/>i<sp/>&lt;=<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.writeHoldingRegister(i,<sp/>0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Discovering<sp/>sensors...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" kindref="member">discoverPTSensors</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Setting<sp/>HMI...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>indicator<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.begin())<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>indicator<sp/>interface!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>ports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setDirection(0b0000000011111111);<sp/></highlight><highlight class="comment">//<sp/>P0-P7<sp/>as<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>port<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortName(</highlight><highlight class="stringliteral">&quot;BUTTON&quot;</highlight><highlight class="normal">,<sp/>15);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortName(</highlight><highlight class="stringliteral">&quot;Relay1&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortName(</highlight><highlight class="stringliteral">&quot;Relay2&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortName(</highlight><highlight class="stringliteral">&quot;Relay3&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortName(</highlight><highlight class="stringliteral">&quot;GreenLED&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortName(</highlight><highlight class="stringliteral">&quot;BlueLED&quot;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortName(</highlight><highlight class="stringliteral">&quot;YellowLED&quot;</highlight><highlight class="normal">,<sp/>6);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortName(</highlight><highlight class="stringliteral">&quot;RedLED&quot;</highlight><highlight class="normal">,<sp/>7);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>individual<sp/>port<sp/>inversion<sp/>for<sp/>ULN2803</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortInverted(</highlight><highlight class="stringliteral">&quot;Relay1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortInverted(</highlight><highlight class="stringliteral">&quot;Relay2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortInverted(</highlight><highlight class="stringliteral">&quot;Relay3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortInverted(</highlight><highlight class="stringliteral">&quot;GreenLED&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortInverted(</highlight><highlight class="stringliteral">&quot;BlueLED&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortInverted(</highlight><highlight class="stringliteral">&quot;YellowLED&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortInverted(</highlight><highlight class="stringliteral">&quot;RedLED&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setPortInverted(</highlight><highlight class="stringliteral">&quot;BUTTON&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>off<sp/>all<sp/>LEDs<sp/>initially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setAllOutputsLow();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>interrupt<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setInterruptCallback([](uint16_t<sp/>currentState,<sp/>uint16_t<sp/>changedPins)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;PCF8575<sp/>Interrupt<sp/>-<sp/>State:<sp/>0x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(currentState,<sp/>HEX);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;,<sp/>Changed:<sp/>0x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(changedPins,<sp/>HEX);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>normal<sp/>operation<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setOledMode(3);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.writePort(</highlight><highlight class="stringliteral">&quot;GreenLED&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Normal<sp/>operation<sp/>LED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a0156a803f4fdaffbe59e3842647a608f" kindref="member">systemInitialized</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Setup<sp/>complete!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.printConfiguration();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;SYSTEM&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TemperatureController<sp/>started&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" kindref="member">TemperatureController::update</ref>()<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a23dca296a268baa9b8234c8bf9cf0c3e" kindref="member">updateAllSensors</ref>();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a11948a87fe7df37543b86ecdd488b341" kindref="member">readAllPoints</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>PCF8575<sp/>interrupts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.handleInterrupt();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>alarm<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" kindref="member">updateAlarms</ref>();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>button<sp/>presses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" kindref="member">_checkButtonPress</ref>();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>alarm<sp/>display<sp/>and<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" kindref="member">handleAlarmDisplay</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" kindref="member">handleAlarmOutputs</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>OLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.update();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1a0156a803f4fdaffbe59e3842647a608f" kindref="member">systemInitialized</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentTime<sp/>-<sp/><ref refid="class_temperature_controller_1a3ff7f1160c2963542fad31e191dea524" kindref="member">lastMeasurementTime</ref><sp/>&gt;=<sp/><ref refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" kindref="member">measurementPeriodSeconds</ref><sp/>*<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a62b93899a3b8b55e2e0bd933520c2892" kindref="member">updateRegisterMap</ref>();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a3ff7f1160c2963542fad31e191dea524" kindref="member">lastMeasurementTime</ref><sp/>=<sp/>currentTime;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//applyConfigFromRegisterMap();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Alarm<sp/>Management<sp/>Methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a5ac8af90de5dfd79a9a2e4c7270a98a3" kindref="member">TemperatureController::updateAlarms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentTime<sp/>-<sp/><ref refid="class_temperature_controller_1ac0cd8ac0fd76c008b3af737f12467e32" kindref="member">_lastAlarmCheck</ref><sp/>&lt;<sp/><ref refid="class_temperature_controller_1a719eec89a0099b13656f3125c9e8c69f" kindref="member">_alarmCheckInterval</ref>)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1ac0cd8ac0fd76c008b3af737f12467e32" kindref="member">_lastAlarmCheck</ref><sp/>=<sp/>currentTime;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;===<sp/>Checking<sp/>alarms<sp/>with<sp/>fresh<sp/>sensor<sp/>data<sp/>===&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>all<sp/>measurement<sp/>points<sp/>for<sp/>NEW<sp/>alarm<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].<ref refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" kindref="member">getBoundSensor</ref>()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;DS<sp/>Point<sp/>%d:<sp/>Temp=%d,<sp/>High=%d,<sp/>Low=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].getCurrentTemp(),</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].getHighAlarmThreshold(),</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].getLowAlarmThreshold());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_checkPointForAlarms(&amp;dsPoints[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i].<ref refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" kindref="member">getBoundSensor</ref>()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;PT<sp/>Point<sp/>%d:<sp/>Temp=%d,<sp/>High=%d,<sp/>Low=%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i].getCurrentTemp(),</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i].getHighAlarmThreshold(),</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i].getLowAlarmThreshold());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_checkPointForAlarms(&amp;ptPoints[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>existing<sp/>configured<sp/>alarms<sp/>(do<sp/>NOT<sp/>remove<sp/>resolved<sp/>alarms)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;===<sp/>Updating<sp/>existing<sp/>alarms<sp/>===&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;isEnabled())<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;updateCondition();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>NOT<sp/>check<sp/>for<sp/>resolved<sp/>state<sp/>or<sp/>remove<sp/>alarms<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>alarms<sp/>by<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(<ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.begin(),<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.end(),<sp/><ref refid="struct_alarm_comparator" kindref="compound">AlarmComparator</ref>());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Active<sp/>alarms<sp/>count:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_temperature_controller_1af58201023d15de003d4f1b9a9771a9e3" kindref="member">getActiveAlarms</ref>().size());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Debug:<sp/>Print<sp/>all<sp/>current<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;isEnabled())<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Alarm:<sp/>%s,<sp/>Stage:<sp/>%s,<sp/>Point:<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;getTypeString().c_str(),</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;getStageString().c_str(),</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;getSource()<sp/>?<sp/>alarm-&gt;getSource()-&gt;getAddress()<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" kindref="member">TemperatureController::_checkPointForAlarms</ref>(<ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!point<sp/>||<sp/>!point-&gt;<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>high<sp/>temperature<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point-&gt;<ref refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" kindref="member">getCurrentTemp</ref>()<sp/>&gt;=<sp/>point-&gt;<ref refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" kindref="member">getHighAlarmThreshold</ref>())<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1a4e75dbef3c1ce99afd4ec8e71102e836" kindref="member">_hasAlarmForPoint</ref>(point,<sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" kindref="member">AlarmType::HIGH_TEMPERATURE</ref>))<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" kindref="member">createAlarm</ref>(<ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" kindref="member">AlarmType::HIGH_TEMPERATURE</ref>,<sp/>point,<sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" kindref="member">AlarmPriority::PRIORITY_HIGH</ref>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>low<sp/>temperature<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point-&gt;<ref refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" kindref="member">getCurrentTemp</ref>()<sp/>&lt;=<sp/>point-&gt;<ref refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" kindref="member">getLowAlarmThreshold</ref>())<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1a4e75dbef3c1ce99afd4ec8e71102e836" kindref="member">_hasAlarmForPoint</ref>(point,<sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" kindref="member">AlarmType::LOW_TEMPERATURE</ref>))<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" kindref="member">createAlarm</ref>(<ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" kindref="member">AlarmType::LOW_TEMPERATURE</ref>,<sp/>point,<sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" kindref="member">AlarmPriority::PRIORITY_MEDIUM</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>sensor<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point-&gt;<ref refid="class_measurement_point_1a3fb0693931f12190a7f96e5d6be51b51" kindref="member">getErrorStatus</ref>()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1a4e75dbef3c1ce99afd4ec8e71102e836" kindref="member">_hasAlarmForPoint</ref>(point,<sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" kindref="member">AlarmType::SENSOR_ERROR</ref>))<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" kindref="member">createAlarm</ref>(<ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" kindref="member">AlarmType::SENSOR_ERROR</ref>,<sp/>point,<sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" kindref="member">AlarmPriority::PRIORITY_HIGH</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="class_temperature_controller_1a4e75dbef3c1ce99afd4ec8e71102e836" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a4e75dbef3c1ce99afd4ec8e71102e836" kindref="member">TemperatureController::_hasAlarmForPoint</ref>(<ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point,<sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getSource()<sp/>==<sp/>point<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;getType()<sp/>==<sp/>type<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;isEnabled()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;isActive())<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" kindref="member">TemperatureController::createAlarm</ref>(<ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref><sp/>type,<sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>source,<sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref><sp/>priority)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>this<sp/>alarm<sp/>already<sp/>exists<sp/>in<sp/>configured<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>configKey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;alarm_&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(source-&gt;<ref refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" kindref="member">getAddress</ref>())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getConfigKey()<sp/>==<sp/>configKey)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Alarm<sp/>already<sp/>exists,<sp/>just<sp/>enable<sp/>it<sp/>if<sp/>it&apos;s<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!alarm-&gt;isEnabled())<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;setEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;setStage(<ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba24d459a81449d7210c8f9a86c2913034" kindref="member">AlarmStage::NEW</ref>);<sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>stage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>alarm<sp/>and<sp/>add<sp/>to<sp/>configured<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>newAlarm<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>(type,<sp/>source,<sp/>priority);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>newAlarm-&gt;<ref refid="class_alarm_1ad116a3e8b622810e1769568fbac16379" kindref="member">setConfigKey</ref>(configKey);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.push_back(newAlarm);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>alarms<sp/>by<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(<ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.begin(),<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.end(),<sp/><ref refid="struct_alarm_comparator" kindref="compound">AlarmComparator</ref>());</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="class_temperature_controller_1abb3d16c1efa5754a2e64b5dc5dd4f4cc" refkind="member"><highlight class="normal"><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/><ref refid="class_temperature_controller_1abb3d16c1efa5754a2e64b5dc5dd4f4cc" kindref="member">TemperatureController::getHighestPriorityAlarm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;isEnabled()<sp/>&amp;&amp;<sp/>alarm-&gt;isActive())<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarm;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="class_temperature_controller_1a5f1c8fce1e5efb637bfe86bdb609a3b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a5f1c8fce1e5efb637bfe86bdb609a3b7" kindref="member">TemperatureController::acknowledgeHighestPriorityAlarm</ref>()<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>alarm<sp/>=<sp/><ref refid="class_temperature_controller_1abb3d16c1efa5754a2e64b5dc5dd4f4cc" kindref="member">getHighestPriorityAlarm</ref>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;<ref refid="class_alarm_1aa14f5a764303b269f04573867e2e4fc8" kindref="member">acknowledge</ref>();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Alarm<sp/>acknowledged:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>alarm-&gt;<ref refid="class_alarm_1adaf4b74537e11d5643ba5a8ae07fe10e" kindref="member">getStatusText</ref>().c_str());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="class_temperature_controller_1ae1ac307e5332c85a007b38a484b8a1c7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1ae1ac307e5332c85a007b38a484b8a1c7" kindref="member">TemperatureController::acknowledgeAllAlarms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;isEnabled()<sp/>&amp;&amp;<sp/>alarm-&gt;isActive()<sp/>&amp;&amp;<sp/>!alarm-&gt;isAcknowledged())<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;acknowledge();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="class_temperature_controller_1af58201023d15de003d4f1b9a9771a9e3" refkind="member"><highlight class="normal">std::vector&lt;Alarm*&gt;<sp/><ref refid="class_temperature_controller_1af58201023d15de003d4f1b9a9771a9e3" kindref="member">TemperatureController::getActiveAlarms</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Alarm*&gt;<sp/>activeAlarms;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;isEnabled()<sp/>&amp;&amp;<sp/>alarm-&gt;isActive())<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activeAlarms.push_back(alarm);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>activeAlarms;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="class_temperature_controller_1ac5f5cdf881ddf8a0d3c4d8460db0ce1e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1ac5f5cdf881ddf8a0d3c4d8460db0ce1e" kindref="member">TemperatureController::clearResolvedAlarms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.end();)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;isResolved())<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>==<sp/>*it)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Manually<sp/>clearing<sp/>resolved<sp/>alarm:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>(*it)-&gt;getConfigKey().c_str());</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.erase(it);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="class_temperature_controller_1aa547daf7d44ea3214e0a2977f7f72cc6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1aa547daf7d44ea3214e0a2977f7f72cc6" kindref="member">TemperatureController::clearConfiguredAlarms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.end();)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>==<sp/>*it)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Manually<sp/>clearing<sp/>resolved<sp/>alarm:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>(*it)-&gt;getConfigKey().c_str());</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.erase(it);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="class_temperature_controller_1ad174e0411bd48422d8e3812fd28a7a0b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1ad174e0411bd48422d8e3812fd28a7a0b" kindref="member">TemperatureController::ensureAlarmsForPoint</ref>(<ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!point)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>address<sp/>=<sp/>point-&gt;<ref refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" kindref="member">getAddress</ref>();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>and<sp/>create<sp/>LOW_TEMPERATURE<sp/>alarm<sp/>if<sp/>not<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>lowKey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(address)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_LOW_TEMP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" kindref="member">findAlarm</ref>(lowKey))<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>lowAlarm<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>(<ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" kindref="member">AlarmType::LOW_TEMPERATURE</ref>,<sp/>point);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowAlarm-&gt;<ref refid="class_alarm_1ad116a3e8b622810e1769568fbac16379" kindref="member">setConfigKey</ref>(lowKey);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowAlarm-&gt;<ref refid="class_alarm_1a5095c54c304a52ebbaca5a2ea74059cd" kindref="member">setPriority</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" kindref="member">AlarmPriority::PRIORITY_MEDIUM</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowAlarm-&gt;<ref refid="class_alarm_1acb8f203b2e2317c1f835bb4b19123f3f" kindref="member">setEnabled</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.push_back(lowAlarm);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Created<sp/>LOW_TEMPERATURE<sp/>alarm<sp/>for<sp/>point<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>address);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>and<sp/>create<sp/>HIGH_TEMPERATURE<sp/>alarm<sp/>if<sp/>not<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>highKey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(address)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_HIGH_TEMP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" kindref="member">findAlarm</ref>(highKey))<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>highAlarm<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>(<ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" kindref="member">AlarmType::HIGH_TEMPERATURE</ref>,<sp/>point);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highAlarm-&gt;<ref refid="class_alarm_1ad116a3e8b622810e1769568fbac16379" kindref="member">setConfigKey</ref>(highKey);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highAlarm-&gt;<ref refid="class_alarm_1a5095c54c304a52ebbaca5a2ea74059cd" kindref="member">setPriority</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" kindref="member">AlarmPriority::PRIORITY_MEDIUM</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highAlarm-&gt;<ref refid="class_alarm_1acb8f203b2e2317c1f835bb4b19123f3f" kindref="member">setEnabled</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.push_back(highAlarm);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Created<sp/>HIGH_TEMPERATURE<sp/>alarm<sp/>for<sp/>point<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>address);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>and<sp/>create<sp/>SENSOR_ERROR<sp/>alarm<sp/>if<sp/>not<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>errorKey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;P&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(address)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_SENSOR_ERROR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" kindref="member">findAlarm</ref>(errorKey))<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>errorAlarm<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>(<ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" kindref="member">AlarmType::SENSOR_ERROR</ref>,<sp/>point);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorAlarm-&gt;<ref refid="class_alarm_1ad116a3e8b622810e1769568fbac16379" kindref="member">setConfigKey</ref>(errorKey);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorAlarm-&gt;<ref refid="class_alarm_1a5095c54c304a52ebbaca5a2ea74059cd" kindref="member">setPriority</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" kindref="member">AlarmPriority::PRIORITY_HIGH</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>high<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errorAlarm-&gt;<ref refid="class_alarm_1acb8f203b2e2317c1f835bb4b19123f3f" kindref="member">setEnabled</ref>(point-&gt;<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>Auto-enable<sp/>if<sp/>sensor<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.push_back(errorAlarm);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Created<sp/>SENSOR_ERROR<sp/>alarm<sp/>for<sp/>point<sp/>%d<sp/>(enabled=%d)\n&quot;</highlight><highlight class="normal">,<sp/>address,<sp/>point-&gt;<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="class_temperature_controller_1a880028883101197527de57f626e14512" refkind="member"><highlight class="normal">std::vector&lt;Alarm*&gt;<sp/><ref refid="class_temperature_controller_1a880028883101197527de57f626e14512" kindref="member">TemperatureController::getAlarmsForPoint</ref>(<ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Alarm*&gt;<sp/>alarms;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!point)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarms;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>address<sp/>=<sp/>point-&gt;<ref refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" kindref="member">getAddress</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getSource()<sp/>==<sp/>point)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarms.push_back(alarm);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarms;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>TemperatureController::handleAlarmDisplay()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Alarm*<sp/>highestPriorityAlarm<sp/>=<sp/>getHighestPriorityAlarm();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(highestPriorityAlarm)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Display<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_currentDisplayedAlarm<sp/>=<sp/>highestPriorityAlarm;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_showingOK<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.setOledMode(2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>displayText<sp/>=<sp/>highestPriorityAlarm-&gt;getDisplayText();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Split<sp/>display<sp/>text<sp/>into<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>newlineIndex<sp/>=<sp/>displayText.indexOf(&apos;\n&apos;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>line1<sp/>=<sp/>displayText.substring(0,<sp/>newlineIndex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>line2<sp/>=<sp/>displayText.substring(newlineIndex<sp/>+<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>displayLines[2]<sp/>=<sp/>{line1,<sp/>line2};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.printText(displayLines,<sp/>2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(_currentDisplayedAlarm<sp/>&amp;&amp;<sp/>!_showingOK)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>No<sp/>more<sp/>alarms,<sp/>show<sp/>OK<sp/>for<sp/>1<sp/>minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_showOKAndTurnOffOLED();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(_showingOK)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>OK<sp/>display<sp/>time<sp/>has<sp/>elapsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(millis()<sp/>-<sp/>_okDisplayStartTime<sp/>&gt;=<sp/>60000)<sp/>{<sp/>//<sp/>1<sp/>minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.setOLEDOff();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_showingOK<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_currentDisplayedAlarm<sp/>=<sp/>nullptr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Normal<sp/>operation<sp/>-<sp/>show<sp/>normal<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_updateNormalDisplay();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>TemperatureController::handleAlarmOutputs()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Alarm*<sp/>highestPriorityAlarm<sp/>=<sp/>getHighestPriorityAlarm();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(highestPriorityAlarm)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>alarm<sp/>outputs<sp/>based<sp/>on<sp/>type<sp/>and<sp/>stage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(highestPriorityAlarm-&gt;getType()<sp/>==<sp/>AlarmType::HIGH_TEMPERATURE)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>High<sp/>temperature<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;RedLED&quot;,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;GreenLED&quot;,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!highestPriorityAlarm-&gt;isAcknowledged())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;Relay1&quot;,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;Relay1&quot;,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;Relay2&quot;,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>other<sp/>alarm<sp/>type<sp/>handling<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>No<sp/>active<sp/>alarms<sp/>-<sp/>normal<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;GreenLED&quot;,<sp/>true);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;RedLED&quot;,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;Relay1&quot;,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;Relay2&quot;,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a82e4c37ff4121eaf5e00e9c52381e840" kindref="member">TemperatureController::handleAlarmOutputs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>alarm<sp/>counts<sp/>by<sp/>priority<sp/>and<sp/>stage<sp/>for<sp/>precise<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>criticalActive<sp/>=<sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" kindref="member">AlarmPriority::PRIORITY_CRITICAL</ref>,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" kindref="member">AlarmStage::ACTIVE</ref>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>criticalAcknowledged<sp/>=<sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" kindref="member">AlarmPriority::PRIORITY_CRITICAL</ref>,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" kindref="member">AlarmStage::ACKNOWLEDGED</ref>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>highActive<sp/>=<sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" kindref="member">AlarmPriority::PRIORITY_HIGH</ref>,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" kindref="member">AlarmStage::ACTIVE</ref>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>highAcknowledged<sp/>=<sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" kindref="member">AlarmPriority::PRIORITY_HIGH</ref>,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" kindref="member">AlarmStage::ACKNOWLEDGED</ref>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mediumActive<sp/>=<sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" kindref="member">AlarmPriority::PRIORITY_MEDIUM</ref>,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" kindref="member">AlarmStage::ACTIVE</ref>);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mediumAcknowledged<sp/>=<sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" kindref="member">AlarmPriority::PRIORITY_MEDIUM</ref>,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" kindref="member">AlarmStage::ACKNOWLEDGED</ref>);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lowActive<sp/>=<sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" kindref="member">AlarmPriority::PRIORITY_LOW</ref>,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" kindref="member">AlarmStage::ACTIVE</ref>);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lowAcknowledged<sp/>=<sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" kindref="member">AlarmPriority::PRIORITY_LOW</ref>,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" kindref="member">AlarmStage::ACKNOWLEDGED</ref>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>highest<sp/>priority<sp/>alarm<sp/>state<sp/>for<sp/>output<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCritical<sp/>=<sp/>(criticalActive<sp/>+<sp/>criticalAcknowledged)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasHigh<sp/>=<sp/>(highActive<sp/>+<sp/>highAcknowledged)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMedium<sp/>=<sp/>(mediumActive<sp/>+<sp/>mediumAcknowledged)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasLow<sp/>=<sp/>(lowActive<sp/>+<sp/>lowAcknowledged)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>if<sp/>alarms<sp/>are<sp/>acknowledged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>criticalAcknowledgedOnly<sp/>=<sp/>(criticalActive<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>criticalAcknowledged<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>highAcknowledgedOnly<sp/>=<sp/>(highActive<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>highAcknowledged<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>mediumAcknowledgedOnly<sp/>=<sp/>(mediumActive<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>mediumAcknowledged<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>alarm<sp/>notification<sp/>logic<sp/>based<sp/>on<sp/>priority<sp/>and<sp/>acknowledgment<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Following<sp/>the<sp/>specification<sp/>table<sp/>from<sp/>PLANNING_RESULTS.md</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>relay1State<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Siren</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>relay2State<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Flash<sp/>beacon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>redLedState<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>yellowLedState<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>blueLedState<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>all<sp/>blinking<sp/>first<sp/>-<sp/>we&apos;ll<sp/>restart<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.stopBlinking(</highlight><highlight class="stringliteral">&quot;Relay2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.stopBlinking(</highlight><highlight class="stringliteral">&quot;YellowLED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasCritical)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(criticalAcknowledgedOnly)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CRITICAL<sp/>acknowledged:<sp/>Beacon<sp/>ON<sp/>(constant)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relay2State<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CRITICAL<sp/>active:<sp/>Siren<sp/>ON<sp/>+<sp/>Beacon<sp/>ON<sp/>(constant)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relay1State<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relay2State<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Red<sp/>LED<sp/>always<sp/>on<sp/>for<sp/>critical<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>redLedState<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yellowLedState<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Both<sp/>LEDs<sp/>for<sp/>critical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasHigh)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(highAcknowledgedOnly)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HIGH<sp/>acknowledged:<sp/>Beacon<sp/>ON<sp/>(blink<sp/>2s<sp/>on/30s<sp/>off)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.startBlinking(</highlight><highlight class="stringliteral">&quot;Relay2&quot;</highlight><highlight class="normal">,<sp/>2000,<sp/>30000);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HIGH<sp/>active:<sp/>Beacon<sp/>ON<sp/>(constant)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relay2State<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Red<sp/>LED<sp/>for<sp/>high<sp/>priority<sp/>(when<sp/>not<sp/>acknowledged)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>redLedState<sp/>=<sp/>!highAcknowledgedOnly;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yellowLedState<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasMedium)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mediumAcknowledgedOnly)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MEDIUM<sp/>active:<sp/>Beacon<sp/>ON<sp/>(blink<sp/>2s<sp/>on/30s<sp/>off)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.startBlinking(</highlight><highlight class="stringliteral">&quot;Relay2&quot;</highlight><highlight class="normal">,<sp/>2000,<sp/>30000);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MEDIUM<sp/>acknowledged:<sp/>Beacon<sp/>OFF<sp/>(no<sp/>relay<sp/>action)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Yellow<sp/>LED<sp/>blinking<sp/>for<sp/>medium<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mediumAcknowledgedOnly)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.startBlinking(</highlight><highlight class="stringliteral">&quot;YellowLED&quot;</highlight><highlight class="normal">,<sp/>2000,<sp/>30000);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasLow)<sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LOW<sp/>priority:<sp/>No<sp/>relay<sp/>action<sp/>(as<sp/>per<sp/>specification)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>LED<sp/>indication<sp/>for<sp/>low<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>alarm<sp/>summary<sp/>periodically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lastSummaryLog<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(now<sp/>-<sp/>lastSummaryLog<sp/>&gt;<sp/>30000<sp/>||<sp/></highlight><highlight class="comment">//<sp/>Log<sp/>every<sp/>30<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(hasCritical<sp/>||<sp/>hasHigh<sp/>||<sp/>hasMedium)<sp/>&amp;&amp;<sp/>now<sp/>-<sp/>lastSummaryLog<sp/>&gt;<sp/>5000)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Or<sp/>every<sp/>5<sp/>seconds<sp/>if<sp/>significant<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>summary<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Alarm<sp/>summary<sp/>-<sp/>Critical:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(criticalActive)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(criticalAcknowledged)<sp/>+<sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>High:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(highActive)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(highAcknowledged)<sp/>+<sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Medium:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(mediumActive)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(mediumAcknowledged)<sp/>+<sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Low:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(lowActive)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(lowAcknowledged);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;ALARM_OUTPUT&quot;</highlight><highlight class="normal">,<sp/>summary);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastSummaryLog<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>relay<sp/>states<sp/>(only<sp/>if<sp/>not<sp/>blinking)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.isBlinking(</highlight><highlight class="stringliteral">&quot;Relay1&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>relay1State<sp/>!=<sp/><ref refid="class_temperature_controller_1ac2b7ce0afccac7602505ab0bd3916562" kindref="member">_relay1State</ref>)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;INDICATION&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Relay1<sp/>(Siren)<sp/>state<sp/>change:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(<ref refid="class_temperature_controller_1ac2b7ce0afccac7602505ab0bd3916562" kindref="member">_relay1State</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(relay1State<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.writePort(</highlight><highlight class="stringliteral">&quot;Relay1&quot;</highlight><highlight class="normal">,<sp/>relay1State);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1ac2b7ce0afccac7602505ab0bd3916562" kindref="member">_relay1State</ref><sp/>=<sp/>relay1State;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.isBlinking(</highlight><highlight class="stringliteral">&quot;Relay2&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>relay2State<sp/>!=<sp/><ref refid="class_temperature_controller_1a3af25b4c386c13c4e1c49f50d67c705b" kindref="member">_relay2State</ref>)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;INDICATION&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Relay2<sp/>(Beacon)<sp/>state<sp/>change:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(<ref refid="class_temperature_controller_1a3af25b4c386c13c4e1c49f50d67c705b" kindref="member">_relay2State</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(relay2State<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.writePort(</highlight><highlight class="stringliteral">&quot;Relay2&quot;</highlight><highlight class="normal">,<sp/>relay2State);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a3af25b4c386c13c4e1c49f50d67c705b" kindref="member">_relay2State</ref><sp/>=<sp/>relay2State;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>LED<sp/>states<sp/>(only<sp/>if<sp/>not<sp/>blinking)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(redLedState<sp/>!=<sp/><ref refid="class_temperature_controller_1a01c4086be4fa74e89b108428ac3756ea" kindref="member">_redLedState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;INDICATION&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Red<sp/>LED<sp/>state<sp/>change:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(<ref refid="class_temperature_controller_1a01c4086be4fa74e89b108428ac3756ea" kindref="member">_redLedState</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(redLedState<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.writePort(</highlight><highlight class="stringliteral">&quot;RedLED&quot;</highlight><highlight class="normal">,<sp/>redLedState);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a01c4086be4fa74e89b108428ac3756ea" kindref="member">_redLedState</ref><sp/>=<sp/>redLedState;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.isBlinking(</highlight><highlight class="stringliteral">&quot;YellowLED&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>yellowLedState<sp/>!=<sp/><ref refid="class_temperature_controller_1ada44ea25043f4cc35dd01cad67979acf" kindref="member">_yellowLedState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;INDICATION&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Yellow<sp/>LED<sp/>state<sp/>change:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(<ref refid="class_temperature_controller_1ada44ea25043f4cc35dd01cad67979acf" kindref="member">_yellowLedState</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(yellowLedState<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.writePort(</highlight><highlight class="stringliteral">&quot;YellowLED&quot;</highlight><highlight class="normal">,<sp/>yellowLedState);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1ada44ea25043f4cc35dd01cad67979acf" kindref="member">_yellowLedState</ref><sp/>=<sp/>yellowLedState;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blueLedState<sp/>!=<sp/><ref refid="class_temperature_controller_1aec910974cd40cafef22d5e5c5e730512" kindref="member">_blueLedState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;INDICATION&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Blue<sp/>LED<sp/>state<sp/>change:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(<ref refid="class_temperature_controller_1aec910974cd40cafef22d5e5c5e730512" kindref="member">_blueLedState</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(blueLedState<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;ON&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;OFF&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.writePort(</highlight><highlight class="stringliteral">&quot;BlueLED&quot;</highlight><highlight class="normal">,<sp/>blueLedState);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1aec910974cd40cafef22d5e5c5e730512" kindref="member">_blueLedState</ref><sp/>=<sp/>blueLedState;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>TemperatureController::handleAlarmOutputs()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>new<sp/>output<sp/>states<sp/>using<sp/>enhanced<sp/>getAlarmCount<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>bool<sp/>newRelay1<sp/>=<sp/>getAlarmCount(AlarmStage::ACTIVE)<sp/>&gt;<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>HIGH<sp/>or<sp/>CRITICAL<sp/>priority<sp/>alarms<sp/>in<sp/>ACKNOWLEDGED<sp/>or<sp/>ACTIVE<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>bool<sp/>highPriorityRelay2<sp/>=<sp/>getAlarmCount(AlarmPriority::PRIORITY_HIGH,<sp/>AlarmStage::ACKNOWLEDGED,<sp/>&quot;&gt;=&quot;,<sp/>&quot;&gt;=&quot;)<sp/>&gt;<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>LOW<sp/>priority<sp/>alarms<sp/>in<sp/>ACKNOWLEDGED<sp/>or<sp/>ACTIVE<sp/>states<sp/>(for<sp/>blinking)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>bool<sp/>lowPriorityExists<sp/>=<sp/>getAlarmCount(AlarmPriority::PRIORITY_LOW,<sp/>AlarmStage::ACKNOWLEDGED,<sp/>&quot;==&quot;,<sp/>&quot;&gt;=&quot;)<sp/>&gt;<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>CRITICAL<sp/>priority<sp/>alarms<sp/>in<sp/>ACKNOWLEDGED<sp/>or<sp/>ACTIVE<sp/>states<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>bool<sp/>newRedLed<sp/>=<sp/>getAlarmCount(AlarmPriority::PRIORITY_CRITICAL,<sp/>AlarmStage::ACKNOWLEDGED,<sp/>&quot;==&quot;,<sp/>&quot;&gt;=&quot;)<sp/>&gt;<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>HIGH<sp/>priority<sp/>alarms<sp/>in<sp/>ACKNOWLEDGED<sp/>or<sp/>ACTIVE<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>bool<sp/>newYellowLed<sp/>=<sp/>getAlarmCount(AlarmPriority::PRIORITY_HIGH,<sp/>AlarmStage::ACKNOWLEDGED,<sp/>&quot;==&quot;,<sp/>&quot;&gt;=&quot;)<sp/>&gt;<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>MEDIUM<sp/>priority<sp/>alarms<sp/>in<sp/>ACKNOWLEDGED<sp/>or<sp/>ACTIVE<sp/>states</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>bool<sp/>mediumPriorityBlueLed<sp/>=<sp/>getAlarmCount(AlarmPriority::PRIORITY_MEDIUM,<sp/>AlarmStage::ACKNOWLEDGED,<sp/>&quot;==&quot;,<sp/>&quot;&gt;=&quot;)<sp/>&gt;<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>blinking<sp/>for<sp/>low<sp/>priority<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(lowPriorityExists)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>blinking<sp/>if<sp/>not<sp/>already<sp/>blinking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!highPriorityRelay2<sp/>&amp;&amp;<sp/>!indicator.isBlinking(&quot;Relay2&quot;))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.startBlinking(&quot;Relay2&quot;,<sp/>1000,<sp/>5000);<sp/><sp/>//<sp/>2s<sp/>on,<sp/>30s<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!indicator.isBlinking(&quot;BlueLED&quot;))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.startBlinking(&quot;BlueLED&quot;,<sp/>500,<sp/>500);<sp/><sp/><sp/><sp/>//<sp/>500ms<sp/>on,<sp/>500ms<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Stop<sp/>blinking<sp/>if<sp/>no<sp/>low<sp/>priority<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.stopBlinking(&quot;Relay2&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.stopBlinking(&quot;BlueLED&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>final<sp/>states<sp/>(excluding<sp/>blinking<sp/>ports)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>bool<sp/>newRelay2<sp/>=<sp/>highPriorityRelay2;<sp/><sp/>//<sp/>Don&apos;t<sp/>set<sp/>if<sp/>blinking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>bool<sp/>newBlueLed<sp/>=<sp/>mediumPriorityBlueLed;<sp/><sp/>//<sp/>Don&apos;t<sp/>set<sp/>if<sp/>blinking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>update<sp/>non-blinking<sp/>outputs<sp/>if<sp/>state<sp/>has<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(newRelay1<sp/>!=<sp/>_relay1State)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;Relay1&quot;,<sp/>newRelay1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_relay1State<sp/>=<sp/>newRelay1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>control<sp/>Relay2<sp/>directly<sp/>if<sp/>not<sp/>blinking<sp/>for<sp/>low<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(!indicator.isBlinking(&quot;Relay2&quot;)<sp/>&amp;&amp;<sp/>newRelay2<sp/>!=<sp/>_relay2State)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;Relay2&quot;,<sp/>newRelay2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_relay2State<sp/>=<sp/>newRelay2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(newRedLed<sp/>!=<sp/>_redLedState)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;RedLED&quot;,<sp/>newRedLed);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_redLedState<sp/>=<sp/>newRedLed;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(newYellowLed<sp/>!=<sp/>_yellowLedState)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;YellowLED&quot;,<sp/>newYellowLed);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_yellowLedState<sp/>=<sp/>newYellowLed;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>control<sp/>BlueLED<sp/>directly<sp/>if<sp/>not<sp/>blinking<sp/>for<sp/>low<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(!indicator.isBlinking(&quot;BlueLED&quot;)<sp/>&amp;&amp;<sp/>newBlueLed<sp/>!=<sp/>_blueLedState)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicator.writePort(&quot;BlueLED&quot;,<sp/>newBlueLed);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_blueLedState<sp/>=<sp/>newBlueLed;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>TemperatureController::_checkButtonPress()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>bool<sp/>currentButtonState<sp/>=<sp/>indicator.readPort(&quot;BUTTON&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Detect<sp/>button<sp/>press<sp/>(HIGH<sp/>to<sp/>LOW<sp/>transition)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(_lastButtonState<sp/>==<sp/>true<sp/>&amp;&amp;<sp/>currentButtonState<sp/>==<sp/>false)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((millis()<sp/>-<sp/>_lastButtonPressTime)<sp/>&gt;<sp/>_buttonDebounceDelay)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(&quot;BUTTON<sp/>PRESS<sp/>DETECTED!&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acknowledgeHighestPriorityAlarm();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lastButtonPressTime<sp/>=<sp/>millis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>_lastButtonState<sp/>=<sp/>currentButtonState;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702" refid="class_temperature_controller_1a4d36576f7d6ab8f5222a082878314912" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a4d36576f7d6ab8f5222a082878314912" kindref="member">TemperatureController::_updateNormalDisplay</ref>()<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Show<sp/>normal<sp/>system<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setOledMode(3);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>lines[3]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;System<sp/>Normal&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Temp<sp/>Monitor&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ready&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.printText(lines,<sp/>3);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="class_temperature_controller_1a28e81945f5235e161e6c532b428d36d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a28e81945f5235e161e6c532b428d36d2" kindref="member">TemperatureController::_showOKAndTurnOffOLED</ref>()<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.displayOK();</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a473053bec0dba7d493499df05cd53fa8" kindref="member">_okDisplayStartTime</ref><sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" kindref="member">_showingOK</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="class_temperature_controller_1a77429353a869859ddea4f5b92ede2f52" refkind="member"><highlight class="normal">String<sp/><ref refid="class_temperature_controller_1a77429353a869859ddea4f5b92ede2f52" kindref="member">TemperatureController::getAlarmsJson</ref>()<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>DynamicJsonDocument<sp/>doc(4096);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>JsonArray<sp/>alarmArray<sp/>=<sp/>doc.createNestedArray(</highlight><highlight class="stringliteral">&quot;alarms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JsonObject<sp/>obj<sp/>=<sp/>alarmArray.createNestedObject();</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;configKey&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;getConfigKey();</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(alarm-&gt;getType());</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;priority&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(alarm-&gt;getPriority());</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;isEnabled();</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;pointAddress&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;getPointAddress();</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;stage&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(alarm-&gt;getStage());</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;isActive&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;isActive();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;isAcknowledged&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;isAcknowledged();</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;getTimestamp();</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;acknowledgedTime&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;getAcknowledgedTime();</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;acknowledgedTimeLeft&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;getAcknowledgedTimeLeft();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getSource())<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;pointName&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;getSource()-&gt;getName();</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;currentTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>alarm-&gt;getSource()-&gt;getCurrentTemp();</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;threshold&quot;</highlight><highlight class="normal">]<sp/>=<sp/>(alarm-&gt;getType()<sp/>==<sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" kindref="member">AlarmType::HIGH_TEMPERATURE</ref>)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>alarm-&gt;getSource()-&gt;getHighAlarmThreshold()</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>alarm-&gt;getSource()-&gt;getLowAlarmThreshold();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>output;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>serializeJson(doc,<sp/>output);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>TemperatureController::update()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>updateAllSensors();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>this<sp/>line<sp/>-<sp/>handle<sp/>PCF8575<sp/>interrupts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>indicator.handleInterrupt();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>alarm<sp/>logic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Update<sp/>OLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>indicator.updateOLED();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(!systemInitialized)<sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>currentTime<sp/>=<sp/>millis();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(currentTime<sp/>-<sp/>lastMeasurementTime<sp/>&gt;=<sp/>measurementPeriodSeconds)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readAllPoints();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateRegisterMap();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastMeasurementTime<sp/>=<sp/>currentTime;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applyConfigFromRegisterMap();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777" refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" refkind="member"><highlight class="normal"><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/><ref refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" kindref="member">TemperatureController::getMeasurementPoint</ref>(uint8_t<sp/>address)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1ad322a5bab8d5788a586206004248f673" kindref="member">isDS18B20Address</ref>(address))</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[address];</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a13125ddcf29cb56d27403818543618af" kindref="member">isPT1000Address</ref>(address))</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[address<sp/>-<sp/>50];</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785" refid="class_temperature_controller_1a08489239b3da4d3f243b98e201f84240" refkind="member"><highlight class="normal"><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/><ref refid="class_temperature_controller_1a08489239b3da4d3f243b98e201f84240" kindref="member">TemperatureController::getDS18B20Point</ref>(uint8_t<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>50)<sp/>?<sp/>&amp;<ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[idx]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789" refid="class_temperature_controller_1a65c97fc6555937166fc8d12d09d47966" refkind="member"><highlight class="normal"><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/><ref refid="class_temperature_controller_1a65c97fc6555937166fc8d12d09d47966" kindref="member">TemperatureController::getPT1000Point</ref>(uint8_t<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>10)<sp/>?<sp/>&amp;<ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[idx]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793" refid="class_temperature_controller_1aafd155cdb06d2f411d3640df99815246" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1aafd155cdb06d2f411d3640df99815246" kindref="member">TemperatureController::addSensor</ref>(<ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>sensor)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sensor)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>DS18B20,<sp/>check<sp/>by<sp/>ROM<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;<ref refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" kindref="member">getType</ref>()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref>)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>romStr<sp/>=<sp/>sensor-&gt;<ref refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" kindref="member">getDS18B20RomString</ref>();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" kindref="member">findSensorByRom</ref>(romStr))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;<ref refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" kindref="member">getType</ref>()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" kindref="member">SensorType::PT1000</ref>)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" kindref="member">findSensorByChipSelect</ref>(sensor-&gt;<ref refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" kindref="member">getPT1000ChipSelectPin</ref>()))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>.push_back(sensor);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;<ref refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" kindref="member">getType</ref>()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref>)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.incrementActiveDS18B20();</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.incrementActivePT1000();</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810" refid="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" kindref="member">TemperatureController::removeSensorByRom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>romString)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)-&gt;getDS18B20RomString()<sp/>==<sp/>romString)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unbind<sp/>from<sp/>any<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].<ref refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" kindref="member">getBoundSensor</ref>()<sp/>==<sp/>*it)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].unbindSensor();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.decrementActiveDS18B20();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>.erase(it);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828" refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" refkind="member"><highlight class="normal"><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/><ref refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" kindref="member">TemperatureController::findSensorByRom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>romString)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>:<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Sensor<sp/>ROM&quot;</highlight><highlight class="normal"><sp/>+<sp/>s-&gt;getDS18B20RomString());</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;getDS18B20RomString()<sp/>==<sp/>romString)</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838" refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" refkind="member"><highlight class="normal"><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/><ref refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" kindref="member">TemperatureController::findSensorByChipSelect</ref>(uint8_t<sp/>csPin)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>:<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" kindref="member">SensorType::PT1000</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;getPT1000ChipSelectPin()<sp/>==<sp/>csPin)</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846" refid="class_temperature_controller_1a6ba00434153159c1589cbdd0129229d4" refkind="member"><highlight class="normal"><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/><ref refid="class_temperature_controller_1a6ba00434153159c1589cbdd0129229d4" kindref="member">TemperatureController::getSensorByIndex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>idx<sp/>&lt;<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>.size())<sp/>?<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>[idx]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850" refid="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" kindref="member">TemperatureController::bindSensorToPointByRom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>romString,<sp/>uint8_t<sp/>pointAddress)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pointAddress<sp/>&gt;<sp/>49)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>sensor<sp/>=<sp/><ref refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" kindref="member">findSensorByRom</ref>(romString);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" kindref="member">unbindSensorFromPointBySensor</ref>(sensor);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point<sp/>=<sp/><ref refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" kindref="member">getMeasurementPoint</ref>(pointAddress);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sensor<sp/>||<sp/>!point){</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a0d52b0ff7bff22817e987ad753102854" kindref="member">LoggerManager::warning</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>bind<sp/>sensor<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>romString<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress));</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}<sp/></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;<ref refid="class_measurement_point_1a3c3af28d9aabc9e5b9e2e370eaa29ce0" kindref="member">bindSensor</ref>(sensor);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Auto-enable<sp/>sensor<sp/>error<sp/>alarm<sp/>when<sp/>sensor<sp/>is<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarms<sp/>=<sp/><ref refid="class_temperature_controller_1a880028883101197527de57f626e14512" kindref="member">getAlarmsForPoint</ref>(point);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/>alarms)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getType()<sp/>==<sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" kindref="member">AlarmType::SENSOR_ERROR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;setEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Auto-enabled<sp/>sensor<sp/>error<sp/>alarm<sp/>for<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress));</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>pointName<sp/>=<sp/>point-&gt;<ref refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" kindref="member">getName</ref>().isEmpty()<sp/>?<sp/></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Point_&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress)<sp/>:<sp/>point-&gt;<ref refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" kindref="member">getName</ref>();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sensor<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>romString<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>bound<sp/>to<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress)<sp/>+<sp/></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>pointName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886" refid="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" kindref="member">TemperatureController::bindSensorToPointByChipSelect</ref>(uint8_t<sp/>csPin,<sp/>uint8_t<sp/>pointAddress)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Point<sp/>address:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>pointAddress);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((pointAddress<sp/>&lt;<sp/>50)<sp/>||<sp/>(pointAddress<sp/>&gt;<sp/>59))<sp/></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Point<sp/>address:<sp/>%d<sp/>PASSED!\n&quot;</highlight><highlight class="normal">,<sp/>pointAddress);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>sensor<sp/>=<sp/><ref refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" kindref="member">findSensorByChipSelect</ref>(csPin);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" kindref="member">unbindSensorFromPointBySensor</ref>(sensor);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point<sp/>=<sp/><ref refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" kindref="member">getMeasurementPoint</ref>(pointAddress);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sensor<sp/>||<sp/>!point)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a0d52b0ff7bff22817e987ad753102854" kindref="member">LoggerManager::warning</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>bind<sp/>PT1000<sp/>sensor<sp/>CS&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(csPin)<sp/>+<sp/></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress));</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>point-&gt;<ref refid="class_measurement_point_1a3c3af28d9aabc9e5b9e2e370eaa29ce0" kindref="member">bindSensor</ref>(sensor);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Auto-enable<sp/>sensor<sp/>error<sp/>alarm<sp/>when<sp/>sensor<sp/>is<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarms<sp/>=<sp/><ref refid="class_temperature_controller_1a880028883101197527de57f626e14512" kindref="member">getAlarmsForPoint</ref>(point);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/>alarms)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getType()<sp/>==<sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" kindref="member">AlarmType::SENSOR_ERROR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;setEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Auto-enabled<sp/>sensor<sp/>error<sp/>alarm<sp/>for<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress));</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>pointName<sp/>=<sp/>point-&gt;<ref refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" kindref="member">getName</ref>().isEmpty()<sp/>?<sp/></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Point_&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress)<sp/>:<sp/>point-&gt;<ref refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" kindref="member">getName</ref>();</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PT1000<sp/>sensor<sp/>CS&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(csPin)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>bound<sp/>to<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String(pointAddress)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>pointName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921" refid="class_temperature_controller_1a261c9b96540ec6680dfffd3a26e4ca00" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a261c9b96540ec6680dfffd3a26e4ca00" kindref="member">TemperatureController::unbindSensorFromPoint</ref>(uint8_t<sp/>pointAddress)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point<sp/>=<sp/><ref refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" kindref="member">getMeasurementPoint</ref>(pointAddress);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!point)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1aef24f00186213fa78be3b104a50d58e6" kindref="member">LoggerManager::error</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Faild<sp/>to<sp/>unbound<sp/>sensor<sp/>from<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress)<sp/>+<sp/></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>point-&gt;<ref refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" kindref="member">getName</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point-&gt;<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>sensorInfo<sp/>=<sp/>point-&gt;<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>()-&gt;<ref refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" kindref="member">getType</ref>()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref><sp/>?<sp/></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>()-&gt;<ref refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" kindref="member">getDS18B20RomString</ref>()<sp/>:<sp/></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CS&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(point-&gt;<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>()-&gt;<ref refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" kindref="member">getPT1000ChipSelectPin</ref>());</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sensor<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>sensorInfo<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>unbound<sp/>from<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress)<sp/>+<sp/></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>point-&gt;<ref refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" kindref="member">getName</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>point-&gt;<ref refid="class_measurement_point_1ab93923a15b7e55af89d1269b681fb856" kindref="member">unbindSensor</ref>();</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944" refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" refkind="member"><highlight class="normal"><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/><ref refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" kindref="member">TemperatureController::getBoundSensor</ref>(uint8_t<sp/>pointAddress)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point<sp/>=<sp/><ref refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" kindref="member">getMeasurementPoint</ref>(pointAddress);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>point<sp/>?<sp/>point-&gt;<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>()<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949" refid="class_temperature_controller_1a11948a87fe7df37543b86ecdd488b341" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a11948a87fe7df37543b86ecdd488b341" kindref="member">TemperatureController::readAllPoints</ref>()<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].<ref refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i].<ref refid="class_temperature_controller_1aca5deddbf703001373424d876f87b5f2" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956" refid="class_temperature_controller_1a62b93899a3b8b55e2e0bd933520c2892" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a62b93899a3b8b55e2e0bd933520c2892" kindref="member">TemperatureController::updateRegisterMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.updateFromMeasurementPoint(<ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i]);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.updateFromMeasurementPoint(<ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i]);</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="class_temperature_controller_1aabd7eb98840e80fc7d07eb04a926a7b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1aabd7eb98840e80fc7d07eb04a926a7b1" kindref="member">TemperatureController::applyConfigFromRegisterMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.applyConfigToMeasurementPoint(<ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i]);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.applyConfigToMeasurementPoint(<ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i]);</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970" refid="class_temperature_controller_1a43b97d23bcdea11dc4073bcd412a5334" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a43b97d23bcdea11dc4073bcd412a5334" kindref="member">TemperatureController::applyConfigToRegisterMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.applyConfigFromMeasurementPoint(<ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i]);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.applyConfigFromMeasurementPoint(<ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i]);</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977" refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a57b74b40c88016965d07248981412f7d" kindref="member">TemperatureController::discoverDS18B20Sensors</ref>()<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>anyAdded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Discover<sp/>method<sp/>started...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;DISCOVERY&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>DS18B20<sp/>sensor<sp/>discovery&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>totalFound<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OneWire<sp/>oneWire[]<sp/>=<sp/>{<sp/>OneWire(oneWireBusPin[0]),<sp/>OneWire(oneWireBusPin[1]),<sp/>OneWire(oneWireBusPin[2]),<sp/>OneWire(oneWireBusPin[3])<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DallasTemperature<sp/>dallasSensors[]<sp/>=<sp/>{DallasTemperature(&amp;oneWire[0]),<sp/>DallasTemperature(&amp;oneWire[1]),<sp/>DallasTemperature(&amp;oneWire[2]),<sp/>DallasTemperature(&amp;oneWire[3])};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++){</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Discover<sp/>bus<sp/>%d<sp/>pin<sp/>%d<sp/>started...\n&quot;</highlight><highlight class="normal">,<sp/>j,<sp/><ref refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" kindref="member">oneWireBusPin</ref>[j]);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//OneWire<sp/>oneWire(oneWireBusPin[j]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" kindref="member">dallasSensors</ref>[j]-&gt;begin();</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceCount<sp/>=<sp/><ref refid="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" kindref="member">dallasSensors</ref>[j]-&gt;getDeviceCount();</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Devices<sp/>on<sp/>bus<sp/>%d:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>j,<sp/>deviceCount);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceCount<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>totalFound<sp/>+=<sp/>deviceCount;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>DeviceAddress<sp/>sensorAddress;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deviceCount<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;DISCOVERY&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Found<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(deviceCount)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>DS18B20<sp/>sensors<sp/>on<sp/>bus<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(j));</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>deviceCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1acb15c2739c955d5c51e5b1a04fbb40fa" kindref="member">dallasSensors</ref>[j]-&gt;getAddress(sensorAddress,<sp/>i))<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Bus<sp/>%d.<sp/>Device<sp/>%d<sp/>of<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>j,<sp/>i,<sp/>deviceCount);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>ROM<sp/>to<sp/>string<sp/>for<sp/>uniqueness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[17];</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>0;<sp/>u<sp/>&lt;<sp/>8;<sp/>++u)<sp/>sprintf(buf<sp/>+<sp/>u*2,<sp/></highlight><highlight class="stringliteral">&quot;%02X&quot;</highlight><highlight class="normal">,<sp/>sensorAddress[u]);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>romString(buf);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;ROM:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>romString);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>already<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" kindref="member">findSensorByRom</ref>(romString)){</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(<ref refid="class_temperature_controller_1ae03306ef9585c7427ef53cd9a5fad12b" kindref="member">findSensorByRom</ref>(romString))<sp/>!=<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a4e4770607486ebfc6eacafa704945c23" kindref="member">removeSensorByRom</ref>(romString);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Device<sp/>existed<sp/>on<sp/>enother<sp/>bus.<sp/>Deleting&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//continue;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>sensorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DS18B20_&quot;</highlight><highlight class="normal"><sp/>+<sp/>romString;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>newSensor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>(<ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref>,<sp/>0,<sp/>sensorName);<sp/></highlight><highlight class="comment">//<sp/>address<sp/>field<sp/>not<sp/>used<sp/>for<sp/>DS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Sensor<sp/>created<sp/>with<sp/>name<sp/>%s<sp/>on<sp/>bus<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>newSensor-&gt;<ref refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" kindref="member">getName</ref>(),<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(newSensor));</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newSensor-&gt;<ref refid="class_sensor_1afefa1f627a7d2ab5a1157c271e7f2556" kindref="member">setupDS18B20</ref>(<ref refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" kindref="member">oneWireBusPin</ref>[j],<sp/>sensorAddress);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Sensor<sp/>%s<sp/>set<sp/>on<sp/>bus<sp/>%d/<sp/>pin<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>newSensor-&gt;<ref refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" kindref="member">getName</ref>(),<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(newSensor),<sp/>newSensor-&gt;<ref refid="class_sensor_1ac42da3a37b0d6a9622344fe83f4c9047" kindref="member">getOneWirePin</ref>());</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSensor-&gt;<ref refid="class_sensor_1a59dd5483b75d9366a0c50ccdd0345dec" kindref="member">initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>.push_back(newSensor);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.incrementActiveDS18B20();</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anyAdded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Sensor<sp/>%s<sp/>set<sp/>on<sp/>bus<sp/>%d/<sp/>pin<sp/>%d<sp/>status:<sp/>Connected\n&quot;</highlight><highlight class="normal">,<sp/>newSensor-&gt;<ref refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" kindref="member">getName</ref>(),<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(newSensor),<sp/>newSensor-&gt;<ref refid="class_sensor_1ac42da3a37b0d6a9622344fe83f4c9047" kindref="member">getOneWirePin</ref>());</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>newSensor;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;DISCOVERY&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DS18B20<sp/>discovery<sp/>completed.<sp/>Total<sp/>sensors:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(totalFound));</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>anyAdded;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052" refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a79e98c9a1d42de787a66e02b250b7a74" kindref="member">TemperatureController::discoverPTSensors</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>anyAdded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;Discover<sp/>PT<sp/>method<sp/>started...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;DISCOVERY&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>PT1000<sp/>sensor<sp/>discovery&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++){</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Bus:<sp/>%d:<sp/>PIN:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>j,<sp/><ref refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" kindref="member">chipSelectPin</ref>[j]);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>OneWire<sp/>oneWire[]<sp/>=<sp/>{<sp/>OneWire(oneWireBusPin[0]),<sp/>OneWire(oneWireBusPin[1]),<sp/>OneWire(oneWireBusPin[2]),<sp/>OneWire(oneWireBusPin[3])<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DallasTemperature<sp/>dallasSensors[]<sp/>=<sp/>{DallasTemperature(&amp;oneWire[0]),<sp/>DallasTemperature(&amp;oneWire[1]),<sp/>DallasTemperature(&amp;oneWire[2]),<sp/>DallasTemperature(&amp;oneWire[3])};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++){</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Discover<sp/>PT:<sp/>bus<sp/>%d<sp/>pin<sp/>%d<sp/>started...\n&quot;</highlight><highlight class="normal">,<sp/>j,<sp/><ref refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" kindref="member">chipSelectPin</ref>[j]);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_temperature_controller_1a31a8a32868beaae06649a5006ca96599" kindref="member">findSensorByChipSelect</ref>(<ref refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" kindref="member">chipSelectPin</ref>[j])<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Sensor<sp/>already<sp/>discovered<sp/>on<sp/>bus<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>j);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>sensorName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PT1000_&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(j);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>newSensor<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>(<ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" kindref="member">SensorType::PT1000</ref>,<sp/>j,<sp/>sensorName);<sp/></highlight><highlight class="comment">//<sp/>address<sp/>field<sp/>not<sp/>used<sp/>for<sp/>DS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Sensor<sp/>created<sp/>with<sp/>name<sp/>%s<sp/>on<sp/>bus<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>newSensor-&gt;<ref refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" kindref="member">getName</ref>(),<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(newSensor));</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newSensor-&gt;<ref refid="class_sensor_1aef73c8dc894e3695f50b4bece9601750" kindref="member">setupPT1000</ref>(<ref refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" kindref="member">chipSelectPin</ref>[j],<sp/>j);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Sensor<sp/>%s<sp/>set<sp/>on<sp/>bus<sp/>%d/<sp/>pin<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>newSensor-&gt;<ref refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" kindref="member">getName</ref>(),<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(newSensor),<sp/>newSensor-&gt;<ref refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" kindref="member">getPT1000ChipSelectPin</ref>());</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSensor-&gt;<ref refid="class_sensor_1a59dd5483b75d9366a0c50ccdd0345dec" kindref="member">initialize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>.push_back(newSensor);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.incrementActivePT1000();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anyAdded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Sensor<sp/>%s<sp/>set<sp/>on<sp/>bus<sp/>%d/<sp/>pin<sp/>%d<sp/>status:<sp/>Connected\n&quot;</highlight><highlight class="normal">,<sp/>newSensor-&gt;<ref refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" kindref="member">getName</ref>(),<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(newSensor),<sp/>newSensor-&gt;<ref refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" kindref="member">getPT1000ChipSelectPin</ref>());</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;DISCOVERY&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>PT1000<sp/>sensor<sp/>on<sp/>bus:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(<ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(newSensor))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>CS<sp/>pin:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(newSensor-&gt;<ref refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" kindref="member">getPT1000ChipSelectPin</ref>()));</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>newSensor;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>anyAdded;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104" refid="class_temperature_controller_1a58f7a683f6e4c08dbfdfc43c1e740f15" refkind="member"><highlight class="normal">String<sp/><ref refid="class_temperature_controller_1a58f7a683f6e4c08dbfdfc43c1e740f15" kindref="member">TemperatureController::getSensorsJson</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>DynamicJsonDocument<sp/>doc(8192);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>JsonArray<sp/>sensorArray<sp/>=<sp/>doc.createNestedArray(</highlight><highlight class="stringliteral">&quot;sensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sensor<sp/>:<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JsonObject<sp/>obj<sp/>=<sp/>sensorArray.createNestedObject();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">]<sp/>=<sp/>(sensor-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref>)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;DS18B20&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;PT1000&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getName();</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;currentTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getCurrentTemp();</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;minTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getMinTemp();</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;maxTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getMaxTemp();</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;lowAlarmThreshold&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getLowAlarmThreshold();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;highAlarmThreshold&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getHighAlarmThreshold();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;alarmStatus&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getAlarmStatus();</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;errorStatus&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getErrorStatus();</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;bus&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(sensor);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;romString&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getDS18B20RomString();</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JsonArray<sp/>romArr<sp/>=<sp/>obj.createNestedArray(</highlight><highlight class="stringliteral">&quot;romArray&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>rom[8];</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor-&gt;getDS18B20RomArray(rom);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>8;<sp/>++j)<sp/>romArr.add(rom[j]);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" kindref="member">SensorType::PT1000</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;chipSelectPin&quot;</highlight><highlight class="normal">]<sp/>=<sp/>sensor-&gt;getPT1000ChipSelectPin();</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binding<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boundPoint<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>romString<sp/>=<sp/>sensor-&gt;getDS18B20RomString();</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>bound<sp/>=<sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].getBoundSensor();</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bound<sp/>&amp;&amp;<sp/>bound-&gt;<ref refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" kindref="member">getType</ref>()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bound-&gt;<ref refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" kindref="member">getDS18B20RomString</ref>()<sp/>==<sp/>romString)<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundPoint<sp/>=<sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].getAddress();</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" kindref="member">SensorType::PT1000</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>bound<sp/>=<sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i].getBoundSensor();</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bound<sp/>&amp;&amp;<sp/>bound<sp/>==<sp/>sensor)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundPoint<sp/>=<sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i].getAddress();</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boundPoint<sp/>&gt;=<sp/>0)<sp/>obj[</highlight><highlight class="stringliteral">&quot;boundPoint&quot;</highlight><highlight class="normal">]<sp/>=<sp/>boundPoint;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>obj[</highlight><highlight class="stringliteral">&quot;boundPoint&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>out;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>serializeJson(doc,<sp/>out);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162" refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" refkind="member"><highlight class="normal">String<sp/><ref refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" kindref="member">TemperatureController::getPointsJson</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>DynamicJsonDocument<sp/>doc(8192);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>JsonArray<sp/>pointsArray<sp/>=<sp/>doc.createNestedArray(</highlight><highlight class="stringliteral">&quot;points&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DS18B20<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//Should<sp/>be<sp/>50<sp/>instad<sp/>of<sp/>2<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>&amp;<sp/>point<sp/>=<sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i];</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JsonObject<sp/>obj<sp/>=<sp/>pointsArray.createNestedObject();</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" kindref="member">getAddress</ref>();</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" kindref="member">getName</ref>();</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DS18B20&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;currentTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" kindref="member">getCurrentTemp</ref>();</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;minTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1adc31f012462c1623617d5f362bcb2c59" kindref="member">getMinTemp</ref>();</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;maxTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a8677e00e0be369d7874f4982990dc56d" kindref="member">getMaxTemp</ref>();</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;lowAlarmThreshold&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" kindref="member">getLowAlarmThreshold</ref>();</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;highAlarmThreshold&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" kindref="member">getHighAlarmThreshold</ref>();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;alarmStatus&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a1421d744f7982e528a579da02adb1919" kindref="member">getAlarmStatus</ref>();</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;errorStatus&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a3fb0693931f12190a7f96e5d6be51b51" kindref="member">getErrorStatus</ref>();</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>bound<sp/>=<sp/>point.<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>();</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bound<sp/>&amp;&amp;<sp/>bound-&gt;<ref refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" kindref="member">getType</ref>()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;sensorType&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DS18B20&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;sensorRomString&quot;</highlight><highlight class="normal">]<sp/>=<sp/>bound-&gt;<ref refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" kindref="member">getDS18B20RomString</ref>();</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JsonArray<sp/>romArr<sp/>=<sp/>obj[</highlight><highlight class="stringliteral">&quot;sensorRomArray&quot;</highlight><highlight class="normal">].to&lt;JsonArray&gt;();</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>rom[8];</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bound-&gt;<ref refid="class_sensor_1a3003106c642cc8a9ec5638ea06052ff4" kindref="member">getDS18B20RomArray</ref>(rom);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>8;<sp/>++j)<sp/>romArr.add(rom[j]);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;bus&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(bound);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PT1000<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)<sp/>{<sp/></highlight><highlight class="comment">//should<sp/>be<sp/>10<sp/>instaed<sp/>of<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>&amp;<sp/>point<sp/>=<sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i];</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JsonObject<sp/>obj<sp/>=<sp/>pointsArray.createNestedObject();</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;address&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" kindref="member">getAddress</ref>();</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" kindref="member">getName</ref>();</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PT1000&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;currentTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" kindref="member">getCurrentTemp</ref>();</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;minTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1adc31f012462c1623617d5f362bcb2c59" kindref="member">getMinTemp</ref>();</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;maxTemp&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a8677e00e0be369d7874f4982990dc56d" kindref="member">getMaxTemp</ref>();</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;lowAlarmThreshold&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" kindref="member">getLowAlarmThreshold</ref>();</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;highAlarmThreshold&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" kindref="member">getHighAlarmThreshold</ref>();</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;alarmStatus&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a1421d744f7982e528a579da02adb1919" kindref="member">getAlarmStatus</ref>();</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;errorStatus&quot;</highlight><highlight class="normal">]<sp/>=<sp/>point.<ref refid="class_measurement_point_1a3fb0693931f12190a7f96e5d6be51b51" kindref="member">getErrorStatus</ref>();</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>bound<sp/>=<sp/>point.<ref refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" kindref="member">getBoundSensor</ref>();</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bound<sp/>&amp;&amp;<sp/>bound-&gt;<ref refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" kindref="member">getType</ref>()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" kindref="member">SensorType::PT1000</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;sensorType&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PT1000&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;chipSelectPin&quot;</highlight><highlight class="normal">]<sp/>=<sp/>bound-&gt;<ref refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" kindref="member">getPT1000ChipSelectPin</ref>();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[</highlight><highlight class="stringliteral">&quot;bus&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(bound);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>out;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>serializeJson(doc,<sp/>out);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223" refid="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" refkind="member"><highlight class="normal">String<sp/><ref refid="class_temperature_controller_1a8a00b1def4b570d162ec718938f4ea26" kindref="member">TemperatureController::getSystemStatusJson</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>DynamicJsonDocument<sp/>doc(1024);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>doc[</highlight><highlight class="stringliteral">&quot;deviceId&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" kindref="member">deviceId</ref>;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>doc[</highlight><highlight class="stringliteral">&quot;firmwareVersion&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" kindref="member">firmwareVersion</ref>;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>doc[</highlight><highlight class="stringliteral">&quot;ds18b20Count&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="class_temperature_controller_1a9ac5f76def1895a8c8f8f92ce8cd2e5c" kindref="member">getDS18B20Count</ref>();</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>doc[</highlight><highlight class="stringliteral">&quot;pt1000Count&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="class_temperature_controller_1a6ab2ecc10c283d75d948ce6f1ad723a6" kindref="member">getPT1000Count</ref>();</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>doc[</highlight><highlight class="stringliteral">&quot;measurementPeriod&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" kindref="member">measurementPeriodSeconds</ref>;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>doc[</highlight><highlight class="stringliteral">&quot;uptime&quot;</highlight><highlight class="normal">]<sp/>=<sp/>millis()<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>JsonArray<sp/>statusArray<sp/>=<sp/>doc.createNestedArray(</highlight><highlight class="stringliteral">&quot;deviceStatus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>4;<sp/>i<sp/>&lt;=<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>statusArray.add(<ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.readHoldingRegister(i));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>jsonString;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>serializeJson(doc,<sp/>jsonString);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsonString;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242" refid="class_temperature_controller_1a1ecad2d878922493c93fe9baa9be10d3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a1ecad2d878922493c93fe9baa9be10d3" kindref="member">TemperatureController::resetMinMaxValues</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;SYSTEM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Min/Max<sp/>temperature<sp/>values<sp/>reset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>50;<sp/>++i)</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>[i].resetMinMaxTemp();</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>++i)</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>[i].resetMinMaxTemp();</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250" refid="class_temperature_controller_1a5a9f98c140498fee9a3dba8f8af1cb49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a5a9f98c140498fee9a3dba8f8af1cb49" kindref="member">TemperatureController::setDeviceId</ref>(uint16_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>oldId<sp/>=<sp/><ref refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" kindref="member">deviceId</ref>;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" kindref="member">deviceId</ref><sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.writeHoldingRegister(0,<sp/><ref refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" kindref="member">deviceId</ref>);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;CONFIG&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Device<sp/>ID<sp/>changed<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(oldId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(<ref refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" kindref="member">deviceId</ref>));</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258" refid="class_temperature_controller_1a3cd823f5e8f7eb810c4a2a212c5ee571" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="class_temperature_controller_1a3cd823f5e8f7eb810c4a2a212c5ee571" kindref="member">TemperatureController::getDeviceId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1af4f7af424307d77201faf663ae87ffe7" kindref="member">deviceId</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260" refid="class_temperature_controller_1a42c32522acc809f03f33d8d98414e793" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a42c32522acc809f03f33d8d98414e793" kindref="member">TemperatureController::setFirmwareVersion</ref>(uint16_t<sp/>version)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" kindref="member">firmwareVersion</ref><sp/>=<sp/>version;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a515b9f088ad00d4b7e106081c94a7d12" kindref="member">registerMap</ref>.writeHoldingRegister(1,<sp/><ref refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" kindref="member">firmwareVersion</ref>);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265" refid="class_temperature_controller_1a88ff416e5562313759bd3a11112e252c" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="class_temperature_controller_1a88ff416e5562313759bd3a11112e252c" kindref="member">TemperatureController::getFirmwareVersion</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a300c1fd1c2189cd64b8fc8ff4930e8b1" kindref="member">firmwareVersion</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267" refid="class_temperature_controller_1a08f5d97d74f6364588cf22dadd9a746e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a08f5d97d74f6364588cf22dadd9a746e" kindref="member">TemperatureController::setMeasurementPeriod</ref>(uint16_t<sp/>seconds)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" kindref="member">measurementPeriodSeconds</ref><sp/>=<sp/>seconds;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" kindref="member">measurementPeriodSeconds</ref><sp/>!=<sp/>seconds)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>oldPeriod<sp/>=<sp/><ref refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" kindref="member">measurementPeriodSeconds</ref>;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" kindref="member">measurementPeriodSeconds</ref><sp/>=<sp/>seconds;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;CONFIG&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Measurement<sp/>period<sp/>changed<sp/>from<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(oldPeriod)<sp/>+<sp/></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;s<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(<ref refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" kindref="member">measurementPeriodSeconds</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278" refid="class_temperature_controller_1a7465ffc80f89d566d53e97e4192a511f" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="class_temperature_controller_1a7465ffc80f89d566d53e97e4192a511f" kindref="member">TemperatureController::getMeasurementPeriod</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a288edd276dc0ab787c717ccd5c6b7f6d" kindref="member">measurementPeriodSeconds</ref>;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282" refid="class_temperature_controller_1af8bbcc01e36ebbabd6f9913280fc217f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1af8bbcc01e36ebbabd6f9913280fc217f" kindref="member">TemperatureController::setOneWireBusPin</ref>(uint8_t<sp/>pin,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bus)<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" kindref="member">oneWireBusPin</ref>[bus]<sp/>=<sp/>pin;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286" refid="class_temperature_controller_1a9ac5f76def1895a8c8f8f92ce8cd2e5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a9ac5f76def1895a8c8f8f92ce8cd2e5c" kindref="member">TemperatureController::getDS18B20Count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sensor<sp/>:<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296" refid="class_temperature_controller_1a6ab2ecc10c283d75d948ce6f1ad723a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a6ab2ecc10c283d75d948ce6f1ad723a6" kindref="member">TemperatureController::getPT1000Count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sensor<sp/>:<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" kindref="member">SensorType::PT1000</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306" refid="class_temperature_controller_1a23dca296a268baa9b8234c8bf9cf0c3e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a23dca296a268baa9b8234c8bf9cf0c3e" kindref="member">TemperatureController::updateAllSensors</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sensor<sp/>:<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor-&gt;readTemperature();</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sensor<sp/>:<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;getErrorStatus()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;Sensor*,<sp/>unsigned<sp/>long&gt;<sp/>lastErrorLog;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>log<sp/>errors<sp/>every<sp/>5<sp/>minutes<sp/>to<sp/>avoid<sp/>spam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastErrorLog[sensor]<sp/>==<sp/>0<sp/>||<sp/>(now<sp/>-<sp/>lastErrorLog[sensor])<sp/>&gt;<sp/>300000)<sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>sensorId<sp/>=<sp/>sensor-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref><sp/>?<sp/></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor-&gt;getDS18B20RomString()<sp/>:<sp/></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BUS<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(<ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(sensor));</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1aef24f00186213fa78be3b104a50d58e6" kindref="member">LoggerManager::error</ref>(</highlight><highlight class="stringliteral">&quot;SENSOR&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Sensor<sp/>error<sp/>detected:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>sensorId<sp/>+<sp/></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(Error<sp/>code:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(sensor-&gt;getErrorStatus())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastErrorLog[sensor]<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332" refid="class_temperature_controller_1aa4746563f439c7a0647d7932acd9ab04" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="class_temperature_controller_1aa4746563f439c7a0647d7932acd9ab04" kindref="member">TemperatureController::getOneWirePin</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bus)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" kindref="member">oneWireBusPin</ref>[bus];</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336" refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">TemperatureController::getSensorBus</ref>(<ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>sensor)<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;<ref refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" kindref="member">getType</ref>()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" kindref="member">SensorType::DS18B20</ref>){</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>pin<sp/>=<sp/>sensor-&gt;<ref refid="class_sensor_1ac42da3a37b0d6a9622344fe83f4c9047" kindref="member">getOneWirePin</ref>();</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1afbc751c9e13c2a827677dd559dc2face" kindref="member">oneWireBusPin</ref>[i]<sp/>==<sp/>pin)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sensor-&gt;<ref refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" kindref="member">getType</ref>()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" kindref="member">SensorType::PT1000</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>pin<sp/>=<sp/>sensor-&gt;<ref refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" kindref="member">getPT1000ChipSelectPin</ref>();</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a30c477f7419f2a5c9d40f9d8733b51e2" kindref="member">chipSelectPin</ref>[i]<sp/>==<sp/>pin)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356" refid="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1ad3819418f9f301f3f7047ba686a11be0" kindref="member">TemperatureController::unbindSensorFromPointBySensor</ref>(<ref refid="class_sensor" kindref="compound">Sensor</ref>*<sp/>sensor)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sensor)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>anyUnbound<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>through<sp/>all<sp/>DS18B20<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>point<sp/>:<sp/><ref refid="class_temperature_controller_1a1e844316402b71f262acbccf2eea1c72" kindref="member">dsPoints</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point.getBoundSensor()<sp/>==<sp/>sensor)<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.unbindSensor();</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Unbound<sp/>sensor<sp/>%s<sp/>from<sp/>DS18B20<sp/>point<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor-&gt;<ref refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" kindref="member">getName</ref>().c_str(),<sp/>point.getAddress());</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anyUnbound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Search<sp/>through<sp/>all<sp/>PT1000<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>point<sp/>:<sp/><ref refid="class_temperature_controller_1af7c6beb92cc3f0b60ade37d2f87d53de" kindref="member">ptPoints</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point.getBoundSensor()<sp/>==<sp/>sensor)<sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.unbindSensor();</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Unbound<sp/>sensor<sp/>%s<sp/>from<sp/>PT1000<sp/>point<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor-&gt;<ref refid="class_sensor_1a60ec96ed03660b42681c1bcc99007033" kindref="member">getName</ref>().c_str(),<sp/>point.getAddress());</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anyUnbound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>anyUnbound;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386" refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" kindref="member">TemperatureController::addAlarm</ref>(<ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref><sp/>type,<sp/>uint8_t<sp/>pointAddress,<sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref><sp/>priority)<sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point<sp/>=<sp/><ref refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" kindref="member">getMeasurementPoint</ref>(pointAddress);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!point)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>alarm<sp/>already<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>configKey<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;alarm_&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type));</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getConfigKey()<sp/>==<sp/>configKey)<sp/>{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>existing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;setPriority(priority);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;setEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>new<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>newAlarm<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>(type,<sp/>point,<sp/>priority);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newAlarm)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>delay;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(priority)<sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" kindref="member">AlarmPriority::PRIORITY_CRITICAL</ref>:</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" kindref="member">_acknowledgedDelayCritical</ref>;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" kindref="member">AlarmPriority::PRIORITY_HIGH</ref>:</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" kindref="member">_acknowledgedDelayHigh</ref>;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" kindref="member">AlarmPriority::PRIORITY_MEDIUM</ref>:</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" kindref="member">_acknowledgedDelayMedium</ref>;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" kindref="member">AlarmPriority::PRIORITY_LOW</ref>:</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" kindref="member">_acknowledgedDelayLow</ref>;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" kindref="member">_acknowledgedDelayMedium</ref>;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newAlarm-&gt;<ref refid="class_alarm_1a3f5329f9c026bad4f5171423fcaf51b0" kindref="member">setAcknowledgedDelay</ref>(delay);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>newAlarm-&gt;<ref refid="class_alarm_1ad116a3e8b622810e1769568fbac16379" kindref="member">setConfigKey</ref>(configKey);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.push_back(newAlarm);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Added<sp/>alarm<sp/>configuration:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>configKey.c_str());</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newAlarm)<sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point<sp/>=<sp/><ref refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" kindref="member">getMeasurementPoint</ref>(pointAddress);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>pointName<sp/>=<sp/>point<sp/>?<sp/>point-&gt;<ref refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" kindref="member">getName</ref>()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;ALARM_CONFIG&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Added<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>newAlarm-&gt;<ref refid="class_alarm_1abd578ec75a5ac9bce00b7ce7207c5d8c" kindref="member">getTypeString</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>alarm<sp/>for<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String(pointAddress)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>pointName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>with<sp/>priority<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1aa97ba23c998b2cfc732786e2307e60fa" kindref="member">_getPriorityString</ref>(priority));</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a0d52b0ff7bff22817e987ad753102854" kindref="member">LoggerManager::warning</ref>(</highlight><highlight class="stringliteral">&quot;ALARM_CONFIG&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>add<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>newAlarm-&gt;<ref refid="class_alarm_1abd578ec75a5ac9bce00b7ce7207c5d8c" kindref="member">getTypeString</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>alarm<sp/>for<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String(pointAddress));</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444" refid="class_temperature_controller_1ac39c426da2e1f9dff4abe1d9b550b723" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1ac39c426da2e1f9dff4abe1d9b550b723" kindref="member">TemperatureController::removeAlarm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>configKey)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it)-&gt;getConfigKey()<sp/>==<sp/>configKey)<sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*it;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.erase(it);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Removed<sp/>alarm<sp/>configuration:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>configKey.c_str());</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;ALARM_CONFIG&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Removed<sp/>alarm<sp/>configuration:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(configKey.c_str()));</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459" refid="class_temperature_controller_1a93bd31914a054a4e1df9be7e3966b82e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a93bd31914a054a4e1df9be7e3966b82e" kindref="member">TemperatureController::updateAlarm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>configKey,<sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref><sp/>priority,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enabled)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>alarm<sp/>=<sp/><ref refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" kindref="member">findAlarm</ref>(configKey);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!alarm)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>alarm-&gt;<ref refid="class_alarm_1a5095c54c304a52ebbaca5a2ea74059cd" kindref="member">setPriority</ref>(priority);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>alarm-&gt;<ref refid="class_alarm_1acb8f203b2e2317c1f835bb4b19123f3f" kindref="member">setEnabled</ref>(enabled);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Updated<sp/>alarm<sp/>configuration:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>configKey.c_str());</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469" refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" refkind="member"><highlight class="normal"><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/><ref refid="class_temperature_controller_1ae7d9c642f7ae697c2679e61d4da45868" kindref="member">TemperatureController::findAlarm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>configKey)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getConfigKey()<sp/>==<sp/>configKey)<sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarm;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478" refid="class_temperature_controller_1a0bd06377ae255b55a39e1fe3a44be4a9" refkind="member"><highlight class="normal"><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/><ref refid="class_temperature_controller_1a0bd06377ae255b55a39e1fe3a44be4a9" kindref="member">TemperatureController::getAlarmByIndex</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>idx<sp/>&lt;<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>.size())<sp/>?<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>[idx]<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Placeholder<sp/>methods<sp/>for<sp/>alarm<sp/>handling<sp/>scenarios</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485" refid="class_temperature_controller_1abc85cc6707cb18ce74f3daae2cd9ade0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1abc85cc6707cb18ce74f3daae2cd9ade0" kindref="member">TemperatureController::handleCriticalAlarms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Implement<sp/>critical<sp/>alarm<sp/>handling<sp/>scenario</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Turn<sp/>on<sp/>both<sp/>relays<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Red<sp/>LED<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Display<sp/>alarm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Wait<sp/>for<sp/>acknowledgment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>5-minute<sp/>delay<sp/>logic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494" refid="class_temperature_controller_1a1f106cc848aa45ecd8d9ab4808aef6d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a1f106cc848aa45ecd8d9ab4808aef6d1" kindref="member">TemperatureController::handleHighPriorityAlarms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Implement<sp/>high<sp/>priority<sp/>alarm<sp/>handling<sp/>scenario</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Different<sp/>behavior<sp/>than<sp/>critical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Maybe<sp/>only<sp/>one<sp/>relay,<sp/>yellow<sp/>LED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500" refid="class_temperature_controller_1a7da957a2899fb3b47d94d279c2099ca2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a7da957a2899fb3b47d94d279c2099ca2" kindref="member">TemperatureController::handleMediumPriorityAlarms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Implement<sp/>medium<sp/>priority<sp/>alarm<sp/>handling<sp/>scenario</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504" refid="class_temperature_controller_1a16cb79caee63ec4acdd539adbb74ba40" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a16cb79caee63ec4acdd539adbb74ba40" kindref="member">TemperatureController::handleLowPriorityAlarms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Implement<sp/>low<sp/>priority<sp/>alarm<sp/>handling<sp/>scenario</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509" refid="class_temperature_controller_1af4ab2c7b7a3934ab7837603a420b1ae2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1af4ab2c7b7a3934ab7837603a420b1ae2" kindref="member">TemperatureController::bindSensorToPointByBusNumber</ref>(uint8_t<sp/>busNumber,<sp/>uint8_t<sp/>pointAddress)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>PT1000<sp/>sensor<sp/>on<sp/>the<sp/>specified<sp/>bus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sensor<sp/>:<sp/><ref refid="class_temperature_controller_1a823f6289a0da9921e2c121eefa41bdd2" kindref="member">sensors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensor-&gt;getType()<sp/>==<sp/><ref refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" kindref="member">SensorType::PT1000</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>sensorBus<sp/>=<sp/><ref refid="class_temperature_controller_1a01e04714a1712aa10c34276850971a12" kindref="member">getSensorBus</ref>(sensor);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sensorBus<sp/>==<sp/>busNumber)<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_measurement_point" kindref="compound">MeasurementPoint</ref>*<sp/>point<sp/>=<sp/><ref refid="class_temperature_controller_1a494f057c234b4ff7526bde271aec9267" kindref="member">getMeasurementPoint</ref>(pointAddress);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point-&gt;<ref refid="class_measurement_point_1a3c3af28d9aabc9e5b9e2e370eaa29ce0" kindref="member">bindSensor</ref>(sensor);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Auto-enable<sp/>sensor<sp/>error<sp/>alarm<sp/>when<sp/>sensor<sp/>is<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarms<sp/>=<sp/><ref refid="class_temperature_controller_1a880028883101197527de57f626e14512" kindref="member">getAlarmsForPoint</ref>(point);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/>alarms)<sp/>{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getType()<sp/>==<sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" kindref="member">AlarmType::SENSOR_ERROR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;setEnabled(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Auto-enabled<sp/>sensor<sp/>error<sp/>alarm<sp/>for<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress));</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" kindref="member">LoggerManager::info</ref>(</highlight><highlight class="stringliteral">&quot;BINDING&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;PT1000<sp/>sensor<sp/>on<sp/>bus<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(busNumber)<sp/>+<sp/></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>bound<sp/>to<sp/>point<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>String(pointAddress));</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implement<sp/>the<sp/>setter<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545" refid="class_temperature_controller_1a1cf2a33257d4f089a304859b975663c3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a1cf2a33257d4f089a304859b975663c3" kindref="member">TemperatureController::setAcknowledgedDelayCritical</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>delay)<sp/>{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" kindref="member">_acknowledgedDelayCritical</ref><sp/>=<sp/>delay;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" kindref="member">applyAcknowledgedDelaysToAlarms</ref>();</highlight></codeline>
<codeline lineno="1548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550" refid="class_temperature_controller_1a365ac98348ce12de8938a687744c9f6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a365ac98348ce12de8938a687744c9f6c" kindref="member">TemperatureController::setAcknowledgedDelayHigh</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>delay)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" kindref="member">_acknowledgedDelayHigh</ref><sp/>=<sp/>delay;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" kindref="member">applyAcknowledgedDelaysToAlarms</ref>();</highlight></codeline>
<codeline lineno="1553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555" refid="class_temperature_controller_1a148e97ba76cb6bf3d3f45ddefe715320" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a148e97ba76cb6bf3d3f45ddefe715320" kindref="member">TemperatureController::setAcknowledgedDelayMedium</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>delay)<sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" kindref="member">_acknowledgedDelayMedium</ref><sp/>=<sp/>delay;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" kindref="member">applyAcknowledgedDelaysToAlarms</ref>();</highlight></codeline>
<codeline lineno="1558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560" refid="class_temperature_controller_1a87eeba5b5182d712bd9c361f37b933a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a87eeba5b5182d712bd9c361f37b933a8" kindref="member">TemperatureController::setAcknowledgedDelayLow</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>delay)<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" kindref="member">_acknowledgedDelayLow</ref><sp/>=<sp/>delay;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" kindref="member">applyAcknowledgedDelaysToAlarms</ref>();</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implement<sp/>the<sp/>getter<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566" refid="class_temperature_controller_1a565a282c8a8330005545d92686ae8a01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a565a282c8a8330005545d92686ae8a01" kindref="member">TemperatureController::getAcknowledgedDelayCritical</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" kindref="member">_acknowledgedDelayCritical</ref>;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570" refid="class_temperature_controller_1a90a8e6caf82ff5bdd1077b444c0c08d1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a90a8e6caf82ff5bdd1077b444c0c08d1" kindref="member">TemperatureController::getAcknowledgedDelayHigh</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" kindref="member">_acknowledgedDelayHigh</ref>;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574" refid="class_temperature_controller_1a9e1bfe23a47e8323e6fd50e1cf6ceafc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a9e1bfe23a47e8323e6fd50e1cf6ceafc" kindref="member">TemperatureController::getAcknowledgedDelayMedium</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" kindref="member">_acknowledgedDelayMedium</ref>;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578" refid="class_temperature_controller_1a81aeb69dc3a9e3bda9f06dcdcc567626" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a81aeb69dc3a9e3bda9f06dcdcc567626" kindref="member">TemperatureController::getAcknowledgedDelayLow</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" kindref="member">_acknowledgedDelayLow</ref>;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method<sp/>to<sp/>apply<sp/>delays<sp/>to<sp/>all<sp/>existing<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583" refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a3d678db2c823e16c81bddff4e4de10b0" kindref="member">TemperatureController::applyAcknowledgedDelaysToAlarms</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>delay;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(alarm-&gt;getPriority())<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" kindref="member">AlarmPriority::PRIORITY_CRITICAL</ref>:</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1a1c5431b7edf9fb6ad3d01a14feea3ceb" kindref="member">_acknowledgedDelayCritical</ref>;</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" kindref="member">AlarmPriority::PRIORITY_HIGH</ref>:</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1a9050a63502f4add174dbe997f480e1b2" kindref="member">_acknowledgedDelayHigh</ref>;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" kindref="member">AlarmPriority::PRIORITY_MEDIUM</ref>:</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" kindref="member">_acknowledgedDelayMedium</ref>;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" kindref="member">AlarmPriority::PRIORITY_LOW</ref>:</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1a40a6d2b670b8934247478a03bbdeebe0" kindref="member">_acknowledgedDelayLow</ref>;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/><ref refid="class_temperature_controller_1acdfdc317a9a70397ee9842b73b163b0b" kindref="member">_acknowledgedDelayMedium</ref>;<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>fallback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alarm-&gt;setAcknowledgedDelay(delay);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>apply<sp/>to<sp/>active<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(auto<sp/>alarm<sp/>:<sp/>_activeAlarms)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>delay;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>switch<sp/>(alarm-&gt;getPriority())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>AlarmPriority::PRIORITY_CRITICAL:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>_acknowledgedDelayCritical;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>AlarmPriority::PRIORITY_HIGH:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>_acknowledgedDelayHigh;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>AlarmPriority::PRIORITY_MEDIUM:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>_acknowledgedDelayMedium;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>AlarmPriority::PRIORITY_LOW:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>_acknowledgedDelayLow;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>=<sp/>_acknowledgedDelayMedium;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>alarm-&gt;setAcknowledgedDelay(delay);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>int<sp/>TemperatureController::getAlarmCount(AlarmPriority<sp/>priority)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>alarm<sp/>:<sp/>_configuredAlarms)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(alarm-&gt;isEnabled()<sp/>&amp;&amp;<sp/>alarm-&gt;getPriority()<sp/>==<sp/>priority)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>count;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>int<sp/>TemperatureController::getAlarmCount(AlarmStage<sp/>stage)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(auto<sp/>alarm<sp/>:<sp/>_configuredAlarms)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(alarm-&gt;isEnabled()<sp/>&amp;&amp;<sp/>alarm-&gt;getStage()<sp/>==<sp/>stage)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>count;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>these<sp/>method<sp/>implementations<sp/>to<sp/>TemperatureController.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652" refid="class_temperature_controller_1a7c12e116a7b79d1a103223a3caeb5cc7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">TemperatureController::getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref><sp/>priority,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>comparison)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;isEnabled()<sp/>&amp;&amp;<sp/><ref refid="class_temperature_controller_1a407b33d4603eaf6dd9623e86fdc7bf56" kindref="member">_comparePriority</ref>(alarm-&gt;getPriority(),<sp/>priority,<sp/>comparison))<sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662" refid="class_temperature_controller_1af969846ad52d5698fd7b12428a8ea0a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">TemperatureController::getAlarmCount</ref>(<ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eb" kindref="member">AlarmStage</ref><sp/>stage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>comparison)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;isEnabled()<sp/>&amp;&amp;<sp/><ref refid="class_temperature_controller_1a8dc59c2f0f60d4491da64b0c427312b5" kindref="member">_compareStage</ref>(alarm-&gt;getStage(),<sp/>stage,<sp/>comparison))<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672" refid="class_temperature_controller_1a654b817ff784d9a57d594ee18881f8ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a3022c7a72adb45a7800d5189eecdac4e" kindref="member">TemperatureController::getAlarmCount</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref><sp/>priority,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eb" kindref="member">AlarmStage</ref><sp/>stage,<sp/></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>priorityComparison,<sp/></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>stageComparison)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/><ref refid="class_temperature_controller_1a57ddffe7bca803a83c6ae54fff8b8633" kindref="member">_configuredAlarms</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;isEnabled()<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a407b33d4603eaf6dd9623e86fdc7bf56" kindref="member">_comparePriority</ref>(alarm-&gt;getPriority(),<sp/>priority,<sp/>priorityComparison)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a8dc59c2f0f60d4491da64b0c427312b5" kindref="member">_compareStage</ref>(alarm-&gt;getStage(),<sp/>stage,<sp/>stageComparison))<sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>these<sp/>helper<sp/>method<sp/>implementations<sp/>to<sp/>TemperatureController.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687" refid="class_temperature_controller_1a407b33d4603eaf6dd9623e86fdc7bf56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a407b33d4603eaf6dd9623e86fdc7bf56" kindref="member">TemperatureController::_comparePriority</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref><sp/>alarmPriority,<sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref><sp/>targetPriority,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>comparison)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alarmValue<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(alarmPriority);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>targetValue<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(targetPriority);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;gt&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>&gt;<sp/>targetValue;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;gte&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>&gt;=<sp/>targetValue;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lt&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>&lt;<sp/>targetValue;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lte&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>&lt;=<sp/>targetValue;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ne&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>!=<sp/>targetValue;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>to<sp/>&quot;==&quot;<sp/>or<sp/>&quot;eq&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>==<sp/>targetValue;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706" refid="class_temperature_controller_1a8dc59c2f0f60d4491da64b0c427312b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a8dc59c2f0f60d4491da64b0c427312b5" kindref="member">TemperatureController::_compareStage</ref>(<ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eb" kindref="member">AlarmStage</ref><sp/>alarmStage,<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eb" kindref="member">AlarmStage</ref><sp/>targetStage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>comparison)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alarmValue<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(alarmStage);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>targetValue<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(targetStage);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;gt&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>&gt;<sp/>targetValue;</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;gte&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>&gt;=<sp/>targetValue;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lt&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>&lt;<sp/>targetValue;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lte&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>&lt;=<sp/>targetValue;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal"><sp/>||<sp/>comparison<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ne&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>!=<sp/>targetValue;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>Default<sp/>to<sp/>&quot;==&quot;<sp/>or<sp/>&quot;eq&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alarmValue<sp/>==<sp/>targetValue;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726" refid="class_temperature_controller_1accf8eda6bd6ed08b84ee839fbb13cc31" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1accf8eda6bd6ed08b84ee839fbb13cc31" kindref="member">TemperatureController::_handleLowPriorityBlinking</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>elapsed<sp/>=<sp/>currentTime<sp/>-<sp/><ref refid="class_temperature_controller_1a75d981931fe5a8e5e8cc112ec0b1e08a" kindref="member">_lastLowPriorityBlinkTime</ref>;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1af5585a9f09291fc31296ac04c5de98ae" kindref="member">_lowPriorityBlinkState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Currently<sp/>ON<sp/>-<sp/>check<sp/>if<sp/>we<sp/>should<sp/>turn<sp/>OFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elapsed<sp/>&gt;=<sp/><ref refid="class_temperature_controller_1a61fc398934c455ec97bc25d6f3c59868" kindref="member">_blinkOnTime</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af5585a9f09291fc31296ac04c5de98ae" kindref="member">_lowPriorityBlinkState</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a75d981931fe5a8e5e8cc112ec0b1e08a" kindref="member">_lastLowPriorityBlinkTime</ref><sp/>=<sp/>currentTime;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Currently<sp/>OFF<sp/>-<sp/>check<sp/>if<sp/>we<sp/>should<sp/>turn<sp/>ON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elapsed<sp/>&gt;=<sp/><ref refid="class_temperature_controller_1aa0d8e0b6828ce6bdfee5b4a9464673e1" kindref="member">_blinkOffTime</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af5585a9f09291fc31296ac04c5de98ae" kindref="member">_lowPriorityBlinkState</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a75d981931fe5a8e5e8cc112ec0b1e08a" kindref="member">_lastLowPriorityBlinkTime</ref><sp/>=<sp/>currentTime;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746" refid="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a5637103784725fb1a73f6463d7cbfde6" kindref="member">TemperatureController::handleAlarmDisplay</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>alarm<sp/>queues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a477597992aa9362076843f37b648741a" kindref="member">_updateAlarmQueues</ref>();</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>button<sp/>press<sp/>for<sp/>acknowledgment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" kindref="member">_checkButtonPress</ref>();</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>alarm<sp/>display<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" kindref="member">_handleAlarmDisplayRotation</ref>();</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>indicator<sp/>blinking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.updateBlinking();</highlight></codeline>
<codeline lineno="1758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760" refid="class_temperature_controller_1a477597992aa9362076843f37b648741a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a477597992aa9362076843f37b648741a" kindref="member">TemperatureController::_updateAlarmQueues</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>.clear();</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" kindref="member">_acknowledgedAlarmsQueue</ref>.clear();</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>active<sp/>alarms<sp/>from<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Alarm*&gt;<sp/>allActiveAlarms<sp/>=<sp/><ref refid="class_temperature_controller_1af58201023d15de003d4f1b9a9771a9e3" kindref="member">getActiveAlarms</ref>();</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Separate<sp/>alarms<sp/>into<sp/>active<sp/>and<sp/>acknowledged<sp/>queues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>alarm<sp/>:<sp/>allActiveAlarms)<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!alarm)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getStage()<sp/>==<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" kindref="member">AlarmStage::ACTIVE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>.push_back(alarm);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alarm-&gt;getStage()<sp/>==<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" kindref="member">AlarmStage::ACKNOWLEDGED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" kindref="member">_acknowledgedAlarmsQueue</ref>.push_back(alarm);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>active<sp/>alarms<sp/>by<sp/>priority<sp/>(highest<sp/>first),<sp/>then<sp/>by<sp/>timestamp<sp/>(oldest<sp/>first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(<ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>.begin(),<sp/><ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>.end(),<sp/></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(a-&gt;getPriority()<sp/>!=<sp/>b-&gt;getPriority())<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;int&gt;(a-&gt;getPriority())<sp/>&gt;<sp/>static_cast&lt;int&gt;(b-&gt;getPriority());</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;<ref refid="class_alarm_1a7a4a3290a6a659542f82fe08a96736a8" kindref="member">getTimestamp</ref>()<sp/>&lt;<sp/>b-&gt;<ref refid="class_alarm_1a7a4a3290a6a659542f82fe08a96736a8" kindref="member">getTimestamp</ref>();</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>acknowledged<sp/>alarms<sp/>by<sp/>priority<sp/>(highest<sp/>first),<sp/>then<sp/>by<sp/>timestamp<sp/>(oldest<sp/>first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(_acknowledgedAlarmsQueue.begin(),<sp/>_acknowledgedAlarmsQueue.end(),</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_alarm" kindref="compound">Alarm</ref>*<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(a-&gt;getPriority()<sp/>!=<sp/>b-&gt;getPriority())<sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;int&gt;(a-&gt;getPriority())<sp/>&gt;<sp/>static_cast&lt;int&gt;(b-&gt;getPriority());</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;<ref refid="class_alarm_1a7a4a3290a6a659542f82fe08a96736a8" kindref="member">getTimestamp</ref>()<sp/>&lt;<sp/>b-&gt;<ref refid="class_alarm_1a7a4a3290a6a659542f82fe08a96736a8" kindref="member">getTimestamp</ref>();</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1796" refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" kindref="member">TemperatureController::_displayNextActiveAlarm</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref><sp/>&gt;=<sp/><ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>=<sp/><ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>[<ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref>];</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" kindref="member">_showingOK</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>OLED<sp/>is<sp/>turned<sp/>on<sp/>whenever<sp/>an<sp/>alarm<sp/>is<sp/>displayed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setOLEDOn();</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setOledMode(2);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>displayText<sp/>=<sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref>-&gt;getDisplayText();</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newlineIndex<sp/>=<sp/>displayText.indexOf(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>line1<sp/>=<sp/>displayText.substring(0,<sp/>newlineIndex);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>line2<sp/>=<sp/>displayText.substring(newlineIndex<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>displayLines[2]<sp/>=<sp/>{line1,<sp/>line2};</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.printText(displayLines,<sp/>2);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Displaying<sp/>active<sp/>alarm:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>displayText.c_str());</highlight></codeline>
<codeline lineno="1819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821" refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" kindref="member">TemperatureController::_displayNextAcknowledgedAlarm</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" kindref="member">_acknowledgedAlarmsQueue</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" kindref="member">_currentAcknowledgedAlarmIndex</ref><sp/>=<sp/>(<ref refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" kindref="member">_currentAcknowledgedAlarmIndex</ref><sp/>+<sp/>1)<sp/>%<sp/><ref refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" kindref="member">_acknowledgedAlarmsQueue</ref>.size();</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>=<sp/><ref refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" kindref="member">_acknowledgedAlarmsQueue</ref>[<ref refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" kindref="member">_currentAcknowledgedAlarmIndex</ref>];</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" kindref="member">_lastAlarmDisplayTime</ref><sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" kindref="member">_showingOK</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>OLED<sp/>is<sp/>turned<sp/>on<sp/>whenever<sp/>an<sp/>alarm<sp/>is<sp/>displayed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setOLEDOn();</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setOledMode(2);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>displayText<sp/>=<sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref>-&gt;getDisplayText();</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newlineIndex<sp/>=<sp/>displayText.indexOf(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>line1<sp/>=<sp/>displayText.substring(0,<sp/>newlineIndex);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>line2<sp/>=<sp/>displayText.substring(newlineIndex<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/>displayLines[2]<sp/>=<sp/>{line1,<sp/>line2};</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.printText(displayLines,<sp/>2);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Displaying<sp/>acknowledged<sp/>alarm:<sp/>%s<sp/>(%d/%d)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>displayText.c_str(),</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" kindref="member">_currentAcknowledgedAlarmIndex</ref><sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" kindref="member">_acknowledgedAlarmsQueue</ref>.size());</highlight></codeline>
<codeline lineno="1846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848" refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a1d2745c323f7094beac8f406825499b7" kindref="member">TemperatureController::_handleAlarmDisplayRotation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Priority<sp/>1:<sp/>Display<sp/>active<sp/>alarms<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1aa881d2bbb58b22ac952aa781d997ee01" kindref="member">_displayingActiveAlarm</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a4f0672d3b309325c9c2e75c75bafc154" kindref="member">_currentAcknowledgedAlarmIndex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Always<sp/>turn<sp/>on<sp/>OLED<sp/>when<sp/>there<sp/>are<sp/>active<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setOLEDOn();</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a7ca5124357f98bcd52316cf017341b09" kindref="member">_displayNextActiveAlarm</ref>();</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>&amp;&amp;<sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref>-&gt;getStage()<sp/>==<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" kindref="member">AlarmStage::ACKNOWLEDGED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref>++;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref><sp/>&gt;=<sp/><ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Priority<sp/>2:<sp/>Display<sp/>acknowledged<sp/>alarms<sp/>in<sp/>round-robin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_temperature_controller_1a484a2c1885c26905cb9c5c01e3518fe1" kindref="member">_acknowledgedAlarmsQueue</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1aa881d2bbb58b22ac952aa781d997ee01" kindref="member">_displayingActiveAlarm</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Always<sp/>turn<sp/>on<sp/>OLED<sp/>when<sp/>there<sp/>are<sp/>acknowledged<sp/>alarms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setOLEDOn();</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref>-&gt;getStage()<sp/>!=<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" kindref="member">AlarmStage::ACKNOWLEDGED</ref><sp/>||</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTime<sp/>-<sp/><ref refid="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" kindref="member">_lastAlarmDisplayTime</ref><sp/>&gt;=<sp/><ref refid="class_temperature_controller_1ada41526711cb0489adb0714b9ebe5072" kindref="member">_acknowledgedAlarmDisplayDelay</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1ac44de0834e13cec755e247ce1df21f09" kindref="member">_displayNextAcknowledgedAlarm</ref>();</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>alarms<sp/>to<sp/>display<sp/>-<sp/>show<sp/>OK<sp/>and<sp/>turn<sp/>off<sp/>OLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>&amp;&amp;<sp/>!<ref refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" kindref="member">_showingOK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a28e81945f5235e161e6c532b428d36d2" kindref="member">_showOKAndTurnOffOLED</ref>();</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" kindref="member">_showingOK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentTime<sp/>-<sp/><ref refid="class_temperature_controller_1a473053bec0dba7d493499df05cd53fa8" kindref="member">_okDisplayStartTime</ref><sp/>&gt;=<sp/>60000)<sp/>{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.setOLEDOff();</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a745fcf9b8c78e39222c4a2e5d9fbcf11" kindref="member">_showingOK</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a4d36576f7d6ab8f5222a082878314912" kindref="member">_updateNormalDisplay</ref>();</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898" refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_temperature_controller_1a1228b63e95f26c21a8d9c2a27928bc75" kindref="member">TemperatureController::_checkButtonPress</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>existing<sp/>indicator<sp/>interface<sp/>button<sp/>reading<sp/>with<sp/>built-in<sp/>debouncing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>currentButtonState<sp/>=<sp/><ref refid="class_temperature_controller_1afa8ea33dcae793f871130c8ba52ba4e9" kindref="member">indicator</ref>.readPort(</highlight><highlight class="stringliteral">&quot;BUTTON&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detect<sp/>button<sp/>press<sp/>(button<sp/>pressed<sp/>=<sp/>true<sp/>based<sp/>on<sp/>your<sp/>configuration)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentButtonState<sp/>&amp;&amp;<sp/>!<ref refid="class_temperature_controller_1a6ffb5c63a3108e25e3224b77e0a661dc" kindref="member">_lastButtonState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Button<sp/>was<sp/>just<sp/>pressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1aa881d2bbb58b22ac952aa781d997ee01" kindref="member">_displayingActiveAlarm</ref><sp/>&amp;&amp;<sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref><sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref>-&gt;getStage()<sp/>==<sp/><ref refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" kindref="member">AlarmStage::ACTIVE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref>-&gt;acknowledge();</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.printf(</highlight><highlight class="stringliteral">&quot;Button<sp/>pressed<sp/>-<sp/>Acknowledged<sp/>alarm:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a98355f65a59f91b4e5d5c8e70e5e7695" kindref="member">_currentDisplayedAlarm</ref>-&gt;getDisplayText().c_str());</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>next<sp/>active<sp/>alarm<sp/>or<sp/>switch<sp/>to<sp/>acknowledged<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref>++;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref><sp/>&gt;=<sp/><ref refid="class_temperature_controller_1abf364877d51972d37a55e8110aad7506" kindref="member">_activeAlarmsQueue</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a21c88d4fb28ca5365b082de0790d861c" kindref="member">_currentActiveAlarmIndex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>immediate<sp/>update<sp/>of<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1af5090245265f1d7bacc7e9e545fc240d" kindref="member">_lastAlarmDisplayTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_temperature_controller_1a6ffb5c63a3108e25e3224b77e0a661dc" kindref="member">_lastButtonState</ref><sp/>=<sp/>currentButtonState;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>method<sp/>to<sp/>get<sp/>priority<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933" refid="class_temperature_controller_1a38e9fe7d49bc58f1c6b5f1021ed1c045" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/><ref refid="class_temperature_controller_1a38e9fe7d49bc58f1c6b5f1021ed1c045" kindref="member">TemperatureController::_getAlarmTypeString</ref>(<ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2" kindref="member">AlarmType</ref><sp/>type)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" kindref="member">AlarmType::HIGH_TEMPERATURE</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;HIGH_TEMP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" kindref="member">AlarmType::LOW_TEMPERATURE</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;LOW_TEMP&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" kindref="member">AlarmType::SENSOR_ERROR</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;SENSOR_ERROR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2ab4fed37e8cab6ef5684a361be786d8de" kindref="member">AlarmType::SENSOR_DISCONNECTED</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;DISCONNECTED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;UNKNOWN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1943" refid="class_temperature_controller_1aa97ba23c998b2cfc732786e2307e60fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>String<sp/><ref refid="class_temperature_controller_1aa97ba23c998b2cfc732786e2307e60fa" kindref="member">TemperatureController::_getPriorityString</ref>(<ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321b" kindref="member">AlarmPriority</ref><sp/>priority)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(priority)<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" kindref="member">AlarmPriority::PRIORITY_LOW</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;LOW&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" kindref="member">AlarmPriority::PRIORITY_MEDIUM</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;MEDIUM&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" kindref="member">AlarmPriority::PRIORITY_HIGH</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;HIGH&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" kindref="member">AlarmPriority::PRIORITY_CRITICAL</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;CRITICAL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;UNKNOWN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/TemperatureController.cpp"/>
  </compounddef>
</doxygen>
