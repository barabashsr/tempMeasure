<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_measurement_point" kind="class" language="C++" prot="public">
    <compoundname>MeasurementPoint</compoundname>
    <includes refid="_measurement_point_8h" local="no">MeasurementPoint.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_measurement_point_1a13e1f193f0588973d8fe6b836ebe0fb9" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t MeasurementPoint::address</definition>
        <argsstring></argsstring>
        <name>address</name>
        <qualifiedname>MeasurementPoint::address</qualifiedname>
        <briefdescription>
<para>Unique measurement point address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="163" column="13" bodyfile="include/MeasurementPoint.h" bodystart="163" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" compoundref="_measurement_point_8cpp" startline="45" endline="47">getAddress</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" compoundref="_measurement_point_8cpp" startline="106" endline="116">setHighAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" compoundref="_measurement_point_8cpp" startline="92" endline="104">setLowAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1ae3abe83ed3e7979a906c7d753ac9d22d" compoundref="_measurement_point_8cpp" startline="81" endline="90">setName</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_measurement_point_1aa689590a454a7e11401a59e0399e66f4" prot="private" static="no" mutable="no">
        <type>String</type>
        <definition>String MeasurementPoint::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <qualifiedname>MeasurementPoint::name</qualifiedname>
        <briefdescription>
<para>Human-readable measurement point name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="164" column="12" bodyfile="include/MeasurementPoint.h" bodystart="164" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">getName</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" compoundref="_measurement_point_8cpp" startline="106" endline="116">setHighAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" compoundref="_measurement_point_8cpp" startline="92" endline="104">setLowAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1ae3abe83ed3e7979a906c7d753ac9d22d" compoundref="_measurement_point_8cpp" startline="81" endline="90">setName</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_measurement_point_1ada9ba45e500305e667f2a489603e84a8" prot="private" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::currentTemp</definition>
        <argsstring></argsstring>
        <name>currentTemp</name>
        <qualifiedname>MeasurementPoint::currentTemp</qualifiedname>
        <briefdescription>
<para>Latest temperature reading (Â°C) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="166" column="13" bodyfile="include/MeasurementPoint.h" bodystart="166" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" compoundref="_measurement_point_8cpp" startline="53" endline="55">getCurrentTemp</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a6a78c850d05aa4ae8151e5e9f828fce0" compoundref="_measurement_point_8cpp" startline="148" endline="151">resetMinMaxTemp</referencedby>
        <referencedby refid="class_measurement_point_1a3c6d3325a506e8797bc759f15b70391f" compoundref="_measurement_point_8cpp" startline="130" endline="146">update</referencedby>
        <referencedby refid="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" compoundref="_measurement_point_8cpp" startline="153" endline="158">updateAlarmStatus</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_measurement_point_1a2848f528b229967f371cc83e394b26fb" prot="private" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::minTemp</definition>
        <argsstring></argsstring>
        <name>minTemp</name>
        <qualifiedname>MeasurementPoint::minTemp</qualifiedname>
        <briefdescription>
<para>Minimum recorded temperature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="167" column="13" bodyfile="include/MeasurementPoint.h" bodystart="167" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1adc31f012462c1623617d5f362bcb2c59" compoundref="_measurement_point_8cpp" startline="57" endline="59">getMinTemp</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a6a78c850d05aa4ae8151e5e9f828fce0" compoundref="_measurement_point_8cpp" startline="148" endline="151">resetMinMaxTemp</referencedby>
        <referencedby refid="class_measurement_point_1a3c6d3325a506e8797bc759f15b70391f" compoundref="_measurement_point_8cpp" startline="130" endline="146">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_measurement_point_1a38e188f2325f505993d55fa7a2d3e169" prot="private" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::maxTemp</definition>
        <argsstring></argsstring>
        <name>maxTemp</name>
        <qualifiedname>MeasurementPoint::maxTemp</qualifiedname>
        <briefdescription>
<para>Maximum recorded temperature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="168" column="13" bodyfile="include/MeasurementPoint.h" bodystart="168" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1a8677e00e0be369d7874f4982990dc56d" compoundref="_measurement_point_8cpp" startline="61" endline="63">getMaxTemp</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a6a78c850d05aa4ae8151e5e9f828fce0" compoundref="_measurement_point_8cpp" startline="148" endline="151">resetMinMaxTemp</referencedby>
        <referencedby refid="class_measurement_point_1a3c6d3325a506e8797bc759f15b70391f" compoundref="_measurement_point_8cpp" startline="130" endline="146">update</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_measurement_point_1a3f1d2653a05ccfa24d2305f5b07e35db" prot="private" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::lowAlarmThreshold</definition>
        <argsstring></argsstring>
        <name>lowAlarmThreshold</name>
        <qualifiedname>MeasurementPoint::lowAlarmThreshold</qualifiedname>
        <briefdescription>
<para>Low temperature alarm threshold. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="169" column="13" bodyfile="include/MeasurementPoint.h" bodystart="169" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" compoundref="_measurement_point_8cpp" startline="65" endline="67">getLowAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" compoundref="_measurement_point_8cpp" startline="92" endline="104">setLowAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" compoundref="_measurement_point_8cpp" startline="153" endline="158">updateAlarmStatus</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_measurement_point_1a63f7bd3c914d6b77bc6828cc83f4fef6" prot="private" static="no" mutable="no">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::highAlarmThreshold</definition>
        <argsstring></argsstring>
        <name>highAlarmThreshold</name>
        <qualifiedname>MeasurementPoint::highAlarmThreshold</qualifiedname>
        <briefdescription>
<para>High temperature alarm threshold. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="170" column="13" bodyfile="include/MeasurementPoint.h" bodystart="170" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" compoundref="_measurement_point_8cpp" startline="69" endline="71">getHighAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" compoundref="_measurement_point_8cpp" startline="106" endline="116">setHighAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" compoundref="_measurement_point_8cpp" startline="153" endline="158">updateAlarmStatus</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_measurement_point_1a18c9fe4e70a4cc17473fd9df8a3c6b68" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t MeasurementPoint::alarmStatus</definition>
        <argsstring></argsstring>
        <name>alarmStatus</name>
        <qualifiedname>MeasurementPoint::alarmStatus</qualifiedname>
        <briefdescription>
<para>Bit field for alarm conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="171" column="13" bodyfile="include/MeasurementPoint.h" bodystart="171" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1a1421d744f7982e528a579da02adb1919" compoundref="_measurement_point_8cpp" startline="73" endline="75">getAlarmStatus</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" compoundref="_measurement_point_8cpp" startline="153" endline="158">updateAlarmStatus</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_measurement_point_1a9b17fba6e1ea928d4aa88abf28731fc7" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t MeasurementPoint::errorStatus</definition>
        <argsstring></argsstring>
        <name>errorStatus</name>
        <qualifiedname>MeasurementPoint::errorStatus</qualifiedname>
        <briefdescription>
<para>Bit field for error conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="172" column="13" bodyfile="include/MeasurementPoint.h" bodystart="172" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1a3fb0693931f12190a7f96e5d6be51b51" compoundref="_measurement_point_8cpp" startline="77" endline="79">getErrorStatus</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a3c6d3325a506e8797bc759f15b70391f" compoundref="_measurement_point_8cpp" startline="130" endline="146">update</referencedby>
        <referencedby refid="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" compoundref="_measurement_point_8cpp" startline="153" endline="158">updateAlarmStatus</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_measurement_point_1a2bd6f123317fd8ff0ed22be09a7ac495" prot="private" static="no" mutable="no">
        <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
        <definition>Sensor* MeasurementPoint::boundSensor</definition>
        <argsstring></argsstring>
        <name>boundSensor</name>
        <qualifiedname>MeasurementPoint::boundSensor</qualifiedname>
        <briefdescription>
<para>Pointer to bound physical sensor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="174" column="12" bodyfile="include/MeasurementPoint.h" bodystart="174" bodyend="-1"/>
        <referencedby refid="class_measurement_point_1a3c3af28d9aabc9e5b9e2e370eaa29ce0" compoundref="_measurement_point_8cpp" startline="118" endline="120">bindSensor</referencedby>
        <referencedby refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">getBoundSensor</referencedby>
        <referencedby refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" compoundref="_measurement_point_8h" startline="37" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" compoundref="_measurement_point_8cpp" startline="24" endline="38">MeasurementPoint</referencedby>
        <referencedby refid="class_measurement_point_1ab93923a15b7e55af89d1269b681fb856" compoundref="_measurement_point_8cpp" startline="122" endline="124">unbindSensor</referencedby>
        <referencedby refid="class_measurement_point_1a3c6d3325a506e8797bc759f15b70391f" compoundref="_measurement_point_8cpp" startline="130" endline="146">update</referencedby>
        <referencedby refid="class_measurement_point_1a8ee3863bb5548fe9c919234aff8ee0b6" compoundref="_measurement_point_8cpp" startline="40" endline="43">~MeasurementPoint</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MeasurementPoint::MeasurementPoint</definition>
        <argsstring>()</argsstring>
        <name>MeasurementPoint</name>
        <qualifiedname>MeasurementPoint::MeasurementPoint</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes measurement point with default values and safe ranges </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="37" column="5" bodyfile="include/MeasurementPoint.h" bodystart="37" bodyend="38"/>
        <references refid="class_measurement_point_1a13e1f193f0588973d8fe6b836ebe0fb9" compoundref="_measurement_point_8h" startline="163">address</references>
        <references refid="class_measurement_point_1a18c9fe4e70a4cc17473fd9df8a3c6b68" compoundref="_measurement_point_8h" startline="171">alarmStatus</references>
        <references refid="class_measurement_point_1a2bd6f123317fd8ff0ed22be09a7ac495" compoundref="_measurement_point_8h" startline="174">boundSensor</references>
        <references refid="class_measurement_point_1ada9ba45e500305e667f2a489603e84a8" compoundref="_measurement_point_8h" startline="166">currentTemp</references>
        <references refid="class_measurement_point_1a9b17fba6e1ea928d4aa88abf28731fc7" compoundref="_measurement_point_8h" startline="172">errorStatus</references>
        <references refid="class_measurement_point_1a63f7bd3c914d6b77bc6828cc83f4fef6" compoundref="_measurement_point_8h" startline="170">highAlarmThreshold</references>
        <references refid="class_measurement_point_1a3f1d2653a05ccfa24d2305f5b07e35db" compoundref="_measurement_point_8h" startline="169">lowAlarmThreshold</references>
        <references refid="class_measurement_point_1a38e188f2325f505993d55fa7a2d3e169" compoundref="_measurement_point_8h" startline="168">maxTemp</references>
        <references refid="class_measurement_point_1a2848f528b229967f371cc83e394b26fb" compoundref="_measurement_point_8h" startline="167">minTemp</references>
        <references refid="class_measurement_point_1aa689590a454a7e11401a59e0399e66f4" compoundref="_measurement_point_8h" startline="164">name</references>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MeasurementPoint::MeasurementPoint</definition>
        <argsstring>(uint8_t address, const String &amp;name)</argsstring>
        <name>MeasurementPoint</name>
        <qualifiedname>MeasurementPoint::MeasurementPoint</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Constructor with address and name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique address for this measurement point (0-255) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Human-readable name for the measurement point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="45" column="5" bodyfile="src/MeasurementPoint.cpp" bodystart="24" bodyend="38"/>
        <references refid="class_measurement_point_1a13e1f193f0588973d8fe6b836ebe0fb9" compoundref="_measurement_point_8h" startline="163">address</references>
        <references refid="class_measurement_point_1a18c9fe4e70a4cc17473fd9df8a3c6b68" compoundref="_measurement_point_8h" startline="171">alarmStatus</references>
        <references refid="class_measurement_point_1a2bd6f123317fd8ff0ed22be09a7ac495" compoundref="_measurement_point_8h" startline="174">boundSensor</references>
        <references refid="class_measurement_point_1ada9ba45e500305e667f2a489603e84a8" compoundref="_measurement_point_8h" startline="166">currentTemp</references>
        <references refid="class_measurement_point_1a9b17fba6e1ea928d4aa88abf28731fc7" compoundref="_measurement_point_8h" startline="172">errorStatus</references>
        <references refid="class_measurement_point_1a63f7bd3c914d6b77bc6828cc83f4fef6" compoundref="_measurement_point_8h" startline="170">highAlarmThreshold</references>
        <references refid="class_measurement_point_1a3f1d2653a05ccfa24d2305f5b07e35db" compoundref="_measurement_point_8h" startline="169">lowAlarmThreshold</references>
        <references refid="class_measurement_point_1a38e188f2325f505993d55fa7a2d3e169" compoundref="_measurement_point_8h" startline="168">maxTemp</references>
        <references refid="class_measurement_point_1a2848f528b229967f371cc83e394b26fb" compoundref="_measurement_point_8h" startline="167">minTemp</references>
        <references refid="class_measurement_point_1aa689590a454a7e11401a59e0399e66f4" compoundref="_measurement_point_8h" startline="164">name</references>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a8ee3863bb5548fe9c919234aff8ee0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MeasurementPoint::~MeasurementPoint</definition>
        <argsstring>()</argsstring>
        <name>~MeasurementPoint</name>
        <qualifiedname>MeasurementPoint::~MeasurementPoint</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up resources and unbinds any attached sensor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="51" column="5" bodyfile="src/MeasurementPoint.cpp" bodystart="40" bodyend="43"/>
        <references refid="class_measurement_point_1a2bd6f123317fd8ff0ed22be09a7ac495" compoundref="_measurement_point_8h" startline="174">boundSensor</references>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MeasurementPoint::getAddress</definition>
        <argsstring>() const</argsstring>
        <name>getAddress</name>
        <qualifiedname>MeasurementPoint::getAddress</qualifiedname>
        <briefdescription>
<para>Get measurement point address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t Unique address (0-255) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="58" column="13" bodyfile="src/MeasurementPoint.cpp" bodystart="45" bodyend="47"/>
        <references refid="class_measurement_point_1a13e1f193f0588973d8fe6b836ebe0fb9" compoundref="_measurement_point_8h" startline="163">address</references>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">CSVConfigManager::_exportPointToCSV</referencedby>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1332" endline="1972">ConfigManager::alarmsAPI</referencedby>
        <referencedby refid="class_register_map_1a1f102e7d0dd51d4750c916fb6e32c37a" compoundref="_register_map_8cpp" startline="198" endline="205">RegisterMap::applyConfigFromMeasurementPoint</referencedby>
        <referencedby refid="class_register_map_1aa2f819b22096b8c14c421b415f7e83b7" compoundref="_register_map_8cpp" startline="189" endline="196">RegisterMap::applyConfigToMeasurementPoint</referencedby>
        <referencedby refid="class_temperature_controller_1aa64384fb8503814b46a7d55f53ccb53a" compoundref="_temperature_controller_8cpp" startline="330" endline="352">TemperatureController::createAlarm</referencedby>
        <referencedby refid="class_temperature_controller_1ad174e0411bd48422d8e3812fd28a7a0b" compoundref="_temperature_controller_8cpp" startline="418" endline="455">TemperatureController::ensureAlarmsForPoint</referencedby>
        <referencedby refid="class_temperature_controller_1a880028883101197527de57f626e14512" compoundref="_temperature_controller_8cpp" startline="457" endline="470">TemperatureController::getAlarmsForPoint</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="338" endline="431">ConfigManager::savePointsConfig</referencedby>
        <referencedby refid="class_register_map_1a2940213459a183fc06a2226f1cd1a48b" compoundref="_register_map_8cpp" startline="176" endline="187">RegisterMap::updateFromMeasurementPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String MeasurementPoint::getName</definition>
        <argsstring>() const</argsstring>
        <name>getName</name>
        <qualifiedname>MeasurementPoint::getName</qualifiedname>
        <briefdescription>
<para>Get measurement point name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String Human-readable name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="64" column="12" bodyfile="src/MeasurementPoint.cpp" bodystart="49" bodyend="51"/>
        <references refid="class_measurement_point_1aa689590a454a7e11401a59e0399e66f4" compoundref="_measurement_point_8h" startline="164">name</references>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">CSVConfigManager::_exportPointToCSV</referencedby>
        <referencedby refid="class_logger_manager_1aab43f573f73cfe426cfbea04a9fdd3ee" compoundref="_logger_manager_8cpp" startline="282" endline="301">LoggerManager::_generateCSVHeader</referencedby>
        <referencedby refid="class_temperature_controller_1ac5c3403746d7c850bf7929bf5ee3448a" compoundref="_temperature_controller_8cpp" startline="1544" endline="1600">TemperatureController::addAlarm</referencedby>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1332" endline="1972">ConfigManager::alarmsAPI</referencedby>
        <referencedby refid="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" compoundref="_temperature_controller_8cpp" startline="1048" endline="1070">TemperatureController::bindSensorToPointByChipSelect</referencedby>
        <referencedby refid="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" compoundref="_temperature_controller_8cpp" startline="1023" endline="1046">TemperatureController::bindSensorToPointByRom</referencedby>
        <referencedby refid="class_config_manager_1a3b28982c79587a287c8ddf0acf47f71d" compoundref="_config_manager_8cpp" startline="2233" endline="2801">ConfigManager::downloadAPI</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1288" endline="1331">ConfigManager::pointsAPI</referencedby>
        <referencedby refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="338" endline="431">ConfigManager::savePointsConfig</referencedby>
        <referencedby refid="class_temperature_controller_1a261c9b96540ec6680dfffd3a26e4ca00" compoundref="_temperature_controller_8cpp" startline="1072" endline="1093">TemperatureController::unbindSensorFromPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::getCurrentTemp</definition>
        <argsstring>() const</argsstring>
        <name>getCurrentTemp</name>
        <qualifiedname>MeasurementPoint::getCurrentTemp</qualifiedname>
        <briefdescription>
<para>Get current temperature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int16_t Current temperature in Â°C (integer) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="70" column="13" bodyfile="src/MeasurementPoint.cpp" bodystart="53" bodyend="55"/>
        <references refid="class_measurement_point_1ada9ba45e500305e667f2a489603e84a8" compoundref="_measurement_point_8h" startline="166">currentTemp</references>
        <referencedby refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" compoundref="_temperature_controller_8cpp" startline="292" endline="315">TemperatureController::_checkPointForAlarms</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">CSVConfigManager::_exportPointToCSV</referencedby>
        <referencedby refid="class_logger_manager_1aa6938b6a5c002d6ed72ef352f0cc7a19" compoundref="_logger_manager_8cpp" startline="324" endline="358">LoggerManager::_writeDataRow</referencedby>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1332" endline="1972">ConfigManager::alarmsAPI</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_register_map_1a2940213459a183fc06a2226f1cd1a48b" compoundref="_register_map_8cpp" startline="176" endline="187">RegisterMap::updateFromMeasurementPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1adc31f012462c1623617d5f362bcb2c59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::getMinTemp</definition>
        <argsstring>() const</argsstring>
        <name>getMinTemp</name>
        <qualifiedname>MeasurementPoint::getMinTemp</qualifiedname>
        <briefdescription>
<para>Get minimum recorded temperature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int16_t Minimum temperature since last reset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="76" column="13" bodyfile="src/MeasurementPoint.cpp" bodystart="57" bodyend="59"/>
        <references refid="class_measurement_point_1a2848f528b229967f371cc83e394b26fb" compoundref="_measurement_point_8h" startline="167">minTemp</references>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">CSVConfigManager::_exportPointToCSV</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_register_map_1a2940213459a183fc06a2226f1cd1a48b" compoundref="_register_map_8cpp" startline="176" endline="187">RegisterMap::updateFromMeasurementPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a8677e00e0be369d7874f4982990dc56d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::getMaxTemp</definition>
        <argsstring>() const</argsstring>
        <name>getMaxTemp</name>
        <qualifiedname>MeasurementPoint::getMaxTemp</qualifiedname>
        <briefdescription>
<para>Get maximum recorded temperature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int16_t Maximum temperature since last reset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="82" column="13" bodyfile="src/MeasurementPoint.cpp" bodystart="61" bodyend="63"/>
        <references refid="class_measurement_point_1a38e188f2325f505993d55fa7a2d3e169" compoundref="_measurement_point_8h" startline="168">maxTemp</references>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">CSVConfigManager::_exportPointToCSV</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_register_map_1a2940213459a183fc06a2226f1cd1a48b" compoundref="_register_map_8cpp" startline="176" endline="187">RegisterMap::updateFromMeasurementPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::getLowAlarmThreshold</definition>
        <argsstring>() const</argsstring>
        <name>getLowAlarmThreshold</name>
        <qualifiedname>MeasurementPoint::getLowAlarmThreshold</qualifiedname>
        <briefdescription>
<para>Get low alarm threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int16_t Low temperature alarm threshold in Â°C </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="88" column="13" bodyfile="src/MeasurementPoint.cpp" bodystart="65" bodyend="67"/>
        <references refid="class_measurement_point_1a3f1d2653a05ccfa24d2305f5b07e35db" compoundref="_measurement_point_8h" startline="169">lowAlarmThreshold</references>
        <referencedby refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" compoundref="_temperature_controller_8cpp" startline="292" endline="315">TemperatureController::_checkPointForAlarms</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">CSVConfigManager::_exportPointToCSV</referencedby>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1332" endline="1972">ConfigManager::alarmsAPI</referencedby>
        <referencedby refid="class_register_map_1a1f102e7d0dd51d4750c916fb6e32c37a" compoundref="_register_map_8cpp" startline="198" endline="205">RegisterMap::applyConfigFromMeasurementPoint</referencedby>
        <referencedby refid="class_config_manager_1a3b28982c79587a287c8ddf0acf47f71d" compoundref="_config_manager_8cpp" startline="2233" endline="2801">ConfigManager::downloadAPI</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1288" endline="1331">ConfigManager::pointsAPI</referencedby>
        <referencedby refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="338" endline="431">ConfigManager::savePointsConfig</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t MeasurementPoint::getHighAlarmThreshold</definition>
        <argsstring>() const</argsstring>
        <name>getHighAlarmThreshold</name>
        <qualifiedname>MeasurementPoint::getHighAlarmThreshold</qualifiedname>
        <briefdescription>
<para>Get high alarm threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int16_t High temperature alarm threshold in Â°C </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="94" column="13" bodyfile="src/MeasurementPoint.cpp" bodystart="69" bodyend="71"/>
        <references refid="class_measurement_point_1a63f7bd3c914d6b77bc6828cc83f4fef6" compoundref="_measurement_point_8h" startline="170">highAlarmThreshold</references>
        <referencedby refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" compoundref="_temperature_controller_8cpp" startline="292" endline="315">TemperatureController::_checkPointForAlarms</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">CSVConfigManager::_exportPointToCSV</referencedby>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1332" endline="1972">ConfigManager::alarmsAPI</referencedby>
        <referencedby refid="class_register_map_1a1f102e7d0dd51d4750c916fb6e32c37a" compoundref="_register_map_8cpp" startline="198" endline="205">RegisterMap::applyConfigFromMeasurementPoint</referencedby>
        <referencedby refid="class_config_manager_1a3b28982c79587a287c8ddf0acf47f71d" compoundref="_config_manager_8cpp" startline="2233" endline="2801">ConfigManager::downloadAPI</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1288" endline="1331">ConfigManager::pointsAPI</referencedby>
        <referencedby refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="338" endline="431">ConfigManager::savePointsConfig</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a1421d744f7982e528a579da02adb1919" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MeasurementPoint::getAlarmStatus</definition>
        <argsstring>() const</argsstring>
        <name>getAlarmStatus</name>
        <qualifiedname>MeasurementPoint::getAlarmStatus</qualifiedname>
        <briefdescription>
<para>Get alarm status bits. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t Bit field representing active alarms </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="100" column="13" bodyfile="src/MeasurementPoint.cpp" bodystart="73" bodyend="75"/>
        <references refid="class_measurement_point_1a18c9fe4e70a4cc17473fd9df8a3c6b68" compoundref="_measurement_point_8h" startline="171">alarmStatus</references>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_register_map_1a2940213459a183fc06a2226f1cd1a48b" compoundref="_register_map_8cpp" startline="176" endline="187">RegisterMap::updateFromMeasurementPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a3fb0693931f12190a7f96e5d6be51b51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t MeasurementPoint::getErrorStatus</definition>
        <argsstring>() const</argsstring>
        <name>getErrorStatus</name>
        <qualifiedname>MeasurementPoint::getErrorStatus</qualifiedname>
        <briefdescription>
<para>Get error status bits. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t Bit field representing error conditions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="106" column="13" bodyfile="src/MeasurementPoint.cpp" bodystart="77" bodyend="79"/>
        <references refid="class_measurement_point_1a9b17fba6e1ea928d4aa88abf28731fc7" compoundref="_measurement_point_8h" startline="172">errorStatus</references>
        <referencedby refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" compoundref="_temperature_controller_8cpp" startline="292" endline="315">TemperatureController::_checkPointForAlarms</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_register_map_1a2940213459a183fc06a2226f1cd1a48b" compoundref="_register_map_8cpp" startline="176" endline="187">RegisterMap::updateFromMeasurementPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1ae3abe83ed3e7979a906c7d753ac9d22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementPoint::setName</definition>
        <argsstring>(const String &amp;newName)</argsstring>
        <name>setName</name>
        <qualifiedname>MeasurementPoint::setName</qualifiedname>
        <param>
          <type>const String &amp;</type>
          <declname>newName</declname>
        </param>
        <briefdescription>
<para>Set measurement point name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">newName</parametername>
</parameternamelist>
<parameterdescription>
<para>New human-readable name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="113" column="10" bodyfile="src/MeasurementPoint.cpp" bodystart="81" bodyend="90"/>
        <references refid="class_measurement_point_1a13e1f193f0588973d8fe6b836ebe0fb9" compoundref="_measurement_point_8h" startline="163">address</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_measurement_point_1aa689590a454a7e11401a59e0399e66f4" compoundref="_measurement_point_8h" startline="164">name</references>
        <referencedby refid="class_c_s_v_config_manager_1ac91e29ab2468661df752e4e4b2f7186c" compoundref="_c_s_v_config_manager_8cpp" startline="309" endline="386">CSVConfigManager::_parseCSVLine</referencedby>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1332" endline="1972">ConfigManager::alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a04edc14e642ecadb9ccb87be05d1d878" compoundref="_config_manager_8cpp" startline="472" endline="685">ConfigManager::loadPointsConfig</referencedby>
        <referencedby refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1288" endline="1331">ConfigManager::pointsAPI</referencedby>
        <referencedby refid="class_config_manager_1a0daf50bbd376beb24a5400a86e893338" compoundref="_config_manager_8cpp" startline="689" endline="705">ConfigManager::updatePointInConfig</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementPoint::setLowAlarmThreshold</definition>
        <argsstring>(int16_t threshold)</argsstring>
        <name>setLowAlarmThreshold</name>
        <qualifiedname>MeasurementPoint::setLowAlarmThreshold</qualifiedname>
        <param>
          <type>int16_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Set low alarm threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Low temperature alarm threshold in Â°C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="119" column="10" bodyfile="src/MeasurementPoint.cpp" bodystart="92" bodyend="104"/>
        <references refid="class_measurement_point_1a13e1f193f0588973d8fe6b836ebe0fb9" compoundref="_measurement_point_8h" startline="163">address</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_measurement_point_1a3f1d2653a05ccfa24d2305f5b07e35db" compoundref="_measurement_point_8h" startline="169">lowAlarmThreshold</references>
        <references refid="class_measurement_point_1aa689590a454a7e11401a59e0399e66f4" compoundref="_measurement_point_8h" startline="164">name</references>
        <references refid="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" compoundref="_measurement_point_8cpp" startline="153" endline="158">updateAlarmStatus</references>
        <referencedby refid="class_c_s_v_config_manager_1ac91e29ab2468661df752e4e4b2f7186c" compoundref="_c_s_v_config_manager_8cpp" startline="309" endline="386">CSVConfigManager::_parseCSVLine</referencedby>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1332" endline="1972">ConfigManager::alarmsAPI</referencedby>
        <referencedby refid="class_register_map_1aa2f819b22096b8c14c421b415f7e83b7" compoundref="_register_map_8cpp" startline="189" endline="196">RegisterMap::applyConfigToMeasurementPoint</referencedby>
        <referencedby refid="class_config_manager_1a04edc14e642ecadb9ccb87be05d1d878" compoundref="_config_manager_8cpp" startline="472" endline="685">ConfigManager::loadPointsConfig</referencedby>
        <referencedby refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1288" endline="1331">ConfigManager::pointsAPI</referencedby>
        <referencedby refid="class_config_manager_1a0daf50bbd376beb24a5400a86e893338" compoundref="_config_manager_8cpp" startline="689" endline="705">ConfigManager::updatePointInConfig</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementPoint::setHighAlarmThreshold</definition>
        <argsstring>(int16_t threshold)</argsstring>
        <name>setHighAlarmThreshold</name>
        <qualifiedname>MeasurementPoint::setHighAlarmThreshold</qualifiedname>
        <param>
          <type>int16_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Set high alarm threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>High temperature alarm threshold in Â°C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="125" column="10" bodyfile="src/MeasurementPoint.cpp" bodystart="106" bodyend="116"/>
        <references refid="class_measurement_point_1a13e1f193f0588973d8fe6b836ebe0fb9" compoundref="_measurement_point_8h" startline="163">address</references>
        <references refid="class_measurement_point_1a63f7bd3c914d6b77bc6828cc83f4fef6" compoundref="_measurement_point_8h" startline="170">highAlarmThreshold</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_measurement_point_1aa689590a454a7e11401a59e0399e66f4" compoundref="_measurement_point_8h" startline="164">name</references>
        <references refid="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" compoundref="_measurement_point_8cpp" startline="153" endline="158">updateAlarmStatus</references>
        <referencedby refid="class_c_s_v_config_manager_1ac91e29ab2468661df752e4e4b2f7186c" compoundref="_c_s_v_config_manager_8cpp" startline="309" endline="386">CSVConfigManager::_parseCSVLine</referencedby>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1332" endline="1972">ConfigManager::alarmsAPI</referencedby>
        <referencedby refid="class_register_map_1aa2f819b22096b8c14c421b415f7e83b7" compoundref="_register_map_8cpp" startline="189" endline="196">RegisterMap::applyConfigToMeasurementPoint</referencedby>
        <referencedby refid="class_config_manager_1a04edc14e642ecadb9ccb87be05d1d878" compoundref="_config_manager_8cpp" startline="472" endline="685">ConfigManager::loadPointsConfig</referencedby>
        <referencedby refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1288" endline="1331">ConfigManager::pointsAPI</referencedby>
        <referencedby refid="class_config_manager_1a0daf50bbd376beb24a5400a86e893338" compoundref="_config_manager_8cpp" startline="689" endline="705">ConfigManager::updatePointInConfig</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a3c3af28d9aabc9e5b9e2e370eaa29ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementPoint::bindSensor</definition>
        <argsstring>(Sensor *sensor)</argsstring>
        <name>bindSensor</name>
        <qualifiedname>MeasurementPoint::bindSensor</qualifiedname>
        <param>
          <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
          <declname>sensor</declname>
        </param>
        <briefdescription>
<para>Bind a physical sensor to this measurement point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to sensor instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Links measurement point to physical sensor for direct readings </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="133" column="10" bodyfile="src/MeasurementPoint.cpp" bodystart="118" bodyend="120"/>
        <references refid="class_measurement_point_1a2bd6f123317fd8ff0ed22be09a7ac495" compoundref="_measurement_point_8h" startline="174">boundSensor</references>
        <referencedby refid="class_temperature_controller_1af4ab2c7b7a3934ab7837603a420b1ae2" compoundref="_temperature_controller_8cpp" startline="1667" endline="1686">TemperatureController::bindSensorToPointByBusNumber</referencedby>
        <referencedby refid="class_temperature_controller_1a84937fc1aed30193b817f3b062ce0cfc" compoundref="_temperature_controller_8cpp" startline="1048" endline="1070">TemperatureController::bindSensorToPointByChipSelect</referencedby>
        <referencedby refid="class_temperature_controller_1a5d8f7c51bb176435a5035293a2db78f7" compoundref="_temperature_controller_8cpp" startline="1023" endline="1046">TemperatureController::bindSensorToPointByRom</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1ab93923a15b7e55af89d1269b681fb856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementPoint::unbindSensor</definition>
        <argsstring>()</argsstring>
        <name>unbindSensor</name>
        <qualifiedname>MeasurementPoint::unbindSensor</qualifiedname>
        <briefdescription>
<para>Unbind the currently bound sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes association with physical sensor </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="139" column="10" bodyfile="src/MeasurementPoint.cpp" bodystart="122" bodyend="124"/>
        <references refid="class_measurement_point_1a2bd6f123317fd8ff0ed22be09a7ac495" compoundref="_measurement_point_8h" startline="174">boundSensor</references>
        <referencedby refid="class_temperature_controller_1a261c9b96540ec6680dfffd3a26e4ca00" compoundref="_temperature_controller_8cpp" startline="1072" endline="1093">TemperatureController::unbindSensorFromPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sensor" kindref="compound">Sensor</ref> *</type>
        <definition>Sensor * MeasurementPoint::getBoundSensor</definition>
        <argsstring>() const</argsstring>
        <name>getBoundSensor</name>
        <qualifiedname>MeasurementPoint::getBoundSensor</qualifiedname>
        <briefdescription>
<para>Get pointer to bound sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Sensor* Pointer to bound sensor, nullptr if none bound </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="145" column="12" bodyfile="src/MeasurementPoint.cpp" bodystart="126" bodyend="128"/>
        <references refid="class_measurement_point_1a2bd6f123317fd8ff0ed22be09a7ac495" compoundref="_measurement_point_8h" startline="174">boundSensor</references>
        <referencedby refid="class_temperature_controller_1a27da8ccc3effea555f440ce3e6f89b08" compoundref="_temperature_controller_8cpp" startline="292" endline="315">TemperatureController::_checkPointForAlarms</referencedby>
        <referencedby refid="class_c_s_v_config_manager_1a2c2673398051c26184c9197aa751a6b3" compoundref="_c_s_v_config_manager_8cpp" startline="57" endline="90">CSVConfigManager::_exportPointToCSV</referencedby>
        <referencedby refid="class_logger_manager_1aa6938b6a5c002d6ed72ef352f0cc7a19" compoundref="_logger_manager_8cpp" startline="324" endline="358">LoggerManager::_writeDataRow</referencedby>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1332" endline="1972">ConfigManager::alarmsAPI</referencedby>
        <referencedby refid="class_temperature_controller_1ad174e0411bd48422d8e3812fd28a7a0b" compoundref="_temperature_controller_8cpp" startline="418" endline="455">TemperatureController::ensureAlarmsForPoint</referencedby>
        <referencedby refid="class_temperature_controller_1a9b4fe09d4c87dcf86e78b890012e1e72" compoundref="_temperature_controller_8cpp" startline="1095" endline="1098">TemperatureController::getBoundSensor</referencedby>
        <referencedby refid="class_temperature_controller_1add39ba7dad38449bbf1787a5c9c51ef9" compoundref="_temperature_controller_8cpp" startline="1320" endline="1379">TemperatureController::getPointsJson</referencedby>
        <referencedby refid="class_config_manager_1a04edc14e642ecadb9ccb87be05d1d878" compoundref="_config_manager_8cpp" startline="472" endline="685">ConfigManager::loadPointsConfig</referencedby>
        <referencedby refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="338" endline="431">ConfigManager::savePointsConfig</referencedby>
        <referencedby refid="class_temperature_controller_1a261c9b96540ec6680dfffd3a26e4ca00" compoundref="_temperature_controller_8cpp" startline="1072" endline="1093">TemperatureController::unbindSensorFromPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a3c6d3325a506e8797bc759f15b70391f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementPoint::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <qualifiedname>MeasurementPoint::update</qualifiedname>
        <briefdescription>
<para>Update measurement point (call periodically) </para>
        </briefdescription>
        <detaileddescription>
<para>Refreshes temperature reading and updates alarm/error status </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="152" column="10" bodyfile="src/MeasurementPoint.cpp" bodystart="130" bodyend="146"/>
        <references refid="class_measurement_point_1a2bd6f123317fd8ff0ed22be09a7ac495" compoundref="_measurement_point_8h" startline="174">boundSensor</references>
        <references refid="class_measurement_point_1ada9ba45e500305e667f2a489603e84a8" compoundref="_measurement_point_8h" startline="166">currentTemp</references>
        <references refid="class_measurement_point_1a9b17fba6e1ea928d4aa88abf28731fc7" compoundref="_measurement_point_8h" startline="172">errorStatus</references>
        <references refid="class_measurement_point_1a38e188f2325f505993d55fa7a2d3e169" compoundref="_measurement_point_8h" startline="168">maxTemp</references>
        <references refid="class_measurement_point_1a2848f528b229967f371cc83e394b26fb" compoundref="_measurement_point_8h" startline="167">minTemp</references>
        <references refid="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" compoundref="_measurement_point_8cpp" startline="153" endline="158">updateAlarmStatus</references>
      </memberdef>
      <memberdef kind="function" id="class_measurement_point_1a6a78c850d05aa4ae8151e5e9f828fce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementPoint::resetMinMaxTemp</definition>
        <argsstring>()</argsstring>
        <name>resetMinMaxTemp</name>
        <qualifiedname>MeasurementPoint::resetMinMaxTemp</qualifiedname>
        <briefdescription>
<para>Reset min/max temperature records. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets min/max to current temperature value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="158" column="10" bodyfile="src/MeasurementPoint.cpp" bodystart="148" bodyend="151"/>
        <references refid="class_measurement_point_1ada9ba45e500305e667f2a489603e84a8" compoundref="_measurement_point_8h" startline="166">currentTemp</references>
        <references refid="class_measurement_point_1a38e188f2325f505993d55fa7a2d3e169" compoundref="_measurement_point_8h" startline="168">maxTemp</references>
        <references refid="class_measurement_point_1a2848f528b229967f371cc83e394b26fb" compoundref="_measurement_point_8h" startline="167">minTemp</references>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementPoint::updateAlarmStatus</definition>
        <argsstring>()</argsstring>
        <name>updateAlarmStatus</name>
        <qualifiedname>MeasurementPoint::updateAlarmStatus</qualifiedname>
        <briefdescription>
<para>Update alarm status based on current temperature. </para>
        </briefdescription>
        <detaileddescription>
<para>Internal method to evaluate alarm conditions and update status bits </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/MeasurementPoint.h" line="180" column="10" bodyfile="src/MeasurementPoint.cpp" bodystart="153" bodyend="158"/>
        <references refid="class_measurement_point_1a18c9fe4e70a4cc17473fd9df8a3c6b68" compoundref="_measurement_point_8h" startline="171">alarmStatus</references>
        <references refid="class_measurement_point_1ada9ba45e500305e667f2a489603e84a8" compoundref="_measurement_point_8h" startline="166">currentTemp</references>
        <references refid="class_measurement_point_1a9b17fba6e1ea928d4aa88abf28731fc7" compoundref="_measurement_point_8h" startline="172">errorStatus</references>
        <references refid="class_measurement_point_1a63f7bd3c914d6b77bc6828cc83f4fef6" compoundref="_measurement_point_8h" startline="170">highAlarmThreshold</references>
        <references refid="class_measurement_point_1a3f1d2653a05ccfa24d2305f5b07e35db" compoundref="_measurement_point_8h" startline="169">lowAlarmThreshold</references>
        <referencedby refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" compoundref="_measurement_point_8cpp" startline="106" endline="116">setHighAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" compoundref="_measurement_point_8cpp" startline="92" endline="104">setLowAlarmThreshold</referencedby>
        <referencedby refid="class_measurement_point_1a3c6d3325a506e8797bc759f15b70391f" compoundref="_measurement_point_8cpp" startline="130" endline="146">update</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Logical measurement point for temperature monitoring. </para>
    </briefdescription>
    <detaileddescription>
<para>Represents a temperature measurement location with configurable alarm thresholds, min/max tracking, and optional sensor binding for direct hardware access </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>MeasurementPoint</label>
        <link refid="class_measurement_point"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-boundSensor</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>Sensor</label>
        <link refid="class_sensor"/>
      </node>
    </collaborationgraph>
    <location file="include/MeasurementPoint.h" line="31" column="1" bodyfile="include/MeasurementPoint.h" bodystart="31" bodyend="181"/>
    <listofallmembers>
      <member refid="class_measurement_point_1a13e1f193f0588973d8fe6b836ebe0fb9" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>address</name></member>
      <member refid="class_measurement_point_1a18c9fe4e70a4cc17473fd9df8a3c6b68" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>alarmStatus</name></member>
      <member refid="class_measurement_point_1a3c3af28d9aabc9e5b9e2e370eaa29ce0" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>bindSensor</name></member>
      <member refid="class_measurement_point_1a2bd6f123317fd8ff0ed22be09a7ac495" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>boundSensor</name></member>
      <member refid="class_measurement_point_1ada9ba45e500305e667f2a489603e84a8" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>currentTemp</name></member>
      <member refid="class_measurement_point_1a9b17fba6e1ea928d4aa88abf28731fc7" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>errorStatus</name></member>
      <member refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getAddress</name></member>
      <member refid="class_measurement_point_1a1421d744f7982e528a579da02adb1919" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getAlarmStatus</name></member>
      <member refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getBoundSensor</name></member>
      <member refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getCurrentTemp</name></member>
      <member refid="class_measurement_point_1a3fb0693931f12190a7f96e5d6be51b51" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getErrorStatus</name></member>
      <member refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getHighAlarmThreshold</name></member>
      <member refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getLowAlarmThreshold</name></member>
      <member refid="class_measurement_point_1a8677e00e0be369d7874f4982990dc56d" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getMaxTemp</name></member>
      <member refid="class_measurement_point_1adc31f012462c1623617d5f362bcb2c59" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getMinTemp</name></member>
      <member refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>getName</name></member>
      <member refid="class_measurement_point_1a63f7bd3c914d6b77bc6828cc83f4fef6" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>highAlarmThreshold</name></member>
      <member refid="class_measurement_point_1a3f1d2653a05ccfa24d2305f5b07e35db" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>lowAlarmThreshold</name></member>
      <member refid="class_measurement_point_1a38e188f2325f505993d55fa7a2d3e169" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>maxTemp</name></member>
      <member refid="class_measurement_point_1a4abbf3752cd60d76f086071c4823ac1a" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>MeasurementPoint</name></member>
      <member refid="class_measurement_point_1a4441879bac27ef9cf2623d40bd347c18" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>MeasurementPoint</name></member>
      <member refid="class_measurement_point_1a2848f528b229967f371cc83e394b26fb" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>minTemp</name></member>
      <member refid="class_measurement_point_1aa689590a454a7e11401a59e0399e66f4" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>name</name></member>
      <member refid="class_measurement_point_1a6a78c850d05aa4ae8151e5e9f828fce0" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>resetMinMaxTemp</name></member>
      <member refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>setHighAlarmThreshold</name></member>
      <member refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>setLowAlarmThreshold</name></member>
      <member refid="class_measurement_point_1ae3abe83ed3e7979a906c7d753ac9d22d" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>setName</name></member>
      <member refid="class_measurement_point_1ab93923a15b7e55af89d1269b681fb856" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>unbindSensor</name></member>
      <member refid="class_measurement_point_1a3c6d3325a506e8797bc759f15b70391f" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>update</name></member>
      <member refid="class_measurement_point_1a71995209f2507e6cc15d01607f60767f" prot="private" virt="non-virtual"><scope>MeasurementPoint</scope><name>updateAlarmStatus</name></member>
      <member refid="class_measurement_point_1a8ee3863bb5548fe9c919234aff8ee0b6" prot="public" virt="non-virtual"><scope>MeasurementPoint</scope><name>~MeasurementPoint</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
