<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="class_config_manager" kind="class" language="C++" prot="public">
    <compoundname>ConfigManager</compoundname>
    <includes refid="_config_manager_8h" local="no">ConfigManager.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_config_manager_1afe696eabbbdf537e88b3b5b33c009b31" prot="private" static="no" mutable="no">
        <type><ref refid="class_settings_c_s_v_manager" kindref="compound">SettingsCSVManager</ref></type>
        <definition>SettingsCSVManager ConfigManager::settingsCSVManager</definition>
        <argsstring></argsstring>
        <name>settingsCSVManager</name>
        <qualifiedname>ConfigManager::settingsCSVManager</qualifiedname>
        <briefdescription>
<para>Manager for settings CSV operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="43" column="24" bodyfile="include/ConfigManager.h" bodystart="43" bodyend="-1"/>
        <referencedby refid="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" compoundref="_config_manager_8cpp" startline="138" endline="148">ConfigManager</referencedby>
        <referencedby refid="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" compoundref="_config_manager_8cpp" startline="1158" endline="1286">csvImportExportAPI</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_config_manager_1a5591a9b29e8c6e1c3f3dc50c0e6e1267" prot="private" static="no" mutable="no">
        <type><ref refid="class_c_s_v_config_manager" kindref="compound">CSVConfigManager</ref></type>
        <definition>CSVConfigManager ConfigManager::csvManager</definition>
        <argsstring></argsstring>
        <name>csvManager</name>
        <qualifiedname>ConfigManager::csvManager</qualifiedname>
        <briefdescription>
<para>Manager for measurement point CSV operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="44" column="22" bodyfile="include/ConfigManager.h" bodystart="44" bodyend="-1"/>
        <referencedby refid="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" compoundref="_config_manager_8cpp" startline="138" endline="148">ConfigManager</referencedby>
        <referencedby refid="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" compoundref="_config_manager_8cpp" startline="1158" endline="1286">csvImportExportAPI</referencedby>
        <referencedby refid="class_config_manager_1ab09d27551f2f71ad0c19452dabbd9061" compoundref="_config_manager_8h" startline="296" endline="296">getCSVManager</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" prot="private" static="no" mutable="no">
        <type>ConfigAssist</type>
        <definition>ConfigAssist ConfigManager::conf</definition>
        <argsstring></argsstring>
        <name>conf</name>
        <qualifiedname>ConfigManager::conf</qualifiedname>
        <briefdescription>
<para>ConfigAssist instance for web configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="45" column="18" bodyfile="include/ConfigManager.h" bodystart="45" bodyend="-1"/>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
        <referencedby refid="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" compoundref="_config_manager_8cpp" startline="138" endline="148">ConfigManager</referencedby>
        <referencedby refid="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" compoundref="_config_manager_8cpp" startline="1158" endline="1286">csvImportExportAPI</referencedby>
        <referencedby refid="class_config_manager_1a1d2c3a4f6b321f3e55394f0427781f71" compoundref="_config_manager_8h" startline="302" endline="302">getAcknowledgedDelayCritical</referencedby>
        <referencedby refid="class_config_manager_1a92531033b9698550c95e70408d3ca928" compoundref="_config_manager_8h" startline="308" endline="308">getAcknowledgedDelayHigh</referencedby>
        <referencedby refid="class_config_manager_1a8211fcec922c77f0245ea1eb95be5e4d" compoundref="_config_manager_8h" startline="320" endline="320">getAcknowledgedDelayLow</referencedby>
        <referencedby refid="class_config_manager_1ae5e8f849e85d0a2779a650136b7011f9" compoundref="_config_manager_8h" startline="314" endline="314">getAcknowledgedDelayMedium</referencedby>
        <referencedby refid="class_config_manager_1a70df78bf8e301f46cbc14bf6f36c0a0e" compoundref="_config_manager_8h" startline="239" endline="239">getAutoDiscover</referencedby>
        <referencedby refid="class_config_manager_1a355c8fe8e7b63d90f2ab1e3957006d7b" compoundref="_config_manager_8h" startline="197" endline="197">getDeviceId</referencedby>
        <referencedby refid="class_config_manager_1a3909fbe925c15b47925bacf2b0b4d97b" compoundref="_config_manager_8h" startline="191" endline="191">getHostname</referencedby>
        <referencedby refid="class_config_manager_1af025d7d473c39f95ab26029607e32cc6" compoundref="_config_manager_8h" startline="203" endline="203">getMeasurementPeriod</referencedby>
        <referencedby refid="class_config_manager_1abd6818ba586e506fa20886b51ff8dfe0" compoundref="_config_manager_8h" startline="215" endline="215">getModbusAddress</referencedby>
        <referencedby refid="class_config_manager_1a1ddcfeae8bd9fa5f1847b33a8ff61c09" compoundref="_config_manager_8h" startline="221" endline="221">getModbusBaudRate</referencedby>
        <referencedby refid="class_config_manager_1a8edfe5674a998837f2bb33f8c24ebca1" compoundref="_config_manager_8h" startline="227" endline="227">getRxPin</referencedby>
        <referencedby refid="class_config_manager_1af29e702703a41dc0fe8f393b4df3cba9" compoundref="_config_manager_8h" startline="233" endline="233">getTxPin</referencedby>
        <referencedby refid="class_config_manager_1aa67267eea5f43007958d1959a3d05eff" compoundref="_config_manager_8h" startline="185" endline="185">getWifiPassword</referencedby>
        <referencedby refid="class_config_manager_1a0c6922c0d3cfb6016ffea2a58149ee35" compoundref="_config_manager_8h" startline="179" endline="179">getWifiSSID</referencedby>
        <referencedby refid="class_config_manager_1a9fadc4167ae0c9e7cfc27af9b1bc5774" compoundref="_config_manager_8h" startline="209" endline="209">isModbusEnabled</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_config_manager_1a555afa40c6353fe0fe1765cc064dc920" prot="private" static="no" mutable="no">
        <type>ConfigAssistHelper *</type>
        <definition>ConfigAssistHelper* ConfigManager::confHelper</definition>
        <argsstring></argsstring>
        <name>confHelper</name>
        <qualifiedname>ConfigManager::confHelper</qualifiedname>
        <briefdescription>
<para>Helper for ConfigAssist operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="46" column="24" bodyfile="include/ConfigManager.h" bodystart="46" bodyend="-1"/>
        <referencedby refid="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" compoundref="_config_manager_8cpp" startline="138" endline="148">ConfigManager</referencedby>
        <referencedby refid="class_config_manager_1a83b4217012bf8eda57fbfd8deca09dd2" compoundref="_config_manager_8cpp" startline="280" endline="292">connectWiFi</referencedby>
        <referencedby refid="class_config_manager_1a7fa65fdff98bdd5bbbf72196bd9ccf17" compoundref="_config_manager_8cpp" startline="150" endline="158">~ConfigManager</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_config_manager_1a68eeba761f112013757ddf298454407d" prot="private" static="no" mutable="no">
        <type><ref refid="class_temperature_controller" kindref="compound">TemperatureController</ref> &amp;</type>
        <definition>TemperatureController&amp; ConfigManager::controller</definition>
        <argsstring></argsstring>
        <name>controller</name>
        <qualifiedname>ConfigManager::controller</qualifiedname>
        <briefdescription>
<para>Reference to temperature controller. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="47" column="27" bodyfile="include/ConfigManager.h" bodystart="47" bodyend="-1"/>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
        <referencedby refid="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" compoundref="_config_manager_8cpp" startline="138" endline="148">ConfigManager</referencedby>
        <referencedby refid="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" compoundref="_config_manager_8cpp" startline="1158" endline="1286">csvImportExportAPI</referencedby>
        <referencedby refid="class_config_manager_1a3b28982c79587a287c8ddf0acf47f71d" compoundref="_config_manager_8cpp" startline="2107" endline="2473">downloadAPI</referencedby>
        <referencedby refid="class_config_manager_1a04edc14e642ecadb9ccb87be05d1d878" compoundref="_config_manager_8cpp" startline="471" endline="684">loadPointsConfig</referencedby>
        <referencedby refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1287" endline="1330">pointsAPI</referencedby>
        <referencedby refid="class_config_manager_1a798727e00c1f0ff18044bc4ae097be2e" compoundref="_config_manager_8cpp" startline="330" endline="332">resetMinMaxValues</referencedby>
        <referencedby refid="class_config_manager_1aa15fcaf6330fd73a87e8c6f63e8ab9d5" compoundref="_config_manager_8cpp" startline="707" endline="741">saveAlarmsConfig</referencedby>
        <referencedby refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="337" endline="430">savePointsConfig</referencedby>
        <referencedby refid="class_config_manager_1a45b1ce1f09401af0b6f700cf4388b233" compoundref="_config_manager_8cpp" startline="1034" endline="1157">sensorAPI</referencedby>
        <referencedby refid="class_config_manager_1a0daf50bbd376beb24a5400a86e893338" compoundref="_config_manager_8cpp" startline="688" endline="704">updatePointInConfig</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" prot="private" static="no" mutable="no">
        <type>WebServer *</type>
        <definition>WebServer* ConfigManager::server</definition>
        <argsstring></argsstring>
        <name>server</name>
        <qualifiedname>ConfigManager::server</qualifiedname>
        <briefdescription>
<para>HTTP web server instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="48" column="15" bodyfile="include/ConfigManager.h" bodystart="48" bodyend="-1"/>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a6416afa7d86c20400ee661cdad9bdab1" compoundref="_config_manager_8cpp" startline="837" endline="1033">basicAPI</referencedby>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
        <referencedby refid="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" compoundref="_config_manager_8cpp" startline="138" endline="148">ConfigManager</referencedby>
        <referencedby refid="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" compoundref="_config_manager_8cpp" startline="1158" endline="1286">csvImportExportAPI</referencedby>
        <referencedby refid="class_config_manager_1a3b28982c79587a287c8ddf0acf47f71d" compoundref="_config_manager_8cpp" startline="2107" endline="2473">downloadAPI</referencedby>
        <referencedby refid="class_config_manager_1ac880f2edae50caef8bcc750f7260a896" compoundref="_config_manager_8h" startline="166" endline="166">getWebServer</referencedby>
        <referencedby refid="class_config_manager_1a9e977107b4795fcbce0482711ff1ce7a" compoundref="_config_manager_8cpp" startline="1975" endline="2105">logsAPI</referencedby>
        <referencedby refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1287" endline="1330">pointsAPI</referencedby>
        <referencedby refid="class_config_manager_1a45b1ce1f09401af0b6f700cf4388b233" compoundref="_config_manager_8cpp" startline="1034" endline="1157">sensorAPI</referencedby>
        <referencedby refid="class_config_manager_1a2f271ab2a1e8014cebe1e26afe9974df" compoundref="_config_manager_8cpp" startline="275" endline="278">update</referencedby>
        <referencedby refid="class_config_manager_1a7fa65fdff98bdd5bbbf72196bd9ccf17" compoundref="_config_manager_8cpp" startline="150" endline="158">~ConfigManager</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_config_manager_1a9569d8754bbcd81768dfb351b73bcea0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ConfigManager::portalActive</definition>
        <argsstring></argsstring>
        <name>portalActive</name>
        <qualifiedname>ConfigManager::portalActive</qualifiedname>
        <briefdescription>
<para>Flag indicating if configuration portal is active. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="49" column="10" bodyfile="include/ConfigManager.h" bodystart="49" bodyend="-1"/>
        <referencedby refid="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" compoundref="_config_manager_8cpp" startline="138" endline="148">ConfigManager</referencedby>
        <referencedby refid="class_config_manager_1a65a98a3adfa9da8d6d66175eb8dad3a3" compoundref="_config_manager_8h" startline="172" endline="172">isPortalActive</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_config_manager_1a890a76b6aebb1246ca45248967447b34" prot="private" static="yes" mutable="no">
        <type><ref refid="class_config_manager" kindref="compound">ConfigManager</ref> *</type>
        <definition>ConfigManager * ConfigManager::instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <qualifiedname>ConfigManager::instance</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Static instance pointer for callbacks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="58" column="26" bodyfile="include/ConfigManager.h" bodystart="58" bodyend="-1"/>
        <referencedby refid="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" compoundref="_config_manager_8cpp" startline="138" endline="148">ConfigManager</referencedby>
        <referencedby refid="class_config_manager_1a93a63ddc3f7efd83e80345826493a45d" compoundref="_config_manager_8cpp" startline="295" endline="326">onConfigChanged</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_config_manager_1a93a63ddc3f7efd83e80345826493a45d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::onConfigChanged</definition>
        <argsstring>(String key)</argsstring>
        <name>onConfigChanged</name>
        <qualifiedname>ConfigManager::onConfigChanged</qualifiedname>
        <param>
          <type>String</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Static callback function for configuration changes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration key that was changed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Called by ConfigAssist when any configuration value is modified </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="56" column="17" bodyfile="src/ConfigManager.cpp" bodystart="295" bodyend="326"/>
        <references refid="class_config_manager_1a890a76b6aebb1246ca45248967447b34" compoundref="_config_manager_8h" startline="58">instance</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_config_manager_1adaa7d1493461e3f2684b92ffe5db62d4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::_applySettingsWithoutRestart</definition>
        <argsstring>()</argsstring>
        <name>_applySettingsWithoutRestart</name>
        <qualifiedname>ConfigManager::_applySettingsWithoutRestart</qualifiedname>
        <briefdescription>
<para>Apply configuration settings without device restart. </para>
        </briefdescription>
        <detaileddescription>
<para>Updates runtime parameters when configuration changes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="64" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a6416afa7d86c20400ee661cdad9bdab1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::basicAPI</definition>
        <argsstring>()</argsstring>
        <name>basicAPI</name>
        <qualifiedname>ConfigManager::basicAPI</qualifiedname>
        <briefdescription>
<para>Setup basic API endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures fundamental device information and status endpoints </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="70" column="10" bodyfile="src/ConfigManager.cpp" bodystart="837" bodyend="1033"/>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a45b1ce1f09401af0b6f700cf4388b233" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::sensorAPI</definition>
        <argsstring>()</argsstring>
        <name>sensorAPI</name>
        <qualifiedname>ConfigManager::sensorAPI</qualifiedname>
        <briefdescription>
<para>Setup sensor-related API endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures endpoints for sensor discovery and management </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="76" column="10" bodyfile="src/ConfigManager.cpp" bodystart="1034" bodyend="1157"/>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" compoundref="_sensor_8cpp" startline="213" endline="221">Sensor::getDS18B20RomString</references>
        <references refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" compoundref="_sensor_8cpp" startline="208" endline="211">Sensor::getPT1000ChipSelectPin</references>
        <references refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="337" endline="430">savePointsConfig</references>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::csvImportExportAPI</definition>
        <argsstring>()</argsstring>
        <name>csvImportExportAPI</name>
        <qualifiedname>ConfigManager::csvImportExportAPI</qualifiedname>
        <briefdescription>
<para>Setup CSV import/export API endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures endpoints for CSV file upload and download operations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="82" column="10" bodyfile="src/ConfigManager.cpp" bodystart="1158" bodyend="1286"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="class_config_manager_1a5591a9b29e8c6e1c3f3dc50c0e6e1267" compoundref="_config_manager_8h" startline="44">csvManager</references>
        <references refid="class_logger_manager_1aef24f00186213fa78be3b104a50d58e6" compoundref="_logger_manager_8h" startline="165" endline="167">LoggerManager::error</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_config_manager_1aa15fcaf6330fd73a87e8c6f63e8ab9d5" compoundref="_config_manager_8cpp" startline="707" endline="741">saveAlarmsConfig</references>
        <references refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="337" endline="430">savePointsConfig</references>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
        <references refid="class_config_manager_1afe696eabbbdf537e88b3b5b33c009b31" compoundref="_config_manager_8h" startline="43">settingsCSVManager</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::pointsAPI</definition>
        <argsstring>()</argsstring>
        <name>pointsAPI</name>
        <qualifiedname>ConfigManager::pointsAPI</qualifiedname>
        <briefdescription>
<para>Setup measurement points API endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures endpoints for measurement point configuration and status </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="88" column="10" bodyfile="src/ConfigManager.cpp" bodystart="1287" bodyend="1330"/>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" compoundref="_measurement_point_8cpp" startline="69" endline="71">MeasurementPoint::getHighAlarmThreshold</references>
        <references refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" compoundref="_measurement_point_8cpp" startline="65" endline="67">MeasurementPoint::getLowAlarmThreshold</references>
        <references refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">MeasurementPoint::getName</references>
        <references refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="337" endline="430">savePointsConfig</references>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
        <references refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" compoundref="_measurement_point_8cpp" startline="106" endline="116">MeasurementPoint::setHighAlarmThreshold</references>
        <references refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" compoundref="_measurement_point_8cpp" startline="92" endline="104">MeasurementPoint::setLowAlarmThreshold</references>
        <references refid="class_measurement_point_1ae3abe83ed3e7979a906c7d753ac9d22d" compoundref="_measurement_point_8cpp" startline="81" endline="90">MeasurementPoint::setName</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1ae605c999fabc6344511f455618655326" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::alarmsAPI</definition>
        <argsstring>()</argsstring>
        <name>alarmsAPI</name>
        <qualifiedname>ConfigManager::alarmsAPI</qualifiedname>
        <briefdescription>
<para>Setup alarms API endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures endpoints for alarm management and history </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="94" column="10" bodyfile="src/ConfigManager.cpp" bodystart="1331" bodyend="1971"/>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba7e83ae21b9e9b168f12ba5a90ee82c94" compoundref="_alarm_8h" startline="49">ACKNOWLEDGED</references>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba18ff74f43da410c5529f7d6fca84f115" compoundref="_alarm_8h" startline="50">ACTIVE</references>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="class_config_manager_1a1d2c3a4f6b321f3e55394f0427781f71" compoundref="_config_manager_8h" startline="302" endline="302">getAcknowledgedDelayCritical</references>
        <references refid="class_config_manager_1a92531033b9698550c95e70408d3ca928" compoundref="_config_manager_8h" startline="308" endline="308">getAcknowledgedDelayHigh</references>
        <references refid="class_config_manager_1a8211fcec922c77f0245ea1eb95be5e4d" compoundref="_config_manager_8h" startline="320" endline="320">getAcknowledgedDelayLow</references>
        <references refid="class_config_manager_1ae5e8f849e85d0a2779a650136b7011f9" compoundref="_config_manager_8h" startline="314" endline="314">getAcknowledgedDelayMedium</references>
        <references refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" compoundref="_measurement_point_8cpp" startline="45" endline="47">MeasurementPoint::getAddress</references>
        <references refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">MeasurementPoint::getBoundSensor</references>
        <references refid="class_measurement_point_1aceaf14fde40bcd5331e5ea6a07d7dde8" compoundref="_measurement_point_8cpp" startline="53" endline="55">MeasurementPoint::getCurrentTemp</references>
        <references refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" compoundref="_measurement_point_8cpp" startline="69" endline="71">MeasurementPoint::getHighAlarmThreshold</references>
        <references refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" compoundref="_measurement_point_8cpp" startline="65" endline="67">MeasurementPoint::getLowAlarmThreshold</references>
        <references refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">MeasurementPoint::getName</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_alarm_8h_1a4999bf667fcedb69e70ee058d86785eba24d459a81449d7210c8f9a86c2913034" compoundref="_alarm_8h" startline="46">NEW</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba5f9223804ac004dc2fad18afc18a3951" compoundref="_alarm_8h" startline="61">PRIORITY_CRITICAL</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba4a2343657e145cb3dab4f445d2c29b1f" compoundref="_alarm_8h" startline="58">PRIORITY_LOW</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <references refid="class_config_manager_1aa15fcaf6330fd73a87e8c6f63e8ab9d5" compoundref="_config_manager_8cpp" startline="707" endline="741">saveAlarmsConfig</references>
        <references refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="337" endline="430">savePointsConfig</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
        <references refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" compoundref="_measurement_point_8cpp" startline="106" endline="116">MeasurementPoint::setHighAlarmThreshold</references>
        <references refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" compoundref="_measurement_point_8cpp" startline="92" endline="104">MeasurementPoint::setLowAlarmThreshold</references>
        <references refid="class_measurement_point_1ae3abe83ed3e7979a906c7d753ac9d22d" compoundref="_measurement_point_8cpp" startline="81" endline="90">MeasurementPoint::setName</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a9e977107b4795fcbce0482711ff1ce7a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::logsAPI</definition>
        <argsstring>()</argsstring>
        <name>logsAPI</name>
        <qualifiedname>ConfigManager::logsAPI</qualifiedname>
        <briefdescription>
<para>Setup logging API endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures endpoints for log file access and management </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="100" column="10" bodyfile="src/ConfigManager.cpp" bodystart="1975" bodyend="2105"/>
        <references refid="class_logger_manager_1a612d1bdfbfd0d93f9452fd7bac8775ca" compoundref="_logger_manager_8cpp" startline="1153" endline="1196">LoggerManager::getAlarmHistoryCsv</references>
        <references refid="class_logger_manager_1af04d8d79f7bcb9ff4dace5b490502b50" compoundref="_logger_manager_8cpp" startline="1073" endline="1151">LoggerManager::getAlarmHistoryJson</references>
        <references refid="class_logger_manager_1a19e6a7d2c3ad2b1d3fa5acb578fb1619" compoundref="_logger_manager_8cpp" startline="1888" endline="1912">LoggerManager::getAlarmStateLogFiles</references>
        <references refid="class_logger_manager_1a782a868803b4e2861169796aad7b8b60" compoundref="_logger_manager_8cpp" startline="1827" endline="1856">LoggerManager::getEventLogFilesStatic</references>
        <references refid="class_logger_manager_1a752cebdb1c0344890d265af9daee8313" compoundref="_logger_manager_8cpp" startline="1600" endline="1643">LoggerManager::getEventLogsCsv</references>
        <references refid="class_logger_manager_1a8e154caf5cdb9dd50722e2f52314e383" compoundref="_logger_manager_8cpp" startline="1534" endline="1597">LoggerManager::getEventLogsJson</references>
        <references refid="class_logger_manager_1ab16e7ab4b0cc70674b9b87118f72d805" compoundref="_logger_manager_8cpp" startline="1741" endline="1824">LoggerManager::getEventLogStatsJson</references>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a3b28982c79587a287c8ddf0acf47f71d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::downloadAPI</definition>
        <argsstring>()</argsstring>
        <name>downloadAPI</name>
        <qualifiedname>ConfigManager::downloadAPI</qualifiedname>
        <briefdescription>
<para>Setup file download API endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures endpoints for downloading log files and configurations </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="106" column="10" bodyfile="src/ConfigManager.cpp" bodystart="2107" bodyend="2473"/>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="class_logger_manager_1a19e6a7d2c3ad2b1d3fa5acb578fb1619" compoundref="_logger_manager_8cpp" startline="1888" endline="1912">LoggerManager::getAlarmStateLogFiles</references>
        <references refid="class_logger_manager_1a782a868803b4e2861169796aad7b8b60" compoundref="_logger_manager_8cpp" startline="1827" endline="1856">LoggerManager::getEventLogFilesStatic</references>
        <references refid="class_logger_manager_1acb4313c65e6a661229f2c3d662f1c059" compoundref="_logger_manager_8cpp" startline="1915" endline="1947">LoggerManager::getFileInfo</references>
        <references refid="class_logger_manager_1a2b670504d6ebd0c2c2f833caed6842d5" compoundref="_logger_manager_8cpp" startline="1861" endline="1885">LoggerManager::getLogFiles</references>
        <references refid="class_logger_manager_1a92719154d919a9bd45a8ea192e70dfcc" compoundref="_logger_manager_8cpp" startline="1950" endline="1961">LoggerManager::openLogFile</references>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ConfigManager::ConfigManager</definition>
        <argsstring>(TemperatureController &amp;tempController)</argsstring>
        <name>ConfigManager</name>
        <qualifiedname>ConfigManager::ConfigManager</qualifiedname>
        <param>
          <type><ref refid="class_temperature_controller" kindref="compound">TemperatureController</ref> &amp;</type>
          <declname>tempController</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="class_config_manager" kindref="compound">ConfigManager</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tempController</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the temperature controller instance</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Initializes configuration system with temperature controller integration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="121" column="5" bodyfile="src/ConfigManager.cpp" bodystart="138" bodyend="148"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <references refid="class_config_manager_1a555afa40c6353fe0fe1765cc064dc920" compoundref="_config_manager_8h" startline="46">confHelper</references>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="class_config_manager_1a5591a9b29e8c6e1c3f3dc50c0e6e1267" compoundref="_config_manager_8h" startline="44">csvManager</references>
        <references refid="class_config_manager_1a890a76b6aebb1246ca45248967447b34" compoundref="_config_manager_8h" startline="58">instance</references>
        <references refid="class_config_manager_1a9569d8754bbcd81768dfb351b73bcea0" compoundref="_config_manager_8h" startline="49">portalActive</references>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
        <references refid="class_config_manager_1afe696eabbbdf537e88b3b5b33c009b31" compoundref="_config_manager_8h" startline="43">settingsCSVManager</references>
        <references refid="_config_manager_8h_1a53744b698cb89b52923ba6024d2e25e0">VARIABLES_DEF_YAML</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a7fa65fdff98bdd5bbbf72196bd9ccf17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ConfigManager::~ConfigManager</definition>
        <argsstring>()</argsstring>
        <name>~ConfigManager</name>
        <qualifiedname>ConfigManager::~ConfigManager</qualifiedname>
        <briefdescription>
<para>Destructor for <ref refid="class_config_manager" kindref="compound">ConfigManager</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up web server and configuration resources </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="127" column="5" bodyfile="src/ConfigManager.cpp" bodystart="150" bodyend="158"/>
        <references refid="class_config_manager_1a555afa40c6353fe0fe1765cc064dc920" compoundref="_config_manager_8h" startline="46">confHelper</references>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a0497343220fc493f5cf9574922508908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConfigManager::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>ConfigManager::begin</qualifiedname>
        <briefdescription>
<para>Initialize the configuration system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if initialization successful</para>
</simplesect>
Sets up file system, configuration, web server and all API endpoints </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="134" column="10" bodyfile="src/ConfigManager.cpp" bodystart="160" bodyend="273"/>
        <references refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</references>
        <references refid="class_config_manager_1a6416afa7d86c20400ee661cdad9bdab1" compoundref="_config_manager_8cpp" startline="837" endline="1033">basicAPI</references>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <references refid="class_config_manager_1a83b4217012bf8eda57fbfd8deca09dd2" compoundref="_config_manager_8cpp" startline="280" endline="292">connectWiFi</references>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" compoundref="_config_manager_8cpp" startline="1158" endline="1286">csvImportExportAPI</references>
        <references refid="class_config_manager_1a3b28982c79587a287c8ddf0acf47f71d" compoundref="_config_manager_8cpp" startline="2107" endline="2473">downloadAPI</references>
        <references refid="class_config_manager_1a1d2c3a4f6b321f3e55394f0427781f71" compoundref="_config_manager_8h" startline="302" endline="302">getAcknowledgedDelayCritical</references>
        <references refid="class_config_manager_1a92531033b9698550c95e70408d3ca928" compoundref="_config_manager_8h" startline="308" endline="308">getAcknowledgedDelayHigh</references>
        <references refid="class_config_manager_1a8211fcec922c77f0245ea1eb95be5e4d" compoundref="_config_manager_8h" startline="320" endline="320">getAcknowledgedDelayLow</references>
        <references refid="class_config_manager_1ae5e8f849e85d0a2779a650136b7011f9" compoundref="_config_manager_8h" startline="314" endline="314">getAcknowledgedDelayMedium</references>
        <references refid="class_config_manager_1a355c8fe8e7b63d90f2ab1e3957006d7b" compoundref="_config_manager_8h" startline="197" endline="197">getDeviceId</references>
        <references refid="class_config_manager_1af025d7d473c39f95ab26029607e32cc6" compoundref="_config_manager_8h" startline="203" endline="203">getMeasurementPeriod</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_config_manager_1a04edc14e642ecadb9ccb87be05d1d878" compoundref="_config_manager_8cpp" startline="471" endline="684">loadPointsConfig</references>
        <references refid="class_config_manager_1a9e977107b4795fcbce0482711ff1ce7a" compoundref="_config_manager_8cpp" startline="1975" endline="2105">logsAPI</references>
        <references refid="class_config_manager_1a93a63ddc3f7efd83e80345826493a45d" compoundref="_config_manager_8cpp" startline="295" endline="326">onConfigChanged</references>
        <references refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1287" endline="1330">pointsAPI</references>
        <references refid="class_config_manager_1a45b1ce1f09401af0b6f700cf4388b233" compoundref="_config_manager_8cpp" startline="1034" endline="1157">sensorAPI</references>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
        <references refid="class_logger_manager_1a0d52b0ff7bff22817e987ad753102854" compoundref="_logger_manager_8h" startline="155" endline="157">LoggerManager::warning</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a2f271ab2a1e8014cebe1e26afe9974df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <qualifiedname>ConfigManager::update</qualifiedname>
        <briefdescription>
<para>Update configuration system (call in main loop) </para>
        </briefdescription>
        <detaileddescription>
<para>Handles web server requests and configuration portal updates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="140" column="10" bodyfile="src/ConfigManager.cpp" bodystart="275" bodyend="278"/>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a83b4217012bf8eda57fbfd8deca09dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConfigManager::connectWiFi</definition>
        <argsstring>(int timeoutMs=15000)</argsstring>
        <name>connectWiFi</name>
        <qualifiedname>ConfigManager::connectWiFi</qualifiedname>
        <param>
          <type>int</type>
          <declname>timeoutMs</declname>
          <defval>15000</defval>
        </param>
        <briefdescription>
<para>Connect to WiFi network. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">timeoutMs</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection timeout in milliseconds (default: 15000) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if WiFi connection successful</para>
</simplesect>
Attempts connection using configured SSID and password </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="148" column="10" bodyfile="src/ConfigManager.cpp" bodystart="280" bodyend="292"/>
        <references refid="class_config_manager_1a555afa40c6353fe0fe1765cc064dc920" compoundref="_config_manager_8h" startline="46">confHelper</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1ac880f2edae50caef8bcc750f7260a896" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>WebServer *</type>
        <definition>WebServer * ConfigManager::getWebServer</definition>
        <argsstring>()</argsstring>
        <name>getWebServer</name>
        <qualifiedname>ConfigManager::getWebServer</qualifiedname>
        <briefdescription>
<para>Get the web server instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>WebServer* Pointer to the HTTP web server</para>
</simplesect>
Provides access to the web server for additional endpoint configuration </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="166" column="15" bodyfile="include/ConfigManager.h" bodystart="166" bodyend="166"/>
        <references refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" compoundref="_config_manager_8h" startline="48">server</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a65a98a3adfa9da8d6d66175eb8dad3a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConfigManager::isPortalActive</definition>
        <argsstring>()</argsstring>
        <name>isPortalActive</name>
        <qualifiedname>ConfigManager::isPortalActive</qualifiedname>
        <briefdescription>
<para>Check if configuration portal is active. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if portal is currently running </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="172" column="10" bodyfile="include/ConfigManager.h" bodystart="172" bodyend="172"/>
        <references refid="class_config_manager_1a9569d8754bbcd81768dfb351b73bcea0" compoundref="_config_manager_8h" startline="49">portalActive</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a0c6922c0d3cfb6016ffea2a58149ee35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>String</type>
        <definition>String ConfigManager::getWifiSSID</definition>
        <argsstring>()</argsstring>
        <name>getWifiSSID</name>
        <qualifiedname>ConfigManager::getWifiSSID</qualifiedname>
        <briefdescription>
<para>Get WiFi SSID from configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String Configured WiFi network name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="179" column="12" bodyfile="include/ConfigManager.h" bodystart="179" bodyend="179"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1aa67267eea5f43007958d1959a3d05eff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>String</type>
        <definition>String ConfigManager::getWifiPassword</definition>
        <argsstring>()</argsstring>
        <name>getWifiPassword</name>
        <qualifiedname>ConfigManager::getWifiPassword</qualifiedname>
        <briefdescription>
<para>Get WiFi password from configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String Configured WiFi password </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="185" column="12" bodyfile="include/ConfigManager.h" bodystart="185" bodyend="185"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a3909fbe925c15b47925bacf2b0b4d97b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>String</type>
        <definition>String ConfigManager::getHostname</definition>
        <argsstring>()</argsstring>
        <name>getHostname</name>
        <qualifiedname>ConfigManager::getHostname</qualifiedname>
        <briefdescription>
<para>Get device hostname from configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String Configured device hostname </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="191" column="12" bodyfile="include/ConfigManager.h" bodystart="191" bodyend="191"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a355c8fe8e7b63d90f2ab1e3957006d7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t ConfigManager::getDeviceId</definition>
        <argsstring>()</argsstring>
        <name>getDeviceId</name>
        <qualifiedname>ConfigManager::getDeviceId</qualifiedname>
        <briefdescription>
<para>Get device ID from configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t Unique device identifier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="197" column="14" bodyfile="include/ConfigManager.h" bodystart="197" bodyend="197"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1af025d7d473c39f95ab26029607e32cc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t ConfigManager::getMeasurementPeriod</definition>
        <argsstring>()</argsstring>
        <name>getMeasurementPeriod</name>
        <qualifiedname>ConfigManager::getMeasurementPeriod</qualifiedname>
        <briefdescription>
<para>Get measurement period from configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t Measurement interval in seconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="203" column="14" bodyfile="include/ConfigManager.h" bodystart="203" bodyend="203"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a9fadc4167ae0c9e7cfc27af9b1bc5774" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConfigManager::isModbusEnabled</definition>
        <argsstring>()</argsstring>
        <name>isModbusEnabled</name>
        <qualifiedname>ConfigManager::isModbusEnabled</qualifiedname>
        <briefdescription>
<para>Check if Modbus is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if Modbus communication is enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="209" column="10" bodyfile="include/ConfigManager.h" bodystart="209" bodyend="209"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1abd6818ba586e506fa20886b51ff8dfe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ConfigManager::getModbusAddress</definition>
        <argsstring>()</argsstring>
        <name>getModbusAddress</name>
        <qualifiedname>ConfigManager::getModbusAddress</qualifiedname>
        <briefdescription>
<para>Get Modbus slave address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t Configured Modbus device address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="215" column="13" bodyfile="include/ConfigManager.h" bodystart="215" bodyend="215"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a1ddcfeae8bd9fa5f1847b33a8ff61c09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ConfigManager::getModbusBaudRate</definition>
        <argsstring>()</argsstring>
        <name>getModbusBaudRate</name>
        <qualifiedname>ConfigManager::getModbusBaudRate</qualifiedname>
        <briefdescription>
<para>Get Modbus baud rate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Configured Modbus communication speed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="221" column="14" bodyfile="include/ConfigManager.h" bodystart="221" bodyend="221"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a8edfe5674a998837f2bb33f8c24ebca1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ConfigManager::getRxPin</definition>
        <argsstring>()</argsstring>
        <name>getRxPin</name>
        <qualifiedname>ConfigManager::getRxPin</qualifiedname>
        <briefdescription>
<para>Get RS485 RX pin number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t GPIO pin for RS485 receive </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="227" column="13" bodyfile="include/ConfigManager.h" bodystart="227" bodyend="227"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1af29e702703a41dc0fe8f393b4df3cba9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ConfigManager::getTxPin</definition>
        <argsstring>()</argsstring>
        <name>getTxPin</name>
        <qualifiedname>ConfigManager::getTxPin</qualifiedname>
        <briefdescription>
<para>Get RS485 TX pin number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t GPIO pin for RS485 transmit </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="233" column="13" bodyfile="include/ConfigManager.h" bodystart="233" bodyend="233"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a70df78bf8e301f46cbc14bf6f36c0a0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConfigManager::getAutoDiscover</definition>
        <argsstring>()</argsstring>
        <name>getAutoDiscover</name>
        <qualifiedname>ConfigManager::getAutoDiscover</qualifiedname>
        <briefdescription>
<para>Check if auto-discovery is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool True if automatic sensor discovery is enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="239" column="10" bodyfile="include/ConfigManager.h" bodystart="239" bodyend="239"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a798727e00c1f0ff18044bc4ae097be2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::resetMinMaxValues</definition>
        <argsstring>()</argsstring>
        <name>resetMinMaxValues</name>
        <qualifiedname>ConfigManager::resetMinMaxValues</qualifiedname>
        <briefdescription>
<para>Reset minimum and maximum recorded values. </para>
        </briefdescription>
        <detaileddescription>
<para>Clears historical min/max temperature records for all measurement points </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="245" column="10" bodyfile="src/ConfigManager.cpp" bodystart="330" bodyend="332"/>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::savePointsConfig</definition>
        <argsstring>()</argsstring>
        <name>savePointsConfig</name>
        <qualifiedname>ConfigManager::savePointsConfig</qualifiedname>
        <briefdescription>
<para>Save measurement points configuration to file. </para>
        </briefdescription>
        <detaileddescription>
<para>Persists current measurement point settings to LittleFS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="259" column="10" bodyfile="src/ConfigManager.cpp" bodystart="337" bodyend="430"/>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_measurement_point_1a7b74a18d86e0e545264a774aa2c31cad" compoundref="_measurement_point_8cpp" startline="45" endline="47">MeasurementPoint::getAddress</references>
        <references refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">MeasurementPoint::getBoundSensor</references>
        <references refid="class_sensor_1a9f793cde2918130fbc77dad1aebfe53a" compoundref="_sensor_8cpp" startline="213" endline="221">Sensor::getDS18B20RomString</references>
        <references refid="class_measurement_point_1a71d6d440240f110cbd80c58bbc47aff6" compoundref="_measurement_point_8cpp" startline="69" endline="71">MeasurementPoint::getHighAlarmThreshold</references>
        <references refid="class_measurement_point_1a6e538e117d9e22c6998b56519a51d6ba" compoundref="_measurement_point_8cpp" startline="65" endline="67">MeasurementPoint::getLowAlarmThreshold</references>
        <references refid="class_measurement_point_1aa3a80d373c7609c7b178bf7353ffdd7a" compoundref="_measurement_point_8cpp" startline="49" endline="51">MeasurementPoint::getName</references>
        <references refid="class_sensor_1a6f57825e90b759ccdb9fe07b3a36953d" compoundref="_sensor_8cpp" startline="208" endline="211">Sensor::getPT1000ChipSelectPin</references>
        <references refid="class_sensor_1a0f6f095e7cfdfffb2a395dfdae7cfa53" compoundref="_sensor_8cpp" startline="171" endline="171">Sensor::getType</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" compoundref="_config_manager_8cpp" startline="1158" endline="1286">csvImportExportAPI</referencedby>
        <referencedby refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" compoundref="_config_manager_8cpp" startline="1287" endline="1330">pointsAPI</referencedby>
        <referencedby refid="class_config_manager_1a45b1ce1f09401af0b6f700cf4388b233" compoundref="_config_manager_8cpp" startline="1034" endline="1157">sensorAPI</referencedby>
        <referencedby refid="class_config_manager_1a0daf50bbd376beb24a5400a86e893338" compoundref="_config_manager_8cpp" startline="688" endline="704">updatePointInConfig</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a04edc14e642ecadb9ccb87be05d1d878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::loadPointsConfig</definition>
        <argsstring>()</argsstring>
        <name>loadPointsConfig</name>
        <qualifiedname>ConfigManager::loadPointsConfig</qualifiedname>
        <briefdescription>
<para>Load measurement points configuration from file. </para>
        </briefdescription>
        <detaileddescription>
<para>Restores measurement point settings from LittleFS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="265" column="10" bodyfile="src/ConfigManager.cpp" bodystart="471" bodyend="684"/>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435aac1bc058b939e1c55e1496c8574f3691" compoundref="_sensor_8h" startline="33">DS18B20</references>
        <references refid="class_measurement_point_1a81c7ae93a9314344967d0f31c6fefe2f" compoundref="_measurement_point_8cpp" startline="126" endline="128">MeasurementPoint::getBoundSensor</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a9ca8335873c44a53b8f7c5fc526ee59b" compoundref="_alarm_8h" startline="34">HIGH_TEMPERATURE</references>
        <references refid="class_logger_manager_1a5c1373ccc47f4112b596fe6f84fbbc21" compoundref="_logger_manager_8h" startline="145" endline="147">LoggerManager::info</references>
        <references refid="class_sensor_1a59dd5483b75d9366a0c50ccdd0345dec" compoundref="_sensor_8cpp" startline="67" endline="116">Sensor::initialize</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2acf7e66cec00ad7027a2f00fec418ed71" compoundref="_alarm_8h" startline="35">LOW_TEMPERATURE</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba47a10a0fba7f10a751e6ea38f3d6a1e3" compoundref="_alarm_8h" startline="60">PRIORITY_HIGH</references>
        <references refid="_alarm_8h_1a5a708c1a1540361a33a030066a7c321ba7e5ab414d2d201947566a9c574a7b85f" compoundref="_alarm_8h" startline="59">PRIORITY_MEDIUM</references>
        <references refid="_sensor_8h_1a213c434cb928c4ca22513e2302632435a481caba3768b84e8b68fb58b04ec595e" compoundref="_sensor_8h" startline="34">PT1000</references>
        <references refid="_alarm_8h_1ab24e7dd602a82a4cf2afea61f26726e2a3993b9fcdbf9ec59e873519a4d02fe2f" compoundref="_alarm_8h" startline="36">SENSOR_ERROR</references>
        <references refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" compoundref="_measurement_point_8cpp" startline="106" endline="116">MeasurementPoint::setHighAlarmThreshold</references>
        <references refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" compoundref="_measurement_point_8cpp" startline="92" endline="104">MeasurementPoint::setLowAlarmThreshold</references>
        <references refid="class_measurement_point_1ae3abe83ed3e7979a906c7d753ac9d22d" compoundref="_measurement_point_8cpp" startline="81" endline="90">MeasurementPoint::setName</references>
        <references refid="class_sensor_1afefa1f627a7d2ab5a1157c271e7f2556" compoundref="_sensor_8cpp" startline="57" endline="60">Sensor::setupDS18B20</references>
        <references refid="class_sensor_1aef73c8dc894e3695f50b4bece9601750" compoundref="_sensor_8cpp" startline="62" endline="65">Sensor::setupPT1000</references>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a0daf50bbd376beb24a5400a86e893338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConfigManager::updatePointInConfig</definition>
        <argsstring>(uint8_t address, const String &amp;name, int16_t lowAlarm, int16_t highAlarm, const String &amp;ds18b20RomString=&quot;&quot;, int pt1000ChipSelect=-1)</argsstring>
        <name>updatePointInConfig</name>
        <qualifiedname>ConfigManager::updatePointInConfig</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>lowAlarm</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>highAlarm</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>ds18b20RomString</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>pt1000ChipSelect</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Update a measurement point in configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement point address (0-255) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Human-readable name for the measurement point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lowAlarm</parametername>
</parameternamelist>
<parameterdescription>
<para>Low temperature alarm threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">highAlarm</parametername>
</parameternamelist>
<parameterdescription>
<para>High temperature alarm threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ds18b20RomString</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 ROM address as string (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pt1000ChipSelect</parametername>
</parameternamelist>
<parameterdescription>
<para>PT1000 chip select pin (optional, -1 if not used) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool True if update successful </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="277" column="10" bodyfile="src/ConfigManager.cpp" bodystart="688" bodyend="704"/>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" compoundref="_config_manager_8cpp" startline="337" endline="430">savePointsConfig</references>
        <references refid="class_measurement_point_1aefb47fef40f33161be5c6fddf0cf6329" compoundref="_measurement_point_8cpp" startline="106" endline="116">MeasurementPoint::setHighAlarmThreshold</references>
        <references refid="class_measurement_point_1ac780917beebc11d705824cab8f43b94d" compoundref="_measurement_point_8cpp" startline="92" endline="104">MeasurementPoint::setLowAlarmThreshold</references>
        <references refid="class_measurement_point_1ae3abe83ed3e7979a906c7d753ac9d22d" compoundref="_measurement_point_8cpp" startline="81" endline="90">MeasurementPoint::setName</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1aa15fcaf6330fd73a87e8c6f63e8ab9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::saveAlarmsConfig</definition>
        <argsstring>()</argsstring>
        <name>saveAlarmsConfig</name>
        <qualifiedname>ConfigManager::saveAlarmsConfig</qualifiedname>
        <briefdescription>
<para>Save alarms configuration to file. </para>
        </briefdescription>
        <detaileddescription>
<para>Persists current alarm settings to LittleFS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="284" column="10" bodyfile="src/ConfigManager.cpp" bodystart="707" bodyend="741"/>
        <references refid="class_config_manager_1a68eeba761f112013757ddf298454407d" compoundref="_config_manager_8h" startline="47">controller</references>
        <references refid="class_alarm_1a952efd43b6a887659d56815bd5119d60" compoundref="_alarm_8h" startline="298" endline="298">Alarm::getHysteresis</references>
        <references refid="class_alarm_1ab12dd2af567dd87228d9404dcce5b0c0" compoundref="_alarm_8h" startline="274" endline="274">Alarm::getPointAddress</references>
        <references refid="class_alarm_1abe89e376d8cacb582717ad6a65526ee8" compoundref="_alarm_8h" startline="104" endline="104">Alarm::getPriority</references>
        <references refid="class_alarm_1acfac41af4628d83d3fdcc11c8fb55069" compoundref="_alarm_8h" startline="92" endline="92">Alarm::getType</references>
        <references refid="class_alarm_1ab1d04e5776db50454c72fd0937acdc37" compoundref="_alarm_8h" startline="262" endline="262">Alarm::isEnabled</references>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" compoundref="_config_manager_8cpp" startline="1158" endline="1286">csvImportExportAPI</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a468923ce5f2edecd218b29605d75426f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigManager::loadAlarmsConfig</definition>
        <argsstring>()</argsstring>
        <name>loadAlarmsConfig</name>
        <qualifiedname>ConfigManager::loadAlarmsConfig</qualifiedname>
        <briefdescription>
<para>Load alarms configuration from file. </para>
        </briefdescription>
        <detaileddescription>
<para>Restores alarm settings from LittleFS </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="290" column="10" bodyfile="src/ConfigManager.cpp" bodystart="746" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1ab09d27551f2f71ad0c19452dabbd9061" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_c_s_v_config_manager" kindref="compound">CSVConfigManager</ref> &amp;</type>
        <definition>CSVConfigManager &amp; ConfigManager::getCSVManager</definition>
        <argsstring>()</argsstring>
        <name>getCSVManager</name>
        <qualifiedname>ConfigManager::getCSVManager</qualifiedname>
        <briefdescription>
<para>Get reference to CSV configuration manager. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="class_c_s_v_config_manager" kindref="compound">CSVConfigManager</ref>&amp; Reference to the CSV manager instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="296" column="22" bodyfile="include/ConfigManager.h" bodystart="296" bodyend="296"/>
        <references refid="class_config_manager_1a5591a9b29e8c6e1c3f3dc50c0e6e1267" compoundref="_config_manager_8h" startline="44">csvManager</references>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a1d2c3a4f6b321f3e55394f0427781f71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t ConfigManager::getAcknowledgedDelayCritical</definition>
        <argsstring>()</argsstring>
        <name>getAcknowledgedDelayCritical</name>
        <qualifiedname>ConfigManager::getAcknowledgedDelayCritical</qualifiedname>
        <briefdescription>
<para>Get acknowledged delay for critical priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t Delay time in seconds for critical alarms </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="302" column="14" bodyfile="include/ConfigManager.h" bodystart="302" bodyend="302"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a92531033b9698550c95e70408d3ca928" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t ConfigManager::getAcknowledgedDelayHigh</definition>
        <argsstring>()</argsstring>
        <name>getAcknowledgedDelayHigh</name>
        <qualifiedname>ConfigManager::getAcknowledgedDelayHigh</qualifiedname>
        <briefdescription>
<para>Get acknowledged delay for high priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t Delay time in seconds for high priority alarms </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="308" column="14" bodyfile="include/ConfigManager.h" bodystart="308" bodyend="308"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1ae5e8f849e85d0a2779a650136b7011f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t ConfigManager::getAcknowledgedDelayMedium</definition>
        <argsstring>()</argsstring>
        <name>getAcknowledgedDelayMedium</name>
        <qualifiedname>ConfigManager::getAcknowledgedDelayMedium</qualifiedname>
        <briefdescription>
<para>Get acknowledged delay for medium priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t Delay time in seconds for medium priority alarms </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="314" column="14" bodyfile="include/ConfigManager.h" bodystart="314" bodyend="314"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_config_manager_1a8211fcec922c77f0245ea1eb95be5e4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t ConfigManager::getAcknowledgedDelayLow</definition>
        <argsstring>()</argsstring>
        <name>getAcknowledgedDelayLow</name>
        <qualifiedname>ConfigManager::getAcknowledgedDelayLow</qualifiedname>
        <briefdescription>
<para>Get acknowledged delay for low priority alarms. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint16_t Delay time in seconds for low priority alarms </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ConfigManager.h" line="320" column="14" bodyfile="include/ConfigManager.h" bodystart="320" bodyend="320"/>
        <references refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" compoundref="_config_manager_8h" startline="45">conf</references>
        <referencedby refid="class_config_manager_1ae605c999fabc6344511f455618655326" compoundref="_config_manager_8cpp" startline="1331" endline="1971">alarmsAPI</referencedby>
        <referencedby refid="class_config_manager_1a0497343220fc493f5cf9574922508908" compoundref="_config_manager_8cpp" startline="160" endline="273">begin</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Main configuration management class. </para>
    </briefdescription>
    <detaileddescription>
<para>Handles all aspects of system configuration including WiFi setup, web interface management, CSV import/export, and API endpoints </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="9">
        <label>Alarm</label>
        <link refid="class_alarm"/>
        <childnode refid="6" relation="usage">
          <edgelabel>-_source</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>CSVConfigManager</label>
        <link refid="class_c_s_v_config_manager"/>
        <childnode refid="4" relation="usage">
          <edgelabel>-_controller</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>ConfigManager</label>
        <link refid="class_config_manager"/>
        <childnode refid="2" relation="usage">
          <edgelabel>-settingsCSVManager</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>-csvManager</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>-controller</edgelabel>
        </childnode>
        <childnode refid="1" relation="usage">
          <edgelabel>-instance</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>IndicatorInterface</label>
        <link refid="class_indicator_interface"/>
        <childnode refid="5" relation="usage">
          <edgelabel>-_instance</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>MeasurementPoint</label>
        <link refid="class_measurement_point"/>
        <childnode refid="7" relation="usage">
          <edgelabel>-boundSensor</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>RegisterMap</label>
        <link refid="class_register_map"/>
      </node>
      <node id="7">
        <label>Sensor</label>
        <link refid="class_sensor"/>
      </node>
      <node id="2">
        <label>SettingsCSVManager</label>
        <link refid="class_settings_c_s_v_manager"/>
      </node>
      <node id="4">
        <label>TemperatureController</label>
        <link refid="class_temperature_controller"/>
        <childnode refid="5" relation="usage">
          <edgelabel>-indicator</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>-dsPoints</edgelabel>
          <edgelabel>-ptPoints</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>-registerMap</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>-_currentDisplayedAlarm</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/ConfigManager.h" line="41" column="1" bodyfile="include/ConfigManager.h" bodystart="41" bodyend="321"/>
    <listofallmembers>
      <member refid="class_config_manager_1adaa7d1493461e3f2684b92ffe5db62d4" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>_applySettingsWithoutRestart</name></member>
      <member refid="class_config_manager_1ae605c999fabc6344511f455618655326" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>alarmsAPI</name></member>
      <member refid="class_config_manager_1a6416afa7d86c20400ee661cdad9bdab1" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>basicAPI</name></member>
      <member refid="class_config_manager_1a0497343220fc493f5cf9574922508908" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>begin</name></member>
      <member refid="class_config_manager_1a3948181c2e8ae2241d0e95c5afd47aa9" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>conf</name></member>
      <member refid="class_config_manager_1a555afa40c6353fe0fe1765cc064dc920" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>confHelper</name></member>
      <member refid="class_config_manager_1abb5e68671c5a8087abb50b289d3522b4" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>ConfigManager</name></member>
      <member refid="class_config_manager_1a83b4217012bf8eda57fbfd8deca09dd2" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>connectWiFi</name></member>
      <member refid="class_config_manager_1a68eeba761f112013757ddf298454407d" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>controller</name></member>
      <member refid="class_config_manager_1a9b7af07b85bf9cc3ac05603db6e89fd2" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>csvImportExportAPI</name></member>
      <member refid="class_config_manager_1a5591a9b29e8c6e1c3f3dc50c0e6e1267" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>csvManager</name></member>
      <member refid="class_config_manager_1a3b28982c79587a287c8ddf0acf47f71d" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>downloadAPI</name></member>
      <member refid="class_config_manager_1a1d2c3a4f6b321f3e55394f0427781f71" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getAcknowledgedDelayCritical</name></member>
      <member refid="class_config_manager_1a92531033b9698550c95e70408d3ca928" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getAcknowledgedDelayHigh</name></member>
      <member refid="class_config_manager_1a8211fcec922c77f0245ea1eb95be5e4d" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getAcknowledgedDelayLow</name></member>
      <member refid="class_config_manager_1ae5e8f849e85d0a2779a650136b7011f9" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getAcknowledgedDelayMedium</name></member>
      <member refid="class_config_manager_1a70df78bf8e301f46cbc14bf6f36c0a0e" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getAutoDiscover</name></member>
      <member refid="class_config_manager_1ab09d27551f2f71ad0c19452dabbd9061" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getCSVManager</name></member>
      <member refid="class_config_manager_1a355c8fe8e7b63d90f2ab1e3957006d7b" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getDeviceId</name></member>
      <member refid="class_config_manager_1a3909fbe925c15b47925bacf2b0b4d97b" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getHostname</name></member>
      <member refid="class_config_manager_1af025d7d473c39f95ab26029607e32cc6" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getMeasurementPeriod</name></member>
      <member refid="class_config_manager_1abd6818ba586e506fa20886b51ff8dfe0" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getModbusAddress</name></member>
      <member refid="class_config_manager_1a1ddcfeae8bd9fa5f1847b33a8ff61c09" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getModbusBaudRate</name></member>
      <member refid="class_config_manager_1a8edfe5674a998837f2bb33f8c24ebca1" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getRxPin</name></member>
      <member refid="class_config_manager_1af29e702703a41dc0fe8f393b4df3cba9" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getTxPin</name></member>
      <member refid="class_config_manager_1ac880f2edae50caef8bcc750f7260a896" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getWebServer</name></member>
      <member refid="class_config_manager_1aa67267eea5f43007958d1959a3d05eff" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getWifiPassword</name></member>
      <member refid="class_config_manager_1a0c6922c0d3cfb6016ffea2a58149ee35" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>getWifiSSID</name></member>
      <member refid="class_config_manager_1a890a76b6aebb1246ca45248967447b34" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>instance</name></member>
      <member refid="class_config_manager_1a9fadc4167ae0c9e7cfc27af9b1bc5774" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>isModbusEnabled</name></member>
      <member refid="class_config_manager_1a65a98a3adfa9da8d6d66175eb8dad3a3" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>isPortalActive</name></member>
      <member refid="class_config_manager_1a468923ce5f2edecd218b29605d75426f" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>loadAlarmsConfig</name></member>
      <member refid="class_config_manager_1a04edc14e642ecadb9ccb87be05d1d878" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>loadPointsConfig</name></member>
      <member refid="class_config_manager_1a9e977107b4795fcbce0482711ff1ce7a" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>logsAPI</name></member>
      <member refid="class_config_manager_1a93a63ddc3f7efd83e80345826493a45d" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>onConfigChanged</name></member>
      <member refid="class_config_manager_1a471a844085c27f3a8a8f9394d9c14677" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>pointsAPI</name></member>
      <member refid="class_config_manager_1a9569d8754bbcd81768dfb351b73bcea0" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>portalActive</name></member>
      <member refid="class_config_manager_1a798727e00c1f0ff18044bc4ae097be2e" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>resetMinMaxValues</name></member>
      <member refid="class_config_manager_1aa15fcaf6330fd73a87e8c6f63e8ab9d5" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>saveAlarmsConfig</name></member>
      <member refid="class_config_manager_1a55b79da91c57039c483ddf5fceabbd64" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>savePointsConfig</name></member>
      <member refid="class_config_manager_1a45b1ce1f09401af0b6f700cf4388b233" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>sensorAPI</name></member>
      <member refid="class_config_manager_1a773fb5f7cd89fa594bd05184e8af14a0" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>server</name></member>
      <member refid="class_config_manager_1afe696eabbbdf537e88b3b5b33c009b31" prot="private" virt="non-virtual"><scope>ConfigManager</scope><name>settingsCSVManager</name></member>
      <member refid="class_config_manager_1a2f271ab2a1e8014cebe1e26afe9974df" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>update</name></member>
      <member refid="class_config_manager_1a0daf50bbd376beb24a5400a86e893338" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>updatePointInConfig</name></member>
      <member refid="class_config_manager_1a7fa65fdff98bdd5bbbf72196bd9ccf17" prot="public" virt="non-virtual"><scope>ConfigManager</scope><name>~ConfigManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
