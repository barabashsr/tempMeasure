
================================================================================
File: alarms.html
Size: 21.11 kB
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Temperature Controller - Alarms</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        nav {
            margin-bottom: 20px;
            padding: 10px;
            background: #007bff;
            border-radius: 5px;
        }
        nav a {
            color: white;
            text-decoration: none;
            margin-right: 15px;
            padding: 5px 10px;
            border-radius: 3px;
        }
        nav a:hover {
            background: rgba(255,255,255,0.2);
        }
        .controls {
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 5px;
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .controls button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        .btn-success {
            background-color: #28a745;
            color: white;
        }
        .btn-warning {
            background-color: #ffc107;
            color: black;
        }
        .btn-danger {
            background-color: #dc3545;
            color: white;
        }
        .btn:hover {
            opacity: 0.8;
        }
        .filter-group {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        .filter-group label {
            font-weight: bold;
            margin-right: 5px;
        }
        .filter-group select {
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
            cursor: pointer;
            user-select: none;
            position: relative;
        }
        th:hover {
            background-color: #e9ecef;
        }
        th.sortable::after {
            content: " ↕";
            color: #999;
            font-size: 12px;
        }
        th.sort-asc::after {
            content: " ↑";
            color: #007bff;
            font-weight: bold;
        }
        th.sort-desc::after {
            content: " ↓";
            color: #007bff;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .status-new {
            color: #6f42c1;
            font-weight: bold;
        }
        .status-active {
            color: #dc3545;
            font-weight: bold;
        }
        .status-acknowledged {
            color: #fd7e14;
            font-weight: bold;
        }
        .status-cleared {
            color: #20c997;
            font-weight: bold;
        }
        .status-resolved {
            color: #6c757d;
        }
        .priority-critical {
            background-color: #f8d7da;
            color: #721c24;
            font-weight: bold;
        }
        .priority-high {
            background-color: #ffeaa7;
            color: #856404;
            font-weight: bold;
        }
        .priority-medium {
            background-color: #d1ecf1;
            color: #0c5460;
        }
        .priority-low {
            background-color: #d4edda;
            color: #155724;
        }
        .alarm-type {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        .type-high-temp {
            background-color: #ff6b6b;
            color: white;
        }
        .type-low-temp {
            background-color: #4ecdc4;
            color: white;
        }
        .type-sensor-error {
            background-color: #ffe66d;
            color: black;
        }
        .type-sensor-disconnected {
            background-color: #a8e6cf;
            color: black;
        }
        .stats {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }
        .stat-card {
            flex: 1;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
            color: white;
            font-weight: bold;
        }
        .stat-critical {
            background-color: #dc3545;
        }
        .stat-high {
            background-color: #fd7e14;
        }
        .stat-medium {
            background-color: #ffc107;
            color: black;
        }
        .stat-low {
            background-color: #28a745;
        }
        .no-alarms {
            text-align: center;
            padding: 40px;
            color: #6c757d;
            font-style: italic;
        }
        .timestamp {
            font-size: 12px;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container">
        <nav>
            <a href="/dashboard.html">Home</a>
            <a href="/sensors.html">Sensors</a>
            <a href="/points.html">Points</a>
            <a href="/alarms.html">Alarms</a>
            <a href="/config">Configuration</a>
        </nav>

        <h1>Alarm Management</h1>

        <!-- Statistics -->
        <div class="stats">
            <div class="stat-card stat-critical">
                <div id="criticalCount">0</div>
                <div>Critical</div>
            </div>
            <div class="stat-card stat-high">
                <div id="highCount">0</div>
                <div>High</div>
            </div>
            <div class="stat-card stat-medium">
                <div id="mediumCount">0</div>
                <div>Medium</div>
            </div>
            <div class="stat-card stat-low">
                <div id="lowCount">0</div>
                <div>Low</div>
            </div>
        </div>

        <!-- Controls -->
        <div class="controls">
            <button class="btn btn-primary" onclick="refreshAlarms()">🔄 Refresh</button>
            <button class="btn btn-success" onclick="acknowledgeAllActive()">✓ Acknowledge All Active</button>
            <button class="btn btn-warning" onclick="clearResolved()">🗑 Clear Resolved</button>
            
            <div class="filter-group">
                <label>Filter by Status:</label>
                <select id="statusFilter" onchange="filterTable()">
                    <option value="">All Statuses</option>
                    <option value="NEW">New</option>
                    <option value="ACTIVE">Active</option>
                    <option value="ACKNOWLEDGED">Acknowledged</option>
                    <option value="CLEARED">Cleared</option>
                    <option value="RESOLVED">Resolved</option>
                </select>
            </div>

            <div class="filter-group">
                <label>Filter by Priority:</label>
                <select id="priorityFilter" onchange="filterTable()">
                    <option value="">All Priorities</option>
                    <option value="3">Critical</option>
                    <option value="2">High</option>
                    <option value="1">Medium</option>
                    <option value="0">Low</option>
                </select>
            </div>

            <div class="filter-group">
                <label>Filter by Type:</label>
                <select id="typeFilter" onchange="filterTable()">
                    <option value="">All Types</option>
                    <option value="0">High Temperature</option>
                    <option value="1">Low Temperature</option>
                    <option value="2">Sensor Error</option>
                    <option value="3">Sensor Disconnected</option>
                </select>
            </div>
        </div>

        <!-- Alarms Table -->
        <table id="alarmsTable">
            <thead>
                <tr>
                    <th class="sortable" onclick="sortTable(0)">Point</th>
                    <th class="sortable" onclick="sortTable(1)">Point Name</th>
                    <th class="sortable" onclick="sortTable(2)">Type</th>
                    <th class="sortable" onclick="sortTable(3)">Priority</th>
                    <th class="sortable" onclick="sortTable(4)">Status</th>
                    <th class="sortable" onclick="sortTable(5)">Current Temp</th>
                    <th class="sortable" onclick="sortTable(6)">Threshold</th>
                    <th class="sortable" onclick="sortTable(7)">Created</th>
                    <th class="sortable" onclick="sortTable(8)">Acknowledged</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="10" class="no-alarms">Loading alarms...</td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>
        const UPDATE_INTERVAL = 5000;
        let alarmsData = [];
        let sortColumn = -1;
        let sortDirection = 'asc';

        // Load alarms on page load
        document.addEventListener('DOMContentLoaded', function() {
            refreshAlarms();
            setInterval(refreshAlarms, UPDATE_INTERVAL); // Auto-refresh every 30 seconds
        });

        // Load alarms from API
        async function refreshAlarms() {
            try {
                const response = await fetch('/api/alarms');
                const data = await response.json();
                alarmsData = data.alarms || [];
                updateStatistics();
                displayAlarms();
            } catch (error) {
                console.error('Error loading alarms:', error);
                document.querySelector('#alarmsTable tbody').innerHTML = 
                    '<tr><td colspan="10" class="no-alarms">Error loading alarms</td></tr>';
            }
        }

        // Update statistics
        function updateStatistics() {
            const stats = {
                critical: 0,
                high: 0,
                medium: 0,
                low: 0
            };

            alarmsData.forEach(alarm => {
                if (alarm.enabled && (alarm.stage === 1 || alarm.stage === 2)) { // ACTIVE or ACKNOWLEDGED
                    switch (alarm.priority) {
                        case 3: stats.critical++; break;
                        case 2: stats.high++; break;
                        case 1: stats.medium++; break;
                        case 0: stats.low++; break;
                    }
                }
            });

            document.getElementById('criticalCount').textContent = stats.critical;
            document.getElementById('highCount').textContent = stats.high;
            document.getElementById('mediumCount').textContent = stats.medium;
            document.getElementById('lowCount').textContent = stats.low;
        }

        // Display alarms in table
        function displayAlarms() {
            const tbody = document.querySelector('#alarmsTable tbody');
            
            if (alarmsData.length === 0) {
                tbody.innerHTML = '<tr><td colspan="10" class="no-alarms">No alarms configured</td></tr>';
                return;
            }

            tbody.innerHTML = alarmsData.map(alarm => createAlarmRow(alarm)).join('');
            filterTable(); // Apply current filters
        }

        // Create table row for alarm
        function createAlarmRow(alarm) {
            const createdDate = new Date(alarm.timestamp).toLocaleString();
            const acknowledgedDate = alarm.acknowledgedTime ? 
                new Date(alarm.acknowledgedTime).toLocaleString() : '-';

            return `
                <tr data-priority="${alarm.priority}" data-status="${getStageText(alarm.stage)}" data-type="${alarm.type}">
                    <td>${alarm.pointAddress}</td>
                    <td>${alarm.pointName || 'Unknown'}</td>
                    <td><span class="alarm-type ${getTypeClass(alarm.type)}">${getTypeText(alarm.type)}</span></td>
                    <td><span class="priority-${getPriorityClass(alarm.priority)}">${getPriorityText(alarm.priority)}</span></td>
                    <td><span class="status-${getStageText(alarm.stage).toLowerCase()}">${getStageText(alarm.stage)}</span></td>
                    <td>${alarm.currentTemp !== undefined ? alarm.currentTemp + '°C' : 'N/A'}</td>
                    <td>${alarm.threshold !== undefined ? alarm.threshold + '°C' : 'N/A'}</td>
                    <td><span class="timestamp">${createdDate}</span></td>
                    <td><span class="timestamp">${acknowledgedDate}</span></td>
                    <td>
                        ${alarm.isActive && !alarm.isAcknowledged ? 
                            `<button class="btn btn-warning" onclick="acknowledgeAlarm('${alarm.configKey}')">Acknowledge</button>` : 
                            ''}
                        ${//alarm.stage === 4 ? // RESOLVED
                            `<button class="btn btn-danger" onclick="deleteAlarm('${alarm.configKey}')">Delete</button>` //:
                            //''
                            }
                    </td>
                </tr>
            `;
        }

        // Helper functions
        function getTypeText(type) {
            const types = ['High Temp', 'Low Temp', 'Sensor Error', 'Disconnected'];
            return types[type] || 'Unknown';
        }

        function getTypeClass(type) {
            const classes = ['type-high-temp', 'type-low-temp', 'type-sensor-error', 'type-sensor-disconnected'];
            return classes[type] || '';
        }

        function getPriorityText(priority) {
            const priorities = ['Low', 'Medium', 'High', 'Critical'];
            return priorities[priority] || 'Unknown';
        }

        function getPriorityClass(priority) {
            const classes = ['low', 'medium', 'high', 'critical'];
            return classes[priority] || 'low';
        }

        function getStageText(stage) {
            const stages = ['NEW', 'ACTIVE', 'ACKNOWLEDGED', 'CLEARED', 'RESOLVED'];
            return stages[stage] || 'UNKNOWN';
        }

        // Table sorting function
        function sortTable(columnIndex) {
            const table = document.getElementById('alarmsTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
                !row.querySelector('.no-alarms'));

            // Update sort direction
            if (sortColumn === columnIndex) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortDirection = 'asc';
                sortColumn = columnIndex;
            }

            // Clear previous sort indicators
            table.querySelectorAll('th').forEach(th => {
                th.classList.remove('sort-asc', 'sort-desc');
            });

            // Add current sort indicator
            const currentHeader = table.querySelector(`th:nth-child(${columnIndex + 1})`);
            currentHeader.classList.add(sortDirection === 'asc' ? 'sort-asc' : 'sort-desc');

            // Sort rows
            rows.sort((a, b) => {
                const aValue = a.cells[columnIndex].textContent.trim();
                const bValue = b.cells[columnIndex].textContent.trim();

                let comparison = 0;
                
                // Handle numeric columns
                if (columnIndex === 0 || columnIndex === 5 || columnIndex === 6) { // Point, Current Temp, Threshold
                    const aNum = parseFloat(aValue) || 0;
                    const bNum = parseFloat(bValue) || 0;
                    comparison = aNum - bNum;
                } else if (columnIndex === 3) { // Priority
                    const priorityOrder = { 'Critical': 3, 'High': 2, 'Medium': 1, 'Low': 0 };
                    comparison = (priorityOrder[aValue] || 0) - (priorityOrder[bValue] || 0);
                } else if (columnIndex === 7 || columnIndex === 8) { // Timestamps
                    const aDate = new Date(aValue);
                    const bDate = new Date(bValue);
                    comparison = aDate - bDate;
                } else {
                    // String comparison
                    comparison = aValue.localeCompare(bValue);
                }

                return sortDirection === 'asc' ? comparison : -comparison;
            });

            // Re-append sorted rows
            rows.forEach(row => tbody.appendChild(row));
        }

        // Filter table function
        function filterTable() {
            const statusFilter = document.getElementById('statusFilter').value;
            const priorityFilter = document.getElementById('priorityFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            
            const rows = document.querySelectorAll('#alarmsTable tbody tr');
            
            rows.forEach(row => {
                if (row.querySelector('.no-alarms')) return;
                
                const status = row.dataset.status;
                const priority = row.dataset.priority;
                const type = row.dataset.type;
                
                const statusMatch = !statusFilter || status === statusFilter;
                const priorityMatch = !priorityFilter || priority === priorityFilter;
                const typeMatch = !typeFilter || type === typeFilter;
                
                row.style.display = (statusMatch && priorityMatch && typeMatch) ? '' : 'none';
            });
        }

        // Acknowledge alarm
        async function acknowledgeAlarm(configKey) {
            try {
                const response = await fetch('/api/alarms/acknowledge', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ configKey: configKey })
                });

                if (response.ok) {
                    refreshAlarms();
                } else {
                    alert('Error acknowledging alarm');
                }
            } catch (error) {
                console.error('Error acknowledging alarm:', error);
                alert('Error acknowledging alarm');
            }
        }

        // Acknowledge all active alarms
        async function acknowledgeAllActive() {
            if (!confirm('Acknowledge all active alarms?')) return;

            try {
                const response = await fetch('/api/alarms/acknowledge-all', {
                    method: 'POST'
                });

                if (response.ok) {
                    refreshAlarms();
                } else {
                    alert('Error acknowledging alarms');
                }
            } catch (error) {
                console.error('Error acknowledging alarms:', error);
                alert('Error acknowledging alarms');
            }
        }

        // Delete resolved alarm
        async function deleteAlarm(configKey) {
            if (!confirm('Delete this resolved alarm?')) return;

            try {
                const response = await fetch(`/api/alarms?configKey=${encodeURIComponent(configKey)}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    refreshAlarms();
                } else {
                    alert('Error deleting alarm');
                }
            } catch (error) {
                console.error('Error deleting alarm:', error);
                alert('Error deleting alarm');
            }
        }

        // Clear all resolved alarms
        async function clearResolved() {
            if (!confirm('Clear all resolved alarms?')) return;

            try {
                const response = await fetch('/api/alarms/clear-resolved', {
                    method: 'POST'
                });

                if (response.ok) {
                    refreshAlarms();
                } else {
                    alert('Error clearing resolved alarms');
                }
            } catch (error) {
                console.error('Error clearing resolved alarms:', error);
                alert('Error clearing resolved alarms');
            }
        }

        
    </script>
</body>
</html>


================================================================================
File: dashboard.html
Size: 28.97 kB
================================================================================

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Temperature Monitoring System</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>

.status-ok {
            color: #388e3c;
            font-weight: bold;
        }
        .status-error, .status-alarm, .status-unbound {
            color: #d32f2f;
            font-weight: bold;
        }
        .status-bound {
            color: #388e3c;
            font-weight: bold;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 10;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 8% auto;
            padding: 24px;
            border: 1px solid #888;
            width: 100%;
            max-width: 400px;
            border-radius: 6px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover,
        .close:focus {
            color: #d32f2f;
            text-decoration: none;
            cursor: pointer;
        }
        .form-group {
            margin-bottom: 18px;
        }
        .form-group label {
            display: block;
            font-weight: bold;
            margin-bottom: 4px;
        }
        .form-group input[type="text"],
        .form-group input[type="number"] {
            width: 95%;
            padding: 6px;
            font-size: 1em;
        }
        .form-actions {
            text-align: right;
        }
        .form-actions button {
            margin-left: 10px;
            padding: 5px 15px;
        }
        
        /* Use styles from index.html */
        body {
            font-family: Arial, sans-serif;
            background: #f7f7f7;
            margin: 0;
            padding: 0;
        }
        header {
            background: #3f51b5;
            color: #fff;
            padding: 1em 2em;
            text-align: center;
            font-size: 1.5em;
            letter-spacing: 2px;
        }
        nav {
            background: #263238;
            padding: 0.5em 2em;
        }
        nav a {
            color: #fff;
            text-decoration: none;
            margin-right: 2em;
            font-weight: bold;
            transition: color 0.2s;
        }
        nav a:hover {
            color: #ffeb3b;
        }
        main {
            max-width: 1200px;
            margin: 2em auto;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
            padding: 2em;
        }
        h2 {
            margin-top: 1em;
            color: #3f51b5;
            font-size: 1.2em;
            border-bottom: 1px solid #eee;
            padding-bottom: 0.25em;
        }
        .actions {
            margin-bottom: 1.5em;
        }
        button {
            background: #3f51b5;
            color: #fff;
            border: none;
            padding: 0.5em 1.2em;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1em;
            margin-right: 0.5em;
            transition: background 0.2s;
        }
        button:hover {
            background: #283593;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2em;
        }
        th, td {
            padding: 0.6em 0.8em;
            border-bottom: 1px solid #eee;
            text-align: left;
        }
        th {
            background: #f0f4ff;
            color: #3f51b5;
        }
        tr:last-child td {
            border-bottom: none;
        }
        .status-bound {
            color: #388e3c;
            font-weight: bold;
        }
        .status-unbound {
            color: #b71c1c;
            font-weight: bold;
        }
        .rom, .chip-select {
            font-family: monospace;
            font-size: 0.98em;
            color: #333;
        }
        @media (max-width: 800px) {
            main { padding: 1em; }
            th, td { font-size: 0.95em; }
        }
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            margin-top: 0;
        }
        .navbar {
            background-color: #333;
            overflow: hidden;
            margin-bottom: 20px;
            border-radius: 5px;
        }
        .navbar a {
            float: left;
            display: block;
            color: white;
            text-align: center;
            padding: 14px 16px;
            text-decoration: none;
        }
        .navbar a:hover {
            background-color: #ddd;
            color: black;
        }
        .dashboard {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
        }
        .card {
            flex: 1;
            min-width: 300px;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            background-color: #fff;
        }
        .card h2 {
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .status-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid #f5f5f5;
        }
        .status-label {
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>Temperature Monitoring System</header>
        <nav>
            <a href="dashboard.html">Home</a>
            <a href="settings.html">Settings</a>
            <a href="sensors.html">Sensors</a>
            <a href="points.html">Points</a>
            <a href="/alarms.html">Alarms</a>
    
        </nav>
        <!-- CSV Import/Export Section -->
        <div class="csv-section" style="margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px;">
            <h3>Configuration Backup/Restore</h3>
            
            <!-- Export Button -->
            <button id="exportCsvBtn" class="btn btn-primary" style="margin-right: 10px;">
                📥 Export Configuration to CSV
            </button>
            
            <!-- Import Section -->
            <input type="file" id="csvFileInput" accept=".csv" style="display: none;">
            <button id="importCsvBtn" class="btn btn-secondary">
                📤 Import Configuration from CSV
            </button>
            
            <div id="csvStatus" style="margin-top: 10px; font-weight: bold;"></div>
        </div>

        <!-- Settings CSV Import/Export Section -->
        <div class="settings-csv-section" style="margin: 20px 0; padding: 15px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f9;">
            <h3>Device Settings Backup/Restore</h3>
            
            <!-- Export Button -->
            <button id="exportSettingsBtn" class="btn btn-success" style="margin-right: 10px;">
                📥 Export Device Settings to CSV
            </button>
            
            <!-- Import Section -->
            <input type="file" id="settingsFileInput" accept=".csv" style="display: none;">
            <button id="importSettingsBtn" class="btn btn-warning">
                📤 Import Device Settings from CSV
            </button>
            
            <div id="settingsStatus" style="margin-top: 10px; font-weight: bold;"></div>
            
            <div style="margin-top: 10px; font-size: 12px; color: #666;">
                <strong>Note:</strong> Device will restart automatically after importing settings to apply changes.
            </div>
        </div>


        
        <div class="dashboard">
            <div class="card">
                <h2>System Status</h2>
                <div id="system-status">
                    <p>Loading system status...</p>
                </div>
            </div>
            
            <div class="card">
                <h2>Sensor Overview</h2>
                <div id="sensor-overview">
                    <p>Loading sensor data...</p>
                </div>
            </div>
        </div>
    </div>


    <main>
    <h2>DS18B20 Points</h2>
    
        <table>
            <thead>
                <tr>
                    <th>Address</th>
                    <th>Name</th>
                    <th>Current Temp</th>
                    <th>Min Temp</th>
                    <th>Max Temp</th>
                    <th>Alarm Status</th>
                    <th>Error Status</th>

                </tr>
            </thead>
            <tbody id="dsPointsTbody">
                <tr><td colspan="11">Loading DS18B20 points...</td></tr>
            </tbody>
        </table>

        <h2>PT1000 Points</h2>
        <table>
            <thead>
                <tr>
                    <th>Address</th>
                    <th>Name</th>
                    <th>Current Temp</th>
                    <th>Min Temp</th>
                    <th>Max Temp</th>
                    <th>Alarm Status</th>
                    <th>Error Status</th>
                </tr>
            </thead>
            <tbody id="ptPointsTbody">
                <tr><td colspan="11">Loading PT1000 points...</td></tr>
            </tbody>
        </table>
    </main>

    <!-- Modal -->
    <div id="pointConfigModal" class="modal">
        <div class="modal-content">
            <span class="close" id="modalCloseBtn">&times;</span>
            <h2>Edit Point</h2>
            <form id="pointConfigForm">
                <input type="hidden" id="modalPointAddress">
                <div class="form-group">
                    <label for="modalPointName">Name</label>
                    <input type="text" id="modalPointName" required>
                </div>
                <div class="form-group">
                    <label for="modalLowAlarm">Low Alarm Threshold (°C)</label>
                    <input type="number" id="modalLowAlarm" step="0.1" required>
                </div>
                <div class="form-group">
                    <label for="modalHighAlarm">High Alarm Threshold (°C)</label>
                    <input type="number" id="modalHighAlarm" step="0.1" required>
                </div>
                <div class="form-actions">
                    <button type="submit" class="button">Save</button>
                    <button type="button" class="button" id="modalCancelBtn" style="background:#888;">Cancel</button>
                </div>
            </form>
        </div>
    </div>




    <script>

        // Auto-update interval (ms)
        const UPDATE_INTERVAL = 5000;
        // Fetch system status
        function fetchSystemStatus() {
            fetch('/api/status')
                .then(response => response.json())
                .then(data => {
                    displaySystemStatus(data);
                })
                .catch(error => {
                    console.error('Error fetching system status:', error);
                    document.getElementById('system-status').innerHTML = 
                        '<p>Error loading system status. Please try again.</p>';
                });
        }
        
        // Display system status
        function displaySystemStatus(data) {
            const container = document.getElementById('system-status');
            
            let html = '';
            html += `<div class="status-item"><span class="status-label">Device ID:</span> <span>${data.deviceId}</span></div>`;
            html += `<div class="status-item"><span class="status-label">Firmware Version:</span> <span>${(data.firmwareVersion >> 8)}.${data.firmwareVersion & 0xFF}</span></div>`;
            html += `<div class="status-item"><span class="status-label">Measurement Period:</span> <span>${data.measurementPeriod} seconds</span></div>`;
            html += `<div class="status-item"><span class="status-label">Uptime:</span> <span>${formatUptime(data.uptime)}</span></div>`;
            
            container.innerHTML = html;
        }
        
        // Format uptime in a human-readable way
        function formatUptime(seconds) {
            const days = Math.floor(seconds / 86400);
            seconds %= 86400;
            const hours = Math.floor(seconds / 3600);
            seconds %= 3600;
            const minutes = Math.floor(seconds / 60);
            seconds %= 60;
            
            let result = '';
            if (days > 0) result += `${days}d `;
            if (hours > 0 || days > 0) result += `${hours}h `;
            if (minutes > 0 || hours > 0 || days > 0) result += `${minutes}m `;
            result += `${seconds}s`;
            
            return result;
        }
        
        // Fetch sensor overview
        function fetchSensorOverview() {
            fetch('/api/sensors')
                .then(response => response.json())
                .then(data => {
                    displaySensorOverview(data);
                })
                .catch(error => {
                    console.error('Error fetching sensors:', error);
                    document.getElementById('sensor-overview').innerHTML = 
                        '<p>Error loading sensor data. Please try again.</p>';
                });
        }
        
        // Display sensor overview
        function displaySensorOverview(data) {
            const container = document.getElementById('sensor-overview');
            
            if (!data.sensors || data.sensors.length === 0) {
                container.innerHTML = '<p>No sensors found. Go to the Sensors page to discover and configure sensors.</p>';
                return;
            }
            
            let html = '';
            html += `<div class="status-item"><span class="status-label">Total Sensors:</span> <span>${data.sensors.length}</span></div>`;
            
            const ds18b20Count = data.sensors.filter(s => s.type === 'DS18B20').length;
            const pt1000Count = data.sensors.filter(s => s.type === 'PT1000').length;
            
            html += `<div class="status-item"><span class="status-label">DS18B20 Sensors:</span> <span>${ds18b20Count}</span></div>`;
            html += `<div class="status-item"><span class="status-label">PT1000 Sensors:</span> <span>${pt1000Count}</span></div>`;
            
            const alarmsCount = data.sensors.filter(s => s.alarmStatus > 0).length;
            const errorsCount = data.sensors.filter(s => s.errorStatus > 0).length;
            
            html += `<div class="status-item"><span class="status-label">Sensors in Alarm:</span> <span>${alarmsCount}</span></div>`;
            html += `<div class="status-item"><span class="status-label">Sensors with Errors:</span> <span>${errorsCount}</span></div>`;
            
            html += `<p><a href="/sensors.html">View all sensors</a></p>`;
            
            container.innerHTML = html;
        }
        
        // Load data when page loads
        document.addEventListener('DOMContentLoaded', () => {
            fetchSystemStatus();
            fetchSensorOverview();
        });
        
        // Refresh data every 5 seconds
        setInterval(() => {
            fetchSystemStatus();
            fetchSensorOverview();
        }, UPDATE_INTERVAL);



        // Helper functions for status rendering
        function getAlarmText(alarmStatus) {
            if (alarmStatus === 0) return '<span class="status-ok">OK</span>';
            const alarms = [];
            if (alarmStatus & 0x01) alarms.push('Low Temp');
            if (alarmStatus & 0x02) alarms.push('High Temp');
            return `<span class="status-alarm">${alarms.join(', ')}</span>`;
        }
        function getErrorText(errorStatus) {
            if (errorStatus === 0) return '<span class="status-ok">OK</span>';
            const errors = [];
            if (errorStatus & 0x01) errors.push('Comm');
            if (errorStatus & 0x02) errors.push('OutOfRange');
            if (errorStatus & 0x04) errors.push('Disconnected');
            return `<span class="status-error">${errors.join(', ')}</span>`;
        }
        function getSensorStatus(bound) {
            return bound
                ? '<span class="status-bound">Bound</span>'
                : '<span class="status-unbound">Unbound</span>';
        }

        // Modal logic
        const modal = document.getElementById('pointConfigModal');
        const modalCloseBtn = document.getElementById('modalCloseBtn');
        const modalCancelBtn = document.getElementById('modalCancelBtn');
        const pointConfigForm = document.getElementById('pointConfigForm');
        let currentEditPoint = null;

        function openModal(point) {
            currentEditPoint = point;
            document.getElementById('modalPointAddress').value = point.address;
            document.getElementById('modalPointName').value = point.name || '';
            document.getElementById('modalLowAlarm').value = point.lowAlarmThreshold;
            document.getElementById('modalHighAlarm').value = point.highAlarmThreshold;
            modal.style.display = "block";
        }
        function closeModal() {
            modal.style.display = "none";
            currentEditPoint = null;
        }
        modalCloseBtn.onclick = closeModal;
        modalCancelBtn.onclick = closeModal;
        window.onclick = function(event) {
            if (event.target === modal) closeModal();
        };

        // Fetch and render points
        function fetchAndRenderPoints() {
            fetch('/api/points')
                .then(res => res.json())
                .then(data => renderPointsTables(data.points))
                .catch(() => {
                    document.getElementById('dsPointsTbody').innerHTML = '<tr><td colspan="11">Failed to load points.</td></tr>';
                    document.getElementById('ptPointsTbody').innerHTML = '<tr><td colspan="11">Failed to load points.</td></tr>';
                });
        }

        function renderPointsTables(points) {
            const dsTbody = document.getElementById('dsPointsTbody');
            const ptTbody = document.getElementById('ptPointsTbody');
            dsTbody.innerHTML = '';
            ptTbody.innerHTML = '';

            const dsPoints = points.filter(p => p.type === "DS18B20");
            const ptPoints = points.filter(p => p.type === "PT1000");

            if (dsPoints.length === 0) {
                dsTbody.innerHTML = '<tr><td colspan="11">No DS18B20 points found.</td></tr>';
            } else {
                dsPoints.forEach(point => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${point.address}</td>
                        <td>${point.name || ''}</td>
                        <td>${point.currentTemp !== undefined ? point.currentTemp : ''}</td>
                        <td>${point.minTemp !== undefined ? point.minTemp : ''}</td>
                        <td>${point.maxTemp !== undefined ? point.maxTemp : ''}</td>
                        <td>${getAlarmText(point.alarmStatus)}</td>
                        <td>${getErrorText(point.errorStatus)}</td>
                       
                    `;
                    dsTbody.appendChild(row);
                });
            }

            if (ptPoints.length === 0) {
                ptTbody.innerHTML = '<tr><td colspan="11">No PT1000 points found.</td></tr>';
            } else {
                ptPoints.forEach(point => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${point.address}</td>
                        <td>${point.name || ''}</td>
                        <td>${point.currentTemp !== undefined ? point.currentTemp : ''}</td>
                        <td>${point.minTemp !== undefined ? point.minTemp : ''}</td>
                        <td>${point.maxTemp !== undefined ? point.maxTemp : ''}</td>
                        <td>${getAlarmText(point.alarmStatus)}</td>
                        <td>${getErrorText(point.errorStatus)}</td>
                      
                    `;
                    ptTbody.appendChild(row);
                });
            }
        }

        // Edit handler
        function onEditPoint(address) {
            fetch('/api/points')
                .then(res => res.json())
                .then(data => {
                    const point = data.points.find(p => p.address === address);
                    if (point) openModal(point);
                });
        }
        window.onEditPoint = onEditPoint;

        // Handle form submit
        pointConfigForm.onsubmit = function(e) {
            e.preventDefault();
            const address = parseInt(document.getElementById('modalPointAddress').value, 10);
            const name = document.getElementById('modalPointName').value;
            const lowAlarm = parseFloat(document.getElementById('modalLowAlarm').value);
            const highAlarm = parseFloat(document.getElementById('modalHighAlarm').value);

            fetch('/api/points', {
                method: 'PUT',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ address, name, lowAlarmThreshold: lowAlarm, highAlarmThreshold: highAlarm })
            })
            .then(res => {
                if (!res.ok) throw new Error('Failed to update point');
                closeModal();
                fetchAndRenderPoints();
            })
            .catch(() => alert('Failed to update point!'));
        };

        // Initial load
        setInterval(fetchAndRenderPoints, UPDATE_INTERVAL);
        window.onload = fetchAndRenderPoints();
        // Optionally, set up periodic refresh if needed
        // setInterval(fetchAndRenderPoints, 10000);

        // Export CSV functionality
        document.getElementById('exportCsvBtn').addEventListener('click', function() {
            fetch('/api/csv/export', {
                method: 'GET'
            })
            .then(response => {
                if (response.ok) {
                    return response.blob();
                }
                throw new Error('Export failed');
            })
            .then(blob => {
                // Create download link
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'temperature_config_' + new Date().toISOString().split('T')[0] + '.csv';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                document.getElementById('csvStatus').innerHTML = '<span style="color: green;">✓ Configuration exported successfully</span>';
            })
            .catch(error => {
                document.getElementById('csvStatus').innerHTML = '<span style="color: red;">✗ Export failed: ' + error.message + '</span>';
            });
        });

        // Import CSV functionality
        document.getElementById('importCsvBtn').addEventListener('click', function() {
            document.getElementById('csvFileInput').click();
        });

        document.getElementById('csvFileInput').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            if (!file.name.toLowerCase().endsWith('.csv')) {
                document.getElementById('csvStatus').innerHTML = '<span style="color: red;">✗ Please select a CSV file</span>';
                return;
            }
            
            const formData = new FormData();
            formData.append('csvFile', file);
            
            document.getElementById('csvStatus').innerHTML = '<span style="color: blue;">⏳ Importing configuration...</span>';
            
            fetch('/api/csv/import', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('csvStatus').innerHTML = '<span style="color: green;">✓ Configuration imported successfully</span>';
                    // Refresh the page to show updated data
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                } else {
                    document.getElementById('csvStatus').innerHTML = '<span style="color: red;">✗ Import failed: ' + data.error + '</span>';
                }
            })
            .catch(error => {
                document.getElementById('csvStatus').innerHTML = '<span style="color: red;">✗ Import failed: ' + error.message + '</span>';
            });
            
            // Reset file input
            event.target.value = '';
        });

        // Export Settings CSV functionality
        document.getElementById('exportSettingsBtn').addEventListener('click', function() {
            fetch('/api/settings/export', {
                method: 'GET'
            })
            .then(response => {
                if (response.ok) {
                    return response.blob();
                }
                throw new Error('Settings export failed');
            })
            .then(blob => {
                // Create download link
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'device_settings_' + new Date().toISOString().split('T')[0] + '.csv';
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                document.getElementById('settingsStatus').innerHTML = '<span style="color: green;">✓ Device settings exported successfully</span>';
            })
            .catch(error => {
                document.getElementById('settingsStatus').innerHTML = '<span style="color: red;">✗ Export failed: ' + error.message + '</span>';
            });
        });

        // Import Settings CSV functionality
        document.getElementById('importSettingsBtn').addEventListener('click', function() {
            document.getElementById('settingsFileInput').click();
        });

        document.getElementById('settingsFileInput').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            if (!file.name.toLowerCase().endsWith('.csv')) {
                document.getElementById('settingsStatus').innerHTML = '<span style="color: red;">✗ Please select a CSV file</span>';
                return;
            }
            
            if (!confirm('Importing settings will restart the device. Continue?')) {
                event.target.value = '';
                return;
            }
            
            const formData = new FormData();
            formData.append('settingsFile', file);
            
            document.getElementById('settingsStatus').innerHTML = '<span style="color: blue;">⏳ Importing settings...</span>';
            
            fetch('/api/settings/import', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('settingsStatus').innerHTML = '<span style="color: green;">✓ Settings imported successfully. Device restarting...</span>';
                } else {
                    document.getElementById('settingsStatus').innerHTML = '<span style="color: red;">✗ Import failed: ' + data.error + '</span>';
                }
            })
            .catch(error => {
                document.getElementById('settingsStatus').innerHTML = '<span style="color: red;">✗ Import failed: ' + error.message + '</span>';
            });
            
            // Reset file input
            event.target.value = '';
        });
    </script>
</body>
</html>


================================================================================
File: points.html
Size: 20.93 kB
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Temperature Controller - Points</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        nav {
            margin-bottom: 20px;
            padding: 10px;
            background: #007bff;
            border-radius: 5px;
        }
        nav a {
            color: white;
            text-decoration: none;
            margin-right: 15px;
            padding: 5px 10px;
            border-radius: 3px;
        }
        nav a:hover {
            background: rgba(255,255,255,0.2);
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .btn {
            padding: 5px 10px;
            margin: 2px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 12px;
        }
        .btn-primary {
            background-color: #007bff;
            color: white;
        }
        .btn-warning {
            background-color: #ffc107;
            color: black;
        }
        .btn-danger {
            background-color: #dc3545;
            color: white;
        }
        .btn:hover {
            opacity: 0.8;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            border-radius: 8px;
            width: 80%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: black;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-group input, .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .alarm-list {
            margin-top: 20px;
        }
        .alarm-item {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 10px;
        }
        .alarm-item.critical {
            border-left: 4px solid #dc3545;
        }
        .alarm-item.high {
            border-left: 4px solid #fd7e14;
        }
        .alarm-item.medium {
            border-left: 4px solid #ffc107;
        }
        .alarm-item.low {
            border-left: 4px solid #28a745;
        }
        .status-active {
            color: #dc3545;
            font-weight: bold;
        }
        .status-inactive {
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container">
        <nav>
            <a href="/dashboard.html">Home</a>
            <a href="/sensors.html">Sensors</a>
            <a href="/points.html">Points</a>
            <a href="/config">Configuration</a>
            <a href="/alarms.html">Alarms</a>
        </nav>

        <h1>Temperature Measurement Points</h1>

        ## DS18B20 Points
        <table id="ds18b20Table">
            <thead>
                <tr>
                    <th>Address</th>
                    <th>Bus</th>
                    <th>Name</th>
                    <th>Current Temp</th>
                    <th>Min Temp</th>
                    <th>Max Temp</th>
                    <th>Low Alarm</th>
                    <th>High Alarm</th>
                    <th>Alarm Status</th>
                    <th>Error Status</th>
                    <th>Sensor Status</th>
                    <th>Edit Point</th>
                    <th>Edit Alarm</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="13">Loading DS18B20 points...</td>
                </tr>
            </tbody>
        </table>

        ## PT1000 Points
        <table id="pt1000Table">
            <thead>
                <tr>
                    <th>Address</th>
                    <th>Bus</th>
                    <th>Name</th>
                    <th>Current Temp</th>
                    <th>Min Temp</th>
                    <th>Max Temp</th>
                    <th>Low Alarm</th>
                    <th>High Alarm</th>
                    <th>Alarm Status</th>
                    <th>Error Status</th>
                    <th>Sensor Status</th>
                    <th>Edit Point</th>
                    <th>Edit Alarm</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="13">Loading PT1000 points...</td>
                </tr>
            </tbody>
        </table>
    </div>

    <!-- Point Edit Modal -->
    <div id="pointModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closePointModal()">&times;</span>
            <h2>Edit Point</h2>
            <form id="pointForm">
                <div class="form-group">
                    <label for="pointAddress">Address:</label>
                    <input type="number" id="pointAddress" readonly>
                </div>
                <div class="form-group">
                    <label for="pointName">Name:</label>
                    <input type="text" id="pointName" required>
                </div>
                <div class="form-group">
                    <label for="lowAlarm">Low Alarm Threshold:</label>
                    <input type="number" id="lowAlarm" step="0.1">
                </div>
                <div class="form-group">
                    <label for="highAlarm">High Alarm Threshold:</label>
                    <input type="number" id="highAlarm" step="0.1">
                </div>
                <button type="submit" class="btn btn-primary">Save Point</button>
                <button type="button" class="btn" onclick="closePointModal()">Cancel</button>
            </form>
        </div>
    </div>

    <!-- Alarm Configuration Modal -->
    <div id="alarmModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAlarmModal()">&times;</span>
            <h2>Alarm Configuration for Point <span id="alarmPointInfo"></span></h2>
            
            <div class="form-group">
                <h3>Add New Alarm</h3>
                <form id="alarmForm">
                    <div class="form-group">
                        <label for="alarmType">Alarm Type:</label>
                        <select id="alarmType" required>
                            <option value="0">High Temperature</option>
                            <option value="1">Low Temperature</option>
                            <option value="2">Sensor Error</option>
                            <option value="3">Sensor Disconnected</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="alarmPriority">Priority:</label>
                        <select id="alarmPriority" required>
                            <option value="0">Low</option>
                            <option value="1">Medium</option>
                            <option value="2">High</option>
                            <option value="3">Critical</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Alarm</button>
                </form>
            </div>

            <div class="alarm-list">
                <h3>Configured Alarms</h3>
                <div id="alarmsList">
                    <!-- Alarms will be loaded here -->
                </div>
            </div>

            <div style="margin-top: 20px;">
                <button type="button" class="btn" onclick="closeAlarmModal()">Close</button>
            </div>
        </div>
    </div>

    <script>
        const UPDATE_INTERVAL = 5000;
        let currentPointAddress = null;
        let pointsData = [];
        let alarmsData = [];

        // Load points data on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadPoints();
            loadAlarms();
        });

        // Load points from API
        async function loadPoints() {
            try {
                const response = await fetch('/api/points');
                const data = await response.json();
                pointsData = data.points || [];
                displayPoints();
            } catch (error) {
                console.error('Error loading points:', error);
            }
        }

        // Load alarms from API
        async function loadAlarms() {
            try {
                const response = await fetch('/api/alarms');
                const data = await response.json();
                alarmsData = data.alarms || [];
            } catch (error) {
                console.error('Error loading alarms:', error);
            }
        }

        // Display points in tables
        function displayPoints() {
            const ds18b20Table = document.getElementById('ds18b20Table').getElementsByTagName('tbody')[0];
            const pt1000Table = document.getElementById('pt1000Table').getElementsByTagName('tbody')[0];
            
            // Clear existing rows
            ds18b20Table.innerHTML = '';
            pt1000Table.innerHTML = '';

            pointsData.forEach(point => {
                const row = createPointRow(point);
                
                if (point.type === 'DS18B20') {
                    ds18b20Table.appendChild(row);
                } else if (point.type === 'PT1000') {
                    pt1000Table.appendChild(row);
                }
            });
        }

        // Create table row for a point
        function createPointRow(point) {
            const row = document.createElement('tr');
            
            const alarmCount = getAlarmCountForPoint(point.address);
            const alarmStatus = alarmCount > 0 ? `${alarmCount} configured` : 'None';
            
            row.innerHTML = `
                <td>${point.address}</td>
                <td>${point.bus || 'N/A'}</td>
                <td>${point.name}</td>
                <td>${point.currentTemp}°C</td>
                <td>${point.minTemp}°C</td>
                <td>${point.maxTemp}°C</td>
                <td>${point.lowAlarmThreshold}°C</td>
                <td>${point.highAlarmThreshold}°C</td>
                <td>${alarmStatus}</td>
                <td>${point.errorStatus || 'OK'}</td>
                <td>${point.sensorType || 'No Sensor'}</td>
                <td><button class="btn btn-primary" onclick="editPoint(${point.address})">Edit</button></td>
                <td><button class="btn btn-warning" onclick="editAlarms(${point.address})">Alarms</button></td>
            `;
            
            return row;
        }

        // Get alarm count for a specific point
        function getAlarmCountForPoint(pointAddress) {
            return alarmsData.filter(alarm => alarm.pointAddress === pointAddress).length;
        }

        // Edit point function
        function editPoint(address) {
            const point = pointsData.find(p => p.address === address);
            if (!point) return;

            document.getElementById('pointAddress').value = point.address;
            document.getElementById('pointName').value = point.name;
            document.getElementById('lowAlarm').value = point.lowAlarmThreshold;
            document.getElementById('highAlarm').value = point.highAlarmThreshold;
            
            document.getElementById('pointModal').style.display = 'block';
        }

        // Edit alarms function
        function editAlarms(address) {
            currentPointAddress = address;
            const point = pointsData.find(p => p.address === address);
            if (!point) return;

            document.getElementById('alarmPointInfo').textContent = `${address} (${point.name})`;
            displayAlarmsForPoint(address);
            document.getElementById('alarmModal').style.display = 'block';
        }

        // Display alarms for specific point
        function displayAlarmsForPoint(pointAddress) {
            const alarmsList = document.getElementById('alarmsList');
            const pointAlarms = alarmsData.filter(alarm => alarm.pointAddress === pointAddress);
            
            if (pointAlarms.length === 0) {
                alarmsList.innerHTML = '<p>No alarms configured for this point.</p>';
                return;
            }

            alarmsList.innerHTML = pointAlarms.map(alarm => `
                <div class="alarm-item ${getPriorityClass(alarm.priority)}">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong>${getAlarmTypeText(alarm.type)}</strong> - 
                            <span class="${alarm.enabled ? 'status-active' : 'status-inactive'}">
                                ${alarm.enabled ? 'Enabled' : 'Disabled'}
                            </span>
                            <br>
                            <small>Priority: ${getPriorityText(alarm.priority)}</small>
                            ${alarm.isActive ? '<br><small class="status-active">Currently Active</small>' : ''}
                        </div>
                        <div>
                            <button class="btn btn-warning" onclick="toggleAlarm('${alarm.configKey}', ${!alarm.enabled})">
                                ${alarm.enabled ? 'Disable' : 'Enable'}
                            </button>
                            <button class="btn btn-danger" onclick="deleteAlarm('${alarm.configKey}')">Delete</button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Helper functions for alarm display
        function getAlarmTypeText(type) {
            const types = ['High Temperature', 'Low Temperature', 'Sensor Error', 'Sensor Disconnected'];
            return types[type] || 'Unknown';
        }

        function getPriorityText(priority) {
            const priorities = ['Low', 'Medium', 'High', 'Critical'];
            return priorities[priority] || 'Unknown';
        }

        function getPriorityClass(priority) {
            const classes = ['low', 'medium', 'high', 'critical'];
            return classes[priority] || 'low';
        }

        // Form submission handlers
        document.getElementById('pointForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const pointData = {
                address: parseInt(document.getElementById('pointAddress').value),
                name: document.getElementById('pointName').value,
                lowAlarmThreshold: parseFloat(document.getElementById('lowAlarm').value),
                highAlarmThreshold: parseFloat(document.getElementById('highAlarm').value)
            };

            try {
                const response = await fetch('/api/points', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(pointData)
                });

                if (response.ok) {
                    closePointModal();
                    loadPoints();
                } else {
                    alert('Error updating point');
                }
            } catch (error) {
                console.error('Error updating point:', error);
                alert('Error updating point');
            }
        });

        document.getElementById('alarmForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const alarmData = {
                type: parseInt(document.getElementById('alarmType').value),
                pointAddress: currentPointAddress,
                priority: parseInt(document.getElementById('alarmPriority').value)
            };

            try {
                const response = await fetch('/api/alarms', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(alarmData)
                });

                if (response.ok) {
                    document.getElementById('alarmForm').reset();
                    loadAlarms();
                    displayAlarmsForPoint(currentPointAddress);
                    loadPoints(); // Refresh points to update alarm count
                } else {
                    alert('Error adding alarm');
                }
            } catch (error) {
                console.error('Error adding alarm:', error);
                alert('Error adding alarm');
            }
        });

        // Alarm management functions
        async function toggleAlarm(configKey, enabled) {
            const alarm = alarmsData.find(a => a.configKey === configKey);
            if (!alarm) return;

            try {
                const response = await fetch('/api/alarms', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        configKey: configKey,
                        priority: alarm.priority,
                        enabled: enabled
                    })
                });

                if (response.ok) {
                    loadAlarms();
                    displayAlarmsForPoint(currentPointAddress);
                    loadPoints();
                } else {
                    alert('Error updating alarm');
                }
            } catch (error) {
                console.error('Error updating alarm:', error);
                alert('Error updating alarm');
            }
        }

        async function deleteAlarm(configKey) {
            if (!confirm('Are you sure you want to delete this alarm?')) return;

            try {
                const response = await fetch(`/api/alarms?configKey=${encodeURIComponent(configKey)}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    loadAlarms();
                    displayAlarmsForPoint(currentPointAddress);
                    loadPoints();
                } else {
                    alert('Error deleting alarm');
                }
            } catch (error) {
                console.error('Error deleting alarm:', error);
                alert('Error deleting alarm');
            }
        }

        // Modal control functions
        function closePointModal() {
            document.getElementById('pointModal').style.display = 'none';
        }

        function closeAlarmModal() {
            document.getElementById('alarmModal').style.display = 'none';
            currentPointAddress = null;
        }

        // Close modals when clicking outside
        window.onclick = function(event) {
            const pointModal = document.getElementById('pointModal');
            const alarmModal = document.getElementById('alarmModal');
            
            if (event.target === pointModal) {
                closePointModal();
            }
            if (event.target === alarmModal) {
                closeAlarmModal();
            }
        }

        // Auto-refresh data every 30 seconds
        setInterval(() => {
            loadPoints();
            loadAlarms();
        }, UPDATE_INTERVAL);
    </script>
</body>
</html>


================================================================================
File: sensors.html
Size: 16.24 kB
================================================================================

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Sensors Management</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        /* Use styles from index.html */
        body {
            font-family: Arial, sans-serif;
            background: #f7f7f7;
            margin: 0;
            padding: 0;
        }
        header {
            background: #3f51b5;
            color: #fff;
            padding: 1em 2em;
            text-align: center;
            font-size: 1.5em;
            letter-spacing: 2px;
        }
        nav {
            background: #263238;
            padding: 0.5em 2em;
        }
        nav a {
            color: #fff;
            text-decoration: none;
            margin-right: 2em;
            font-weight: bold;
            transition: color 0.2s;
        }
        nav a:hover {
            color: #ffeb3b;
        }
        main {
            max-width: 1200px;
            margin: 2em auto;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.06);
            padding: 2em;
        }
        h2 {
            margin-top: 1em;
            color: #3f51b5;
            font-size: 1.2em;
            border-bottom: 1px solid #eee;
            padding-bottom: 0.25em;
        }
        .actions {
            margin-bottom: 1.5em;
        }
        button {
            background: #3f51b5;
            color: #fff;
            border: none;
            padding: 0.5em 1.2em;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1em;
            margin-right: 0.5em;
            transition: background 0.2s;
        }
        button:hover {
            background: #283593;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2em;
        }
        th, td {
            padding: 0.6em 0.8em;
            border-bottom: 1px solid #eee;
            text-align: left;
        }
        th {
            background: #f0f4ff;
            color: #3f51b5;
        }
        tr:last-child td {
            border-bottom: none;
        }
        .status-bound {
            color: #388e3c;
            font-weight: bold;
        }
        .status-unbound {
            color: #b71c1c;
            font-weight: bold;
        }
        .rom, .chip-select {
            font-family: monospace;
            font-size: 0.98em;
            color: #333;
        }
        @media (max-width: 800px) {
            main { padding: 1em; }
            th, td { font-size: 0.95em; }
        }
    </style>
</head>
<body>
    <header>Temperature Monitoring System</header>
    <nav>
        <a href="dashboard.html">Home</a>
        <a href="settings.html">Settings</a>
        <a href="sensors.html">Sensors</a>
        <a href="points.html">Points</a>
        <a href="/alarms.html">Alarms</a>

    </nav>
    <main>
        <div class="actions">
            <button id="discoverBtn">Discover</button>
            <button id="resetMinMaxBtn">Reset Min/Max</button>
        </div>

        <h2>DS18B20 Sensors</h2>
        <table id="dsTable">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Name</th>
                    <th>ROM Address</th>
                    <th>Bus</th>
                    <th>Current Temp (°C)</th>
                    <th>Min Temp (°C)</th>
                    <th>Max Temp (°C)</th>
                    <th>Measurement Point</th>
                    <th>Errors</th>
                    <th>Alarms</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="dsTbody">
                <tr><td colspan="8">Loading DS18B20 sensors...</td></tr>
            </tbody>
        </table>

        <h2>PT1000 Sensors</h2>
        <table id="ptTable">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Name</th>
                    <th>Chip Select Pin</th>
                    <th>Bus</th>
                    <th>Current Temp (°C)</th>
                    <th>Min Temp (°C)</th>
                    <th>Max Temp (°C)</th>
                    <th>Measurement Point</th>
                    <th>Errors</th>
                    <th>Alarms</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="ptTbody">
                <tr><td colspan="8">Loading PT1000 sensors...</td></tr>
            </tbody>
        </table>
    </main>
    <script>
        // Auto-update interval (ms)
        const UPDATE_INTERVAL = 5000;

        function fetchSensors() {
            fetch('/api/sensors')
                .then(res => res.json())
                .then(data => {
                    renderSensorTables(data.sensors || []);
                });
        }

        // function renderSensorTables(sensors) {
        //     // Separate DS and PT
        //     const dsSensors = sensors.filter(s => s.type === "DS18B20");
        //     const ptSensors = sensors.filter(s => s.type === "PT1000");

        //     // DS Table
        //     const dsTbody = document.getElementById('dsTbody');
        //     dsTbody.innerHTML = '';
        //     if (dsSensors.length === 0) {
        //         dsTbody.innerHTML = '<tr><td colspan="8">No DS18B20 sensors found.</td></tr>';
        //     } else {
        //         dsSensors.forEach((sensor, idx) => {
        //             const row = document.createElement('tr');
        //             row.innerHTML = `
        //                 <td>${idx+1}</td>
        //                 <td>${sensor.name || ''}</td>
        //                 <td class="rom">${sensor.romString || ''}</td>
        //                 <td>${sensor.currentTemp !== undefined ? sensor.currentTemp : ''}</td>
        //                 <td>${sensor.minTemp !== undefined ? sensor.minTemp : ''}</td>
        //                 <td>${sensor.maxTemp !== undefined ? sensor.maxTemp : ''}</td>
        //                 <td>
        //                     ${sensor.boundPoint !== null && sensor.boundPoint !== undefined
        //                         ? `<span class="status-bound">#${sensor.boundPoint}</span>`
        //                         : `<span class="status-unbound">Unbound</span>`}
        //                 </td>
        //                 <td>
        //                     ${sensor.boundPoint === null || sensor.boundPoint === undefined
        //                         ? `<button onclick="bindPrompt('DS18B20','${sensor.romString}')">Bind</button>`
        //                         : `<button onclick="unbindSensor('DS18B20','${sensor.romString}')">Unbind</button>`}
        //                 </td>
        //             `;
        //             dsTbody.appendChild(row);
        //         });
        //     }

        //     // PT Table
        //     const ptTbody = document.getElementById('ptTbody');
        //     ptTbody.innerHTML = '';
        //     if (ptSensors.length === 0) {
        //         ptTbody.innerHTML = '<tr><td colspan="8">No PT1000 sensors found.</td></tr>';
        //     } else {
        //         ptSensors.forEach((sensor, idx) => {
        //             const row = document.createElement('tr');
        //             row.innerHTML = `
        //                 <td>${idx+1}</td>
        //                 <td>${sensor.name || ''}</td>
        //                 <td class="chip-select">${sensor.chipSelectPin !== undefined ? sensor.chipSelectPin : ''}</td>
        //                 <td>${sensor.currentTemp !== undefined ? sensor.currentTemp : ''}</td>
        //                 <td>${sensor.minTemp !== undefined ? sensor.minTemp : ''}</td>
        //                 <td>${sensor.maxTemp !== undefined ? sensor.maxTemp : ''}</td>
        //                 <td>
        //                     ${sensor.boundPoint !== null && sensor.boundPoint !== undefined
        //                         ? `<span class="status-bound">#${sensor.boundPoint}</span>`
        //                         : `<span class="status-unbound">Unbound</span>`}
        //                 </td>
        //                 <td>
        //                     ${sensor.boundPoint === null || sensor.boundPoint === undefined
        //                         ? `<button onclick="bindPrompt('PT1000','${sensor.chipSelectPin}')">Bind</button>`
        //                         : `<button onclick="unbindSensor('PT1000','${sensor.chipSelectPin}')">Unbind</button>`}
        //                 </td>
        //             `;
        //             ptTbody.appendChild(row);
        //         });
        //     }
        // }

        function renderSensorTables(sensors) {
    // Separate DS and PT
    const dsSensors = sensors.filter(s => s.type === "DS18B20");
    const ptSensors = sensors.filter(s => s.type === "PT1000");

    // Helper functions to interpret status bitmasks
    function getErrorText(errorStatus) {
        if (errorStatus === 0) return '';
        
        const errors = [];
        if (errorStatus & 0x01) errors.push('Communication Error');
        if (errorStatus & 0x02) errors.push('Out of Range');
        if (errorStatus & 0x04) errors.push('Disconnected');
        
        return errors.join(', ');
    }
    
    function getAlarmText(alarmStatus) {
        if (alarmStatus === 0) return '';
        
        const alarms = [];
        if (alarmStatus & 0x01) alarms.push('Low Temperature');
        if (alarmStatus & 0x02) alarms.push('High Temperature');
        
        return alarms.join(', ');
    }
    
    function getStatusClass(errorStatus, alarmStatus) {
        if (errorStatus > 0) return 'status-error';
        if (alarmStatus > 0) return 'status-alarm';
        return 'status-normal';
    }

    // DS Table
    const dsTbody = document.getElementById('dsTbody');
    dsTbody.innerHTML = '';
    if (dsSensors.length === 0) {
        dsTbody.innerHTML = '<tr><td colspan="10">No DS18B20 sensors found.</td></tr>';
    } else {
        dsSensors.forEach((sensor, idx) => {
            const errorText = getErrorText(sensor.errorStatus);
            const alarmText = getAlarmText(sensor.alarmStatus);
            const statusClass = getStatusClass(sensor.errorStatus, sensor.alarmStatus);
            
            const row = document.createElement('tr');
            row.className = statusClass;
            row.innerHTML = `
                <td>${idx+1}</td>
                <td>${sensor.name || ''}</td>
                <td class="rom">${sensor.romString || ''}</td>
                <td>${sensor.bus !== undefined && sensor.bus !== null ? sensor.bus : ''}</td>
                <td>${sensor.currentTemp !== undefined ? sensor.currentTemp : ''}</td>
                <td>${sensor.minTemp !== undefined ? sensor.minTemp : ''}</td>
                <td>${sensor.maxTemp !== undefined ? sensor.maxTemp : ''}</td>
                <td>
                    ${sensor.boundPoint !== null && sensor.boundPoint !== undefined
                        ? `<span class="status-bound">#${sensor.boundPoint}</span>`
                        : `<span class="status-unbound">Unbound</span>`}
                </td>
                <td class="${errorText ? 'error-cell' : ''}">${errorText}</td>
                <td class="${alarmText ? 'alarm-cell' : ''}">${alarmText}</td>
                <td>
                    ${sensor.boundPoint === null || sensor.boundPoint === undefined
                        ? `<button onclick="bindPrompt('DS18B20','${sensor.romString}')">Bind</button>`
                        : `<button onclick="unbindSensor('DS18B20','${sensor.romString}')">Unbind</button>`}
                </td>
            `;
            dsTbody.appendChild(row);
        });
    }

    // PT Table
    const ptTbody = document.getElementById('ptTbody');
    ptTbody.innerHTML = '';
    if (ptSensors.length === 0) {
        ptTbody.innerHTML = '<tr><td colspan="10">No PT1000 sensors found.</td></tr>';
    } else {
        ptSensors.forEach((sensor, idx) => {
            const errorText = getErrorText(sensor.errorStatus);
            const alarmText = getAlarmText(sensor.alarmStatus);
            const statusClass = getStatusClass(sensor.errorStatus, sensor.alarmStatus);
            
            const row = document.createElement('tr');
            row.className = statusClass;
            row.innerHTML = `
                <td>${idx+1}</td>
                <td>${sensor.name || ''}</td>
                <td class="chip-select">${sensor.chipSelectPin !== undefined ? sensor.chipSelectPin : ''}</td>
                <td>${sensor.bus !== undefined && sensor.bus !== null ? sensor.bus : ''}</td>
                <td>${sensor.currentTemp !== undefined ? sensor.currentTemp : ''}</td>
                <td>${sensor.minTemp !== undefined ? sensor.minTemp : ''}</td>
                <td>${sensor.maxTemp !== undefined ? sensor.maxTemp : ''}</td>
                <td>
                    ${sensor.boundPoint !== null && sensor.boundPoint !== undefined
                        ? `<span class="status-bound">#${sensor.boundPoint}</span>`
                        : `<span class="status-unbound">Unbound</span>`}
                </td>
                <td class="${errorText ? 'error-cell' : ''}">${errorText}</td>
                <td class="${alarmText ? 'alarm-cell' : ''}">${alarmText}</td>
                <td>
                    ${sensor.boundPoint === null || sensor.boundPoint === undefined
                        ? `<button onclick="bindPrompt('PT1000','${sensor.chipSelectPin}')">Bind</button>`
                        : `<button onclick="unbindSensor('PT1000','${sensor.chipSelectPin}')">Unbind</button>`}
                </td>
            `;
            ptTbody.appendChild(row);
        });
    }
}


        // Prompt user for measurement point to bind
        function bindPrompt(type, id) {
            let point = prompt("Enter Measurement Point address to bind:");
            if (point === null || point.trim() === "") return;
            point = parseInt(point, 10);
            if (isNaN(point)) {
                alert("Invalid address!");
                return;
            }
            bindSensor(type, id, point);
        }

        // Bind sensor to point
        function bindSensor(type, id, pointAddress) {
            let payload = { pointAddress };
            if (type === "DS18B20") payload.romString = id;
            else if (type === "PT1000") payload.chipSelect = parseInt(id, 10);
            fetch('/api/sensor-bind', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            }).then(res => {
                if (res.ok) fetchSensors();
                else alert("Failed to bind sensor");
            });
        }

        // Unbind sensor
        function unbindSensor(type, id) {
            let payload = {};
            if (type === "DS18B20") payload.romString = id;
            else if (type === "PT1000") payload.chipSelect = parseInt(id, 10);
            fetch('/api/sensor-unbind', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            }).then(res => {
                if (res.ok) fetchSensors();
                else alert("Failed to unbind sensor");
            });
        }

        // Discover sensors
        document.getElementById('discoverBtn').onclick = function() {
            fetch('/api/discover', { method: 'POST' })
                .then(res => {
                    if (res.ok) fetchSensors();
                    else alert("Discovery failed");
                });
        };

        // Reset min/max
        document.getElementById('resetMinMaxBtn').onclick = function() {
            fetch('/api/reset-minmax', { method: 'POST' })
                .then(res => {
                    if (res.ok) fetchSensors();
                    else alert("Reset failed");
                });
        };

        // Auto-update
        setInterval(fetchSensors, UPDATE_INTERVAL);
        window.onload = fetchSensors;
    </script>
</body>
</html>

